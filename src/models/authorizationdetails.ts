/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AuthorizationDetailsElement,
  AuthorizationDetailsElement$inboundSchema,
  AuthorizationDetailsElement$Outbound,
  AuthorizationDetailsElement$outboundSchema,
} from "./authorizationdetailselement.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The authorization details. This represents the value of the `authorization_details`
 *
 * @remarks
 * request parameter in the preceding device authorization request which is defined in
 * "OAuth 2.0 Rich Authorization Requests".
 */
export type AuthorizationDetails = {
  /**
   * Elements of this authorization details.
   *
   * @remarks
   */
  elements?: Array<AuthorizationDetailsElement> | undefined;
};

/** @internal */
export const AuthorizationDetails$inboundSchema: z.ZodType<
  AuthorizationDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  elements: z.array(AuthorizationDetailsElement$inboundSchema).optional(),
});

/** @internal */
export type AuthorizationDetails$Outbound = {
  elements?: Array<AuthorizationDetailsElement$Outbound> | undefined;
};

/** @internal */
export const AuthorizationDetails$outboundSchema: z.ZodType<
  AuthorizationDetails$Outbound,
  z.ZodTypeDef,
  AuthorizationDetails
> = z.object({
  elements: z.array(AuthorizationDetailsElement$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthorizationDetails$ {
  /** @deprecated use `AuthorizationDetails$inboundSchema` instead. */
  export const inboundSchema = AuthorizationDetails$inboundSchema;
  /** @deprecated use `AuthorizationDetails$outboundSchema` instead. */
  export const outboundSchema = AuthorizationDetails$outboundSchema;
  /** @deprecated use `AuthorizationDetails$Outbound` instead. */
  export type Outbound = AuthorizationDetails$Outbound;
}

export function authorizationDetailsToJSON(
  authorizationDetails: AuthorizationDetails,
): string {
  return JSON.stringify(
    AuthorizationDetails$outboundSchema.parse(authorizationDetails),
  );
}

export function authorizationDetailsFromJSON(
  jsonString: string,
): SafeParseResult<AuthorizationDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthorizationDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthorizationDetails' from JSON`,
  );
}
