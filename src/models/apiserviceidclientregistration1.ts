/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * An object containing api_serviceid_client_registration1 data
 */
export type ApiServiceIdClientRegistration1 = {
  /**
   * Client metadata in JSON format that complies with [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591)
   *
   * @remarks
   * (OAuth 2.0 Dynamic Client Registration Protocol).
   */
  json: string;
  /**
   * The client registration access token. Used only for GET, UPDATE, and DELETE requests.
   *
   * @remarks
   */
  token?: string | undefined;
  /**
   * The client's identifier. Used for GET, UPDATE, and DELETE requests
   *
   * @remarks
   */
  clientId?: number | undefined;
};

/** @internal */
export const ApiServiceIdClientRegistration1$inboundSchema: z.ZodType<
  ApiServiceIdClientRegistration1,
  z.ZodTypeDef,
  unknown
> = z.object({
  json: z.string(),
  token: z.string().optional(),
  clientId: z.number().int().optional(),
});

/** @internal */
export type ApiServiceIdClientRegistration1$Outbound = {
  json: string;
  token?: string | undefined;
  clientId?: number | undefined;
};

/** @internal */
export const ApiServiceIdClientRegistration1$outboundSchema: z.ZodType<
  ApiServiceIdClientRegistration1$Outbound,
  z.ZodTypeDef,
  ApiServiceIdClientRegistration1
> = z.object({
  json: z.string(),
  token: z.string().optional(),
  clientId: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiServiceIdClientRegistration1$ {
  /** @deprecated use `ApiServiceIdClientRegistration1$inboundSchema` instead. */
  export const inboundSchema = ApiServiceIdClientRegistration1$inboundSchema;
  /** @deprecated use `ApiServiceIdClientRegistration1$outboundSchema` instead. */
  export const outboundSchema = ApiServiceIdClientRegistration1$outboundSchema;
  /** @deprecated use `ApiServiceIdClientRegistration1$Outbound` instead. */
  export type Outbound = ApiServiceIdClientRegistration1$Outbound;
}

export function apiServiceIdClientRegistration1ToJSON(
  apiServiceIdClientRegistration1: ApiServiceIdClientRegistration1,
): string {
  return JSON.stringify(
    ApiServiceIdClientRegistration1$outboundSchema.parse(
      apiServiceIdClientRegistration1,
    ),
  );
}

export function apiServiceIdClientRegistration1FromJSON(
  jsonString: string,
): SafeParseResult<ApiServiceIdClientRegistration1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiServiceIdClientRegistration1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiServiceIdClientRegistration1' from JSON`,
  );
}
