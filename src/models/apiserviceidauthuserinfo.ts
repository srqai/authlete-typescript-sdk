/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Pair,
  Pair$inboundSchema,
  Pair$Outbound,
  Pair$outboundSchema,
} from "./pair.js";

/**
 * An object containing api_serviceid_auth_userinfo data
 */
export type ApiServiceIdAuthUserinfo = {
  /**
   * An access token.
   *
   * @remarks
   */
  token: string;
  /**
   * Client certificate used in the TLS connection established between the client application and the userinfo endpoint.
   *
   * @remarks
   *
   * The value of this request parameter is referred to when the access token given to the userinfo endpoint was bound to
   * a client certificate when it was issued. See [OAuth 2.0 Mutual TLS Client Authentication and Certificate-Bound Access Tokens]
   * (https://datatracker.ietf.org/doc/rfc8705/) for details about the specification of certificate-bound access tokens.
   */
  clientCertificate?: string | undefined;
  /**
   * `DPoP` header presented by the client during the request to the user info endpoint.
   *
   * @remarks
   *
   * The header contains a signed JWT which includes the public key that is paired with the private key used to sign the JWT.
   * See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
   * for details.
   */
  dpop?: string | undefined;
  /**
   * HTTP method of the user info request. This field is used to validate the DPoP header.
   *
   * @remarks
   * In normal cases, the value is either `GET` or `POST`.
   */
  htm?: string | undefined;
  /**
   * URL of the user info endpoint. This field is used to validate the DPoP header.
   *
   * @remarks
   *
   * If this parameter is omitted, the `userInfoEndpoint` property of the service is used as the default value.
   * See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
   * for details.
   */
  htu?: string | undefined;
  /**
   * The full URL of the userinfo endpoint.
   *
   * @remarks
   */
  uri?: string | undefined;
  /**
   * The HTTP message body of the request, if present.
   *
   * @remarks
   */
  message?: string | undefined;
  /**
   * HTTP headers to be included in processing the signature. If this is a signed request, this must include the
   *
   * @remarks
   * Signature and Signature-Input headers, as well as any additional headers covered by the signature.
   */
  headers?: Array<Pair> | undefined;
};

/** @internal */
export const ApiServiceIdAuthUserinfo$inboundSchema: z.ZodType<
  ApiServiceIdAuthUserinfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
  clientCertificate: z.string().optional(),
  dpop: z.string().optional(),
  htm: z.string().optional(),
  htu: z.string().optional(),
  uri: z.string().optional(),
  message: z.string().optional(),
  headers: z.array(Pair$inboundSchema).optional(),
});

/** @internal */
export type ApiServiceIdAuthUserinfo$Outbound = {
  token: string;
  clientCertificate?: string | undefined;
  dpop?: string | undefined;
  htm?: string | undefined;
  htu?: string | undefined;
  uri?: string | undefined;
  message?: string | undefined;
  headers?: Array<Pair$Outbound> | undefined;
};

/** @internal */
export const ApiServiceIdAuthUserinfo$outboundSchema: z.ZodType<
  ApiServiceIdAuthUserinfo$Outbound,
  z.ZodTypeDef,
  ApiServiceIdAuthUserinfo
> = z.object({
  token: z.string(),
  clientCertificate: z.string().optional(),
  dpop: z.string().optional(),
  htm: z.string().optional(),
  htu: z.string().optional(),
  uri: z.string().optional(),
  message: z.string().optional(),
  headers: z.array(Pair$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiServiceIdAuthUserinfo$ {
  /** @deprecated use `ApiServiceIdAuthUserinfo$inboundSchema` instead. */
  export const inboundSchema = ApiServiceIdAuthUserinfo$inboundSchema;
  /** @deprecated use `ApiServiceIdAuthUserinfo$outboundSchema` instead. */
  export const outboundSchema = ApiServiceIdAuthUserinfo$outboundSchema;
  /** @deprecated use `ApiServiceIdAuthUserinfo$Outbound` instead. */
  export type Outbound = ApiServiceIdAuthUserinfo$Outbound;
}

export function apiServiceIdAuthUserinfoToJSON(
  apiServiceIdAuthUserinfo: ApiServiceIdAuthUserinfo,
): string {
  return JSON.stringify(
    ApiServiceIdAuthUserinfo$outboundSchema.parse(apiServiceIdAuthUserinfo),
  );
}

export function apiServiceIdAuthUserinfoFromJSON(
  jsonString: string,
): SafeParseResult<ApiServiceIdAuthUserinfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiServiceIdAuthUserinfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiServiceIdAuthUserinfo' from JSON`,
  );
}
