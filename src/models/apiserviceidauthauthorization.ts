/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * An object containing api_serviceid_auth_authorization data
 */
export type ApiServiceIdAuthAuthorization = {
  /**
   * OAuth 2.0 authorization request parameters which are the request parameters that the OAuth 2.0 authorization endpoint of
   *
   * @remarks
   * the authorization server implementation received from the client application.
   *
   * The value of parameters is either (1) the entire query string when the HTTP method of the request from the client application is `GET`
   * or (2) the entire entity body (which is formatted in `application/x-www-form-urlencoded`) when the HTTP method of the request from
   * the client application is `POST`.
   */
  parameters: string;
};

/** @internal */
export const ApiServiceIdAuthAuthorization$inboundSchema: z.ZodType<
  ApiServiceIdAuthAuthorization,
  z.ZodTypeDef,
  unknown
> = z.object({
  parameters: z.string(),
});

/** @internal */
export type ApiServiceIdAuthAuthorization$Outbound = {
  parameters: string;
};

/** @internal */
export const ApiServiceIdAuthAuthorization$outboundSchema: z.ZodType<
  ApiServiceIdAuthAuthorization$Outbound,
  z.ZodTypeDef,
  ApiServiceIdAuthAuthorization
> = z.object({
  parameters: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiServiceIdAuthAuthorization$ {
  /** @deprecated use `ApiServiceIdAuthAuthorization$inboundSchema` instead. */
  export const inboundSchema = ApiServiceIdAuthAuthorization$inboundSchema;
  /** @deprecated use `ApiServiceIdAuthAuthorization$outboundSchema` instead. */
  export const outboundSchema = ApiServiceIdAuthAuthorization$outboundSchema;
  /** @deprecated use `ApiServiceIdAuthAuthorization$Outbound` instead. */
  export type Outbound = ApiServiceIdAuthAuthorization$Outbound;
}

export function apiServiceIdAuthAuthorizationToJSON(
  apiServiceIdAuthAuthorization: ApiServiceIdAuthAuthorization,
): string {
  return JSON.stringify(
    ApiServiceIdAuthAuthorization$outboundSchema.parse(
      apiServiceIdAuthAuthorization,
    ),
  );
}

export function apiServiceIdAuthAuthorizationFromJSON(
  jsonString: string,
): SafeParseResult<ApiServiceIdAuthAuthorization, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiServiceIdAuthAuthorization$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiServiceIdAuthAuthorization' from JSON`,
  );
}
