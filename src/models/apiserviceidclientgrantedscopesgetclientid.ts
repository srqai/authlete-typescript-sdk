/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * An object containing api_serviceid_client_granted_scopes_get_clientid data
 */
export type ApiServiceIdClientGrantedScopesGetClientId = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  serviceApiKey?: number | undefined;
  /**
   * Get the client ID.
   */
  clientId?: number | undefined;
  /**
   * Get the subject (= unique identifier) of the user
   *
   * @remarks
   * who has granted authorization to the client.
   */
  subject?: string | undefined;
  /**
   * Get the scopes granted to the client application by the last
   *
   * @remarks
   * authorization process by the user (who is identified by the
   * subject).
   */
  latestGrantedScopes?: Array<string> | undefined;
  /**
   * Get the scopes granted to the client application by all the
   *
   * @remarks
   * past authorization processes. Note that revoked scopes are
   * not included.
   */
  mergedGrantedScopes?: Array<string> | undefined;
  /**
   * Get the timestamp in milliseconds since Unix epoch
   *
   * @remarks
   * at which this record was modified.
   */
  modifiedAt?: number | undefined;
};

/** @internal */
export const ApiServiceIdClientGrantedScopesGetClientId$inboundSchema:
  z.ZodType<ApiServiceIdClientGrantedScopesGetClientId, z.ZodTypeDef, unknown> =
    z.object({
      resultCode: z.string().optional(),
      resultMessage: z.string().optional(),
      serviceApiKey: z.number().int().optional(),
      clientId: z.number().int().optional(),
      subject: z.string().optional(),
      latestGrantedScopes: z.array(z.string()).optional(),
      mergedGrantedScopes: z.array(z.string()).optional(),
      modifiedAt: z.number().int().optional(),
    });

/** @internal */
export type ApiServiceIdClientGrantedScopesGetClientId$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  serviceApiKey?: number | undefined;
  clientId?: number | undefined;
  subject?: string | undefined;
  latestGrantedScopes?: Array<string> | undefined;
  mergedGrantedScopes?: Array<string> | undefined;
  modifiedAt?: number | undefined;
};

/** @internal */
export const ApiServiceIdClientGrantedScopesGetClientId$outboundSchema:
  z.ZodType<
    ApiServiceIdClientGrantedScopesGetClientId$Outbound,
    z.ZodTypeDef,
    ApiServiceIdClientGrantedScopesGetClientId
  > = z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
    serviceApiKey: z.number().int().optional(),
    clientId: z.number().int().optional(),
    subject: z.string().optional(),
    latestGrantedScopes: z.array(z.string()).optional(),
    mergedGrantedScopes: z.array(z.string()).optional(),
    modifiedAt: z.number().int().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiServiceIdClientGrantedScopesGetClientId$ {
  /** @deprecated use `ApiServiceIdClientGrantedScopesGetClientId$inboundSchema` instead. */
  export const inboundSchema =
    ApiServiceIdClientGrantedScopesGetClientId$inboundSchema;
  /** @deprecated use `ApiServiceIdClientGrantedScopesGetClientId$outboundSchema` instead. */
  export const outboundSchema =
    ApiServiceIdClientGrantedScopesGetClientId$outboundSchema;
  /** @deprecated use `ApiServiceIdClientGrantedScopesGetClientId$Outbound` instead. */
  export type Outbound = ApiServiceIdClientGrantedScopesGetClientId$Outbound;
}

export function apiServiceIdClientGrantedScopesGetClientIdToJSON(
  apiServiceIdClientGrantedScopesGetClientId:
    ApiServiceIdClientGrantedScopesGetClientId,
): string {
  return JSON.stringify(
    ApiServiceIdClientGrantedScopesGetClientId$outboundSchema.parse(
      apiServiceIdClientGrantedScopesGetClientId,
    ),
  );
}

export function apiServiceIdClientGrantedScopesGetClientIdFromJSON(
  jsonString: string,
): SafeParseResult<
  ApiServiceIdClientGrantedScopesGetClientId,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ApiServiceIdClientGrantedScopesGetClientId$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ApiServiceIdClientGrantedScopesGetClientId' from JSON`,
  );
}
