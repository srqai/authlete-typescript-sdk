/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * An object containing api_serviceid_auth_token_revoke data
 */
export type ApiServiceIdAuthTokenRevoke = {
  /**
   * The identifier of an access token to revoke
   *
   * @remarks
   *
   * The hash of an access token is recognized as an identifier as well as the access token itself.
   */
  accessTokenIdentifier?: string | undefined;
  /**
   * The identifier of a refresh token to revoke.
   *
   * @remarks
   *
   * The hash of a refresh token is recognized as an identifier as well as the refresh token itself.
   */
  refreshTokenIdentifier?: string | undefined;
  /**
   * The client ID of the access token to be revoked.
   *
   * @remarks
   *
   * Both the numeric client ID and the alias are recognized as an identifier
   * of a client.
   */
  clientIdentifier?: string | undefined;
  /**
   * The subject of a resource owner.
   *
   * @remarks
   */
  subject?: string | undefined;
};

/** @internal */
export const ApiServiceIdAuthTokenRevoke$inboundSchema: z.ZodType<
  ApiServiceIdAuthTokenRevoke,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessTokenIdentifier: z.string().optional(),
  refreshTokenIdentifier: z.string().optional(),
  clientIdentifier: z.string().optional(),
  subject: z.string().optional(),
});

/** @internal */
export type ApiServiceIdAuthTokenRevoke$Outbound = {
  accessTokenIdentifier?: string | undefined;
  refreshTokenIdentifier?: string | undefined;
  clientIdentifier?: string | undefined;
  subject?: string | undefined;
};

/** @internal */
export const ApiServiceIdAuthTokenRevoke$outboundSchema: z.ZodType<
  ApiServiceIdAuthTokenRevoke$Outbound,
  z.ZodTypeDef,
  ApiServiceIdAuthTokenRevoke
> = z.object({
  accessTokenIdentifier: z.string().optional(),
  refreshTokenIdentifier: z.string().optional(),
  clientIdentifier: z.string().optional(),
  subject: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiServiceIdAuthTokenRevoke$ {
  /** @deprecated use `ApiServiceIdAuthTokenRevoke$inboundSchema` instead. */
  export const inboundSchema = ApiServiceIdAuthTokenRevoke$inboundSchema;
  /** @deprecated use `ApiServiceIdAuthTokenRevoke$outboundSchema` instead. */
  export const outboundSchema = ApiServiceIdAuthTokenRevoke$outboundSchema;
  /** @deprecated use `ApiServiceIdAuthTokenRevoke$Outbound` instead. */
  export type Outbound = ApiServiceIdAuthTokenRevoke$Outbound;
}

export function apiServiceIdAuthTokenRevokeToJSON(
  apiServiceIdAuthTokenRevoke: ApiServiceIdAuthTokenRevoke,
): string {
  return JSON.stringify(
    ApiServiceIdAuthTokenRevoke$outboundSchema.parse(
      apiServiceIdAuthTokenRevoke,
    ),
  );
}

export function apiServiceIdAuthTokenRevokeFromJSON(
  jsonString: string,
): SafeParseResult<ApiServiceIdAuthTokenRevoke, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiServiceIdAuthTokenRevoke$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiServiceIdAuthTokenRevoke' from JSON`,
  );
}
