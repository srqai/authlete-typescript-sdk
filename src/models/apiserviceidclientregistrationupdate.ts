/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * An object containing api_serviceid_client_registration_update data
 */
export type ApiServiceIdClientRegistrationUpdate = {
  /**
   * Client ID.
   *
   * @remarks
   */
  clientId: number;
  /**
   * Client registration access token.
   *
   * @remarks
   */
  token: string;
  /**
   * Client metadata in JSON format that complies with [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591)
   *
   * @remarks
   * (OAuth 2.0 Dynamic Client Registration Protocol).
   */
  json: string;
};

/** @internal */
export const ApiServiceIdClientRegistrationUpdate$inboundSchema: z.ZodType<
  ApiServiceIdClientRegistrationUpdate,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientId: z.number().int(),
  token: z.string(),
  json: z.string(),
});

/** @internal */
export type ApiServiceIdClientRegistrationUpdate$Outbound = {
  clientId: number;
  token: string;
  json: string;
};

/** @internal */
export const ApiServiceIdClientRegistrationUpdate$outboundSchema: z.ZodType<
  ApiServiceIdClientRegistrationUpdate$Outbound,
  z.ZodTypeDef,
  ApiServiceIdClientRegistrationUpdate
> = z.object({
  clientId: z.number().int(),
  token: z.string(),
  json: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiServiceIdClientRegistrationUpdate$ {
  /** @deprecated use `ApiServiceIdClientRegistrationUpdate$inboundSchema` instead. */
  export const inboundSchema =
    ApiServiceIdClientRegistrationUpdate$inboundSchema;
  /** @deprecated use `ApiServiceIdClientRegistrationUpdate$outboundSchema` instead. */
  export const outboundSchema =
    ApiServiceIdClientRegistrationUpdate$outboundSchema;
  /** @deprecated use `ApiServiceIdClientRegistrationUpdate$Outbound` instead. */
  export type Outbound = ApiServiceIdClientRegistrationUpdate$Outbound;
}

export function apiServiceIdClientRegistrationUpdateToJSON(
  apiServiceIdClientRegistrationUpdate: ApiServiceIdClientRegistrationUpdate,
): string {
  return JSON.stringify(
    ApiServiceIdClientRegistrationUpdate$outboundSchema.parse(
      apiServiceIdClientRegistrationUpdate,
    ),
  );
}

export function apiServiceIdClientRegistrationUpdateFromJSON(
  jsonString: string,
): SafeParseResult<ApiServiceIdClientRegistrationUpdate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApiServiceIdClientRegistrationUpdate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiServiceIdClientRegistrationUpdate' from JSON`,
  );
}
