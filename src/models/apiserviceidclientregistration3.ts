/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Client,
  Client$inboundSchema,
  Client$Outbound,
  Client$outboundSchema,
} from "./client.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The next action that the authorization server implementation should take.
 *
 * @remarks
 */
export const Action = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Created: "CREATED",
  Unauthorized: "UNAUTHORIZED",
  Forbidden: "FORBIDDEN",
  Json: "JSON",
  Jwt: "JWT",
  Ok: "OK",
} as const;
/**
 * The next action that the authorization server implementation should take.
 *
 * @remarks
 */
export type Action = ClosedEnum<typeof Action>;

/**
 * An object containing api_serviceid_client_registration3 data
 */
export type ApiServiceIdClientRegistration3 = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   *
   * @remarks
   */
  action?: Action | undefined;
  /**
   * The content that the authorization server implementation is to return to the client application.
   *
   * @remarks
   * Its format varies depending on the value of `action` parameter.
   */
  responseContent?: string | undefined;
  /**
   * An object containing client data
   */
  client?: Client | undefined;
};

/** @internal */
export const Action$inboundSchema: z.ZodNativeEnum<typeof Action> = z
  .nativeEnum(Action);

/** @internal */
export const Action$outboundSchema: z.ZodNativeEnum<typeof Action> =
  Action$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Action$ {
  /** @deprecated use `Action$inboundSchema` instead. */
  export const inboundSchema = Action$inboundSchema;
  /** @deprecated use `Action$outboundSchema` instead. */
  export const outboundSchema = Action$outboundSchema;
}

/** @internal */
export const ApiServiceIdClientRegistration3$inboundSchema: z.ZodType<
  ApiServiceIdClientRegistration3,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: Action$inboundSchema.optional(),
  responseContent: z.string().optional(),
  client: Client$inboundSchema.optional(),
});

/** @internal */
export type ApiServiceIdClientRegistration3$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  client?: Client$Outbound | undefined;
};

/** @internal */
export const ApiServiceIdClientRegistration3$outboundSchema: z.ZodType<
  ApiServiceIdClientRegistration3$Outbound,
  z.ZodTypeDef,
  ApiServiceIdClientRegistration3
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: Action$outboundSchema.optional(),
  responseContent: z.string().optional(),
  client: Client$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiServiceIdClientRegistration3$ {
  /** @deprecated use `ApiServiceIdClientRegistration3$inboundSchema` instead. */
  export const inboundSchema = ApiServiceIdClientRegistration3$inboundSchema;
  /** @deprecated use `ApiServiceIdClientRegistration3$outboundSchema` instead. */
  export const outboundSchema = ApiServiceIdClientRegistration3$outboundSchema;
  /** @deprecated use `ApiServiceIdClientRegistration3$Outbound` instead. */
  export type Outbound = ApiServiceIdClientRegistration3$Outbound;
}

export function apiServiceIdClientRegistration3ToJSON(
  apiServiceIdClientRegistration3: ApiServiceIdClientRegistration3,
): string {
  return JSON.stringify(
    ApiServiceIdClientRegistration3$outboundSchema.parse(
      apiServiceIdClientRegistration3,
    ),
  );
}

export function apiServiceIdClientRegistration3FromJSON(
  jsonString: string,
): SafeParseResult<ApiServiceIdClientRegistration3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiServiceIdClientRegistration3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiServiceIdClientRegistration3' from JSON`,
  );
}
