/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * An object containing api_serviceid_backchannel_authentication data
 */
export type ApiServiceIdBackchannelAuthentication = {
  /**
   * Parameters of a backchannel authentication request which are the request parameters that the
   *
   * @remarks
   * backchannel authentication endpoint of the OpenID provider implementation received from the client
   * application.
   *
   * The value of `parameters` is the entire entity body (which is formatted in `application/x-www-form-urlencoded`)
   * of the request from the client application.
   */
  parameters: string;
  /**
   * The client ID extracted from Authorization header of the backchannel authentication request from
   *
   * @remarks
   * the client application.
   *
   * If the backchannel authentication endpoint of the OpenID provider implementation supports Basic
   * Authentication as a means of client authentication, and the request from the client application
   * contained its client ID in Authorization header, the value should be extracted and set to this parameter.
   */
  clientId?: number | undefined;
  /**
   * The client secret extracted from Authorization header of the backchannel authentication request
   *
   * @remarks
   * from the client application.
   *
   * If the backchannel authentication endpoint of the OpenID provider implementation supports Basic
   * Authentication as a means of client authentication, and the request from the client application
   * contained its client secret in Authorization header, the value should be extracted and set to
   * this parameter.
   */
  clientSecret?: string | undefined;
  /**
   * The client certification used in the TLS connection between the client application and the
   *
   * @remarks
   * backchannel authentication endpoint of the OpenID provider.
   */
  clientCertificate?: string | undefined;
  /**
   * The client certificate path presented by the client during client authentication. Each element
   *
   * @remarks
   * is a string in PEM format.
   */
  clientCertificatePath?: string | undefined;
};

/** @internal */
export const ApiServiceIdBackchannelAuthentication$inboundSchema: z.ZodType<
  ApiServiceIdBackchannelAuthentication,
  z.ZodTypeDef,
  unknown
> = z.object({
  parameters: z.string(),
  clientId: z.number().int().optional(),
  clientSecret: z.string().optional(),
  clientCertificate: z.string().optional(),
  clientCertificatePath: z.string().optional(),
});

/** @internal */
export type ApiServiceIdBackchannelAuthentication$Outbound = {
  parameters: string;
  clientId?: number | undefined;
  clientSecret?: string | undefined;
  clientCertificate?: string | undefined;
  clientCertificatePath?: string | undefined;
};

/** @internal */
export const ApiServiceIdBackchannelAuthentication$outboundSchema: z.ZodType<
  ApiServiceIdBackchannelAuthentication$Outbound,
  z.ZodTypeDef,
  ApiServiceIdBackchannelAuthentication
> = z.object({
  parameters: z.string(),
  clientId: z.number().int().optional(),
  clientSecret: z.string().optional(),
  clientCertificate: z.string().optional(),
  clientCertificatePath: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiServiceIdBackchannelAuthentication$ {
  /** @deprecated use `ApiServiceIdBackchannelAuthentication$inboundSchema` instead. */
  export const inboundSchema =
    ApiServiceIdBackchannelAuthentication$inboundSchema;
  /** @deprecated use `ApiServiceIdBackchannelAuthentication$outboundSchema` instead. */
  export const outboundSchema =
    ApiServiceIdBackchannelAuthentication$outboundSchema;
  /** @deprecated use `ApiServiceIdBackchannelAuthentication$Outbound` instead. */
  export type Outbound = ApiServiceIdBackchannelAuthentication$Outbound;
}

export function apiServiceIdBackchannelAuthenticationToJSON(
  apiServiceIdBackchannelAuthentication: ApiServiceIdBackchannelAuthentication,
): string {
  return JSON.stringify(
    ApiServiceIdBackchannelAuthentication$outboundSchema.parse(
      apiServiceIdBackchannelAuthentication,
    ),
  );
}

export function apiServiceIdBackchannelAuthenticationFromJSON(
  jsonString: string,
): SafeParseResult<ApiServiceIdBackchannelAuthentication, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApiServiceIdBackchannelAuthentication$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiServiceIdBackchannelAuthentication' from JSON`,
  );
}
