/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * An object containing api_serviceid_backchannel_authentication_issue data
 */
export type ApiServiceIdBackchannelAuthenticationIssue = {
  /**
   * The ticket issued from Authlete's `/backchannel/authentication` API.
   *
   * @remarks
   */
  ticket: string;
};

/** @internal */
export const ApiServiceIdBackchannelAuthenticationIssue$inboundSchema:
  z.ZodType<ApiServiceIdBackchannelAuthenticationIssue, z.ZodTypeDef, unknown> =
    z.object({
      ticket: z.string(),
    });

/** @internal */
export type ApiServiceIdBackchannelAuthenticationIssue$Outbound = {
  ticket: string;
};

/** @internal */
export const ApiServiceIdBackchannelAuthenticationIssue$outboundSchema:
  z.ZodType<
    ApiServiceIdBackchannelAuthenticationIssue$Outbound,
    z.ZodTypeDef,
    ApiServiceIdBackchannelAuthenticationIssue
  > = z.object({
    ticket: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiServiceIdBackchannelAuthenticationIssue$ {
  /** @deprecated use `ApiServiceIdBackchannelAuthenticationIssue$inboundSchema` instead. */
  export const inboundSchema =
    ApiServiceIdBackchannelAuthenticationIssue$inboundSchema;
  /** @deprecated use `ApiServiceIdBackchannelAuthenticationIssue$outboundSchema` instead. */
  export const outboundSchema =
    ApiServiceIdBackchannelAuthenticationIssue$outboundSchema;
  /** @deprecated use `ApiServiceIdBackchannelAuthenticationIssue$Outbound` instead. */
  export type Outbound = ApiServiceIdBackchannelAuthenticationIssue$Outbound;
}

export function apiServiceIdBackchannelAuthenticationIssueToJSON(
  apiServiceIdBackchannelAuthenticationIssue:
    ApiServiceIdBackchannelAuthenticationIssue,
): string {
  return JSON.stringify(
    ApiServiceIdBackchannelAuthenticationIssue$outboundSchema.parse(
      apiServiceIdBackchannelAuthenticationIssue,
    ),
  );
}

export function apiServiceIdBackchannelAuthenticationIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  ApiServiceIdBackchannelAuthenticationIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ApiServiceIdBackchannelAuthenticationIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ApiServiceIdBackchannelAuthenticationIssue' from JSON`,
  );
}
