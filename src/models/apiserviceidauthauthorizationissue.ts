/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AuthorizationDetails,
  AuthorizationDetails$inboundSchema,
  AuthorizationDetails$Outbound,
  AuthorizationDetails$outboundSchema,
} from "./authorizationdetails.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Property,
  Property$inboundSchema,
  Property$Outbound,
  Property$outboundSchema,
} from "./property.js";

/**
 * An object containing api_serviceid_auth_authorization_issue data
 */
export type ApiServiceIdAuthAuthorizationIssue = {
  /**
   * The ticket issued from Authlete `/auth/authorization` API.
   *
   * @remarks
   */
  ticket: string;
  /**
   * The subject (= a user account managed by the service) who has granted authorization to the client application.
   *
   * @remarks
   */
  subject: string;
  /**
   * The time when the authentication of the end-user occurred. Its value is the number of seconds from `1970-01-01`.
   *
   * @remarks
   */
  authTime?: number | undefined;
  /**
   * The Authentication Context Class Reference performed for the end-user authentication.
   */
  acr?: string | undefined;
  /**
   * The claims of the end-user (= pieces of information about the end-user) in JSON format.
   *
   * @remarks
   * See [OpenID Connect Core 1.0, 5.1. Standard Claims](https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims) for details about the format.
   */
  claims?: string | undefined;
  /**
   * Extra properties to associate with an access token and/or an authorization code.
   */
  properties?: Array<Property> | undefined;
  /**
   * Scopes to associate with an access token and/or an authorization code.
   *
   * @remarks
   * If a non-empty string array is given, it replaces the scopes specified by the original authorization request.
   */
  scopes?: Array<string> | undefined;
  /**
   * The value of the `sub` claim to embed in an ID token. If this request parameter is `null` or empty,
   *
   * @remarks
   * the value of the `subject` request parameter is used as the value of the `sub` claim.
   */
  sub?: string | undefined;
  /**
   * JSON that represents additional JWS header parameters for ID tokens that may be issued based on
   *
   * @remarks
   * the authorization request.
   */
  idtHeaderParams?: string | undefined;
  /**
   * Claim key-value pairs that are used to compute transformed claims.
   *
   * @remarks
   */
  claimsForTx?: string | undefined;
  /**
   * the claims that the user has consented for the client application
   *
   * @remarks
   * to know.
   */
  consentedClaims?: Array<string> | undefined;
  /**
   * The authorization details. This represents the value of the `authorization_details`
   *
   * @remarks
   * request parameter in the preceding device authorization request which is defined in
   * "OAuth 2.0 Rich Authorization Requests".
   */
  authorizationDetails?: AuthorizationDetails | undefined;
  /**
   * Additional claims that are added to the payload part of the JWT access token.
   *
   * @remarks
   */
  jwtAtClaims?: string | undefined;
  /**
   * The representation of an access token that may be issued as a result of the Authlete API call.
   *
   * @remarks
   */
  accessToken?: string | undefined;
};

/** @internal */
export const ApiServiceIdAuthAuthorizationIssue$inboundSchema: z.ZodType<
  ApiServiceIdAuthAuthorizationIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  ticket: z.string(),
  subject: z.string(),
  authTime: z.number().int().optional(),
  acr: z.string().optional(),
  claims: z.string().optional(),
  properties: z.array(Property$inboundSchema).optional(),
  scopes: z.array(z.string()).optional(),
  sub: z.string().optional(),
  idtHeaderParams: z.string().optional(),
  claimsForTx: z.string().optional(),
  consentedClaims: z.array(z.string()).optional(),
  authorizationDetails: AuthorizationDetails$inboundSchema.optional(),
  jwtAtClaims: z.string().optional(),
  accessToken: z.string().optional(),
});

/** @internal */
export type ApiServiceIdAuthAuthorizationIssue$Outbound = {
  ticket: string;
  subject: string;
  authTime?: number | undefined;
  acr?: string | undefined;
  claims?: string | undefined;
  properties?: Array<Property$Outbound> | undefined;
  scopes?: Array<string> | undefined;
  sub?: string | undefined;
  idtHeaderParams?: string | undefined;
  claimsForTx?: string | undefined;
  consentedClaims?: Array<string> | undefined;
  authorizationDetails?: AuthorizationDetails$Outbound | undefined;
  jwtAtClaims?: string | undefined;
  accessToken?: string | undefined;
};

/** @internal */
export const ApiServiceIdAuthAuthorizationIssue$outboundSchema: z.ZodType<
  ApiServiceIdAuthAuthorizationIssue$Outbound,
  z.ZodTypeDef,
  ApiServiceIdAuthAuthorizationIssue
> = z.object({
  ticket: z.string(),
  subject: z.string(),
  authTime: z.number().int().optional(),
  acr: z.string().optional(),
  claims: z.string().optional(),
  properties: z.array(Property$outboundSchema).optional(),
  scopes: z.array(z.string()).optional(),
  sub: z.string().optional(),
  idtHeaderParams: z.string().optional(),
  claimsForTx: z.string().optional(),
  consentedClaims: z.array(z.string()).optional(),
  authorizationDetails: AuthorizationDetails$outboundSchema.optional(),
  jwtAtClaims: z.string().optional(),
  accessToken: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiServiceIdAuthAuthorizationIssue$ {
  /** @deprecated use `ApiServiceIdAuthAuthorizationIssue$inboundSchema` instead. */
  export const inboundSchema = ApiServiceIdAuthAuthorizationIssue$inboundSchema;
  /** @deprecated use `ApiServiceIdAuthAuthorizationIssue$outboundSchema` instead. */
  export const outboundSchema =
    ApiServiceIdAuthAuthorizationIssue$outboundSchema;
  /** @deprecated use `ApiServiceIdAuthAuthorizationIssue$Outbound` instead. */
  export type Outbound = ApiServiceIdAuthAuthorizationIssue$Outbound;
}

export function apiServiceIdAuthAuthorizationIssueToJSON(
  apiServiceIdAuthAuthorizationIssue: ApiServiceIdAuthAuthorizationIssue,
): string {
  return JSON.stringify(
    ApiServiceIdAuthAuthorizationIssue$outboundSchema.parse(
      apiServiceIdAuthAuthorizationIssue,
    ),
  );
}

export function apiServiceIdAuthAuthorizationIssueFromJSON(
  jsonString: string,
): SafeParseResult<ApiServiceIdAuthAuthorizationIssue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApiServiceIdAuthAuthorizationIssue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiServiceIdAuthAuthorizationIssue' from JSON`,
  );
}
