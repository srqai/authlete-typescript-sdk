/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type AuthorizationGrant = {};

/** @internal */
export const AuthorizationGrant$inboundSchema: z.ZodType<
  AuthorizationGrant,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type AuthorizationGrant$Outbound = {};

/** @internal */
export const AuthorizationGrant$outboundSchema: z.ZodType<
  AuthorizationGrant$Outbound,
  z.ZodTypeDef,
  AuthorizationGrant
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthorizationGrant$ {
  /** @deprecated use `AuthorizationGrant$inboundSchema` instead. */
  export const inboundSchema = AuthorizationGrant$inboundSchema;
  /** @deprecated use `AuthorizationGrant$outboundSchema` instead. */
  export const outboundSchema = AuthorizationGrant$outboundSchema;
  /** @deprecated use `AuthorizationGrant$Outbound` instead. */
  export type Outbound = AuthorizationGrant$Outbound;
}

export function authorizationGrantToJSON(
  authorizationGrant: AuthorizationGrant,
): string {
  return JSON.stringify(
    AuthorizationGrant$outboundSchema.parse(authorizationGrant),
  );
}

export function authorizationGrantFromJSON(
  jsonString: string,
): SafeParseResult<AuthorizationGrant, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthorizationGrant$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthorizationGrant' from JSON`,
  );
}
