/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * An object containing api_serviceid_auth_token data
 */
export type ApiServiceIdAuthToken = {
  /**
   * OAuth 2.0 token request parameters which are the request parameters that the OAuth 2.0 token endpoint of the authorization server
   *
   * @remarks
   * implementation received from the client application.
   *
   * The value of parameters is the entire entity body (which is formatted in `application/x-www-form-urlencoded`) of the request from
   * the client application.
   */
  parameters: string;
  /**
   * The client ID extracted from `Authorization` header of the token request from the client application.
   *
   * @remarks
   *
   * If the token endpoint of the authorization server implementation supports basic authentication as
   * a means of client authentication, and the request from the client application contained its client ID
   * in `Authorization` header, the value should be extracted and set to this parameter.
   */
  clientId?: number | undefined;
  /**
   * The client secret extracted from `Authorization` header of the token request from the client application.
   *
   * @remarks
   *
   * If the token endpoint of the authorization server implementation supports basic authentication as a means of
   * client authentication, and the request from the client application contained its client secret in `Authorization` header,
   * the value should be extracted and set to this parameter.
   */
  clientSecret?: string | undefined;
  /**
   * The client certificate from the MTLS of the token request from the client application.
   */
  clientCertificate?: string | undefined;
  /**
   * The certificate path presented by the client during client authentication. These certificates are strings in PEM format.
   *
   * @remarks
   */
  clientCertificatePath?: string | undefined;
  /**
   * Extra properties to associate with an access token. See [Extra Properties](https://www.authlete.com/developers/definitive_guide/extra_properties/)
   *
   * @remarks
   * for details.
   */
  properties?: string | undefined;
  /**
   * `DPoP` header presented by the client during the request to the token endpoint.
   *
   * @remarks
   *
   * The header contains a signed JWT which includes the public key that is paired with the private key used to sign the JWT.
   * See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
   * for details.
   */
  dpop?: string | undefined;
  /**
   * HTTP method of the token request. This field is used to validate the `DPoP` header.
   *
   * @remarks
   *
   * In normal cases, the value is `POST`. When this parameter is omitted, `POST` is used as the default value.
   * See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
   * for details.
   */
  htm?: string | undefined;
  /**
   * URL of the token endpoint. This field is used to validate the `DPoP` header.
   *
   * @remarks
   *
   * If this parameter is omitted, the `tokenEndpoint` property of the Service is used as the default value.
   * See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
   * for details.
   */
  htu?: string | undefined;
  /**
   * The representation of an access token that may be issued as a result of the Authlete API call.
   *
   * @remarks
   */
  accessToken?: string | undefined;
  /**
   * Additional claims that are added to the payload part of the JWT access token.
   *
   * @remarks
   */
  jwtAtClaims?: string | undefined;
};

/** @internal */
export const ApiServiceIdAuthToken$inboundSchema: z.ZodType<
  ApiServiceIdAuthToken,
  z.ZodTypeDef,
  unknown
> = z.object({
  parameters: z.string(),
  clientId: z.number().int().optional(),
  clientSecret: z.string().optional(),
  clientCertificate: z.string().optional(),
  clientCertificatePath: z.string().optional(),
  properties: z.string().optional(),
  dpop: z.string().optional(),
  htm: z.string().optional(),
  htu: z.string().optional(),
  accessToken: z.string().optional(),
  jwtAtClaims: z.string().optional(),
});

/** @internal */
export type ApiServiceIdAuthToken$Outbound = {
  parameters: string;
  clientId?: number | undefined;
  clientSecret?: string | undefined;
  clientCertificate?: string | undefined;
  clientCertificatePath?: string | undefined;
  properties?: string | undefined;
  dpop?: string | undefined;
  htm?: string | undefined;
  htu?: string | undefined;
  accessToken?: string | undefined;
  jwtAtClaims?: string | undefined;
};

/** @internal */
export const ApiServiceIdAuthToken$outboundSchema: z.ZodType<
  ApiServiceIdAuthToken$Outbound,
  z.ZodTypeDef,
  ApiServiceIdAuthToken
> = z.object({
  parameters: z.string(),
  clientId: z.number().int().optional(),
  clientSecret: z.string().optional(),
  clientCertificate: z.string().optional(),
  clientCertificatePath: z.string().optional(),
  properties: z.string().optional(),
  dpop: z.string().optional(),
  htm: z.string().optional(),
  htu: z.string().optional(),
  accessToken: z.string().optional(),
  jwtAtClaims: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiServiceIdAuthToken$ {
  /** @deprecated use `ApiServiceIdAuthToken$inboundSchema` instead. */
  export const inboundSchema = ApiServiceIdAuthToken$inboundSchema;
  /** @deprecated use `ApiServiceIdAuthToken$outboundSchema` instead. */
  export const outboundSchema = ApiServiceIdAuthToken$outboundSchema;
  /** @deprecated use `ApiServiceIdAuthToken$Outbound` instead. */
  export type Outbound = ApiServiceIdAuthToken$Outbound;
}

export function apiServiceIdAuthTokenToJSON(
  apiServiceIdAuthToken: ApiServiceIdAuthToken,
): string {
  return JSON.stringify(
    ApiServiceIdAuthToken$outboundSchema.parse(apiServiceIdAuthToken),
  );
}

export function apiServiceIdAuthTokenFromJSON(
  jsonString: string,
): SafeParseResult<ApiServiceIdAuthToken, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiServiceIdAuthToken$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiServiceIdAuthToken' from JSON`,
  );
}
