/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * An object containing api_serviceid_client_authorization_update_clientid data
 */
export type ApiServiceIdClientAuthorizationUpdateClientId = {
  /**
   * The subject (= unique identifier) of the end-user who has granted authorization to the client
   *
   * @remarks
   * application.
   */
  subject: string;
  /**
   * An array of new scopes. Optional. If a non-null value is given, the new scopes are set to all
   *
   * @remarks
   * existing access tokens. If an API call is made using `"Content-Type: application/x-www-form-urlencoded"`,
   * scope names listed in this request parameter should be delimited by spaces (after form encoding,
   * spaces are converted to `+`).
   */
  scopes?: Array<string> | undefined;
};

/** @internal */
export const ApiServiceIdClientAuthorizationUpdateClientId$inboundSchema:
  z.ZodType<
    ApiServiceIdClientAuthorizationUpdateClientId,
    z.ZodTypeDef,
    unknown
  > = z.object({
    subject: z.string(),
    scopes: z.array(z.string()).optional(),
  });

/** @internal */
export type ApiServiceIdClientAuthorizationUpdateClientId$Outbound = {
  subject: string;
  scopes?: Array<string> | undefined;
};

/** @internal */
export const ApiServiceIdClientAuthorizationUpdateClientId$outboundSchema:
  z.ZodType<
    ApiServiceIdClientAuthorizationUpdateClientId$Outbound,
    z.ZodTypeDef,
    ApiServiceIdClientAuthorizationUpdateClientId
  > = z.object({
    subject: z.string(),
    scopes: z.array(z.string()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiServiceIdClientAuthorizationUpdateClientId$ {
  /** @deprecated use `ApiServiceIdClientAuthorizationUpdateClientId$inboundSchema` instead. */
  export const inboundSchema =
    ApiServiceIdClientAuthorizationUpdateClientId$inboundSchema;
  /** @deprecated use `ApiServiceIdClientAuthorizationUpdateClientId$outboundSchema` instead. */
  export const outboundSchema =
    ApiServiceIdClientAuthorizationUpdateClientId$outboundSchema;
  /** @deprecated use `ApiServiceIdClientAuthorizationUpdateClientId$Outbound` instead. */
  export type Outbound = ApiServiceIdClientAuthorizationUpdateClientId$Outbound;
}

export function apiServiceIdClientAuthorizationUpdateClientIdToJSON(
  apiServiceIdClientAuthorizationUpdateClientId:
    ApiServiceIdClientAuthorizationUpdateClientId,
): string {
  return JSON.stringify(
    ApiServiceIdClientAuthorizationUpdateClientId$outboundSchema.parse(
      apiServiceIdClientAuthorizationUpdateClientId,
    ),
  );
}

export function apiServiceIdClientAuthorizationUpdateClientIdFromJSON(
  jsonString: string,
): SafeParseResult<
  ApiServiceIdClientAuthorizationUpdateClientId,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ApiServiceIdClientAuthorizationUpdateClientId$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ApiServiceIdClientAuthorizationUpdateClientId' from JSON`,
  );
}
