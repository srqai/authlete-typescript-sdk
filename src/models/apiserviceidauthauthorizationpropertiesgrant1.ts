/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AuthorizationDetails,
  AuthorizationDetails$inboundSchema,
  AuthorizationDetails$Outbound,
  AuthorizationDetails$outboundSchema,
} from "./authorizationdetails.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * An object containing items data
 */
export type ApiServiceIdAuthAuthorizationpropertiesgrant1Scope = {
  /**
   * Space-delimited scopes.
   *
   * @remarks
   */
  scope?: string | undefined;
  /**
   * List of resource indicators.
   *
   * @remarks
   */
  resource?: Array<string> | undefined;
};

/**
 * An object containing api_serviceid_auth_authorizationpropertiesgrant1 data
 */
export type ApiServiceIdAuthAuthorizationpropertiesgrant1 = {
  /**
   * An array of scopes items
   */
  scopes?:
    | Array<ApiServiceIdAuthAuthorizationpropertiesgrant1Scope>
    | undefined;
  /**
   * The claims associated with the Grant.
   *
   * @remarks
   */
  claims?: Array<string> | undefined;
  /**
   * The authorization details. This represents the value of the `authorization_details`
   *
   * @remarks
   * request parameter in the preceding device authorization request which is defined in
   * "OAuth 2.0 Rich Authorization Requests".
   */
  authorizationDetails?: AuthorizationDetails | undefined;
};

/** @internal */
export const ApiServiceIdAuthAuthorizationpropertiesgrant1Scope$inboundSchema:
  z.ZodType<
    ApiServiceIdAuthAuthorizationpropertiesgrant1Scope,
    z.ZodTypeDef,
    unknown
  > = z.object({
    scope: z.string().optional(),
    resource: z.array(z.string()).optional(),
  });

/** @internal */
export type ApiServiceIdAuthAuthorizationpropertiesgrant1Scope$Outbound = {
  scope?: string | undefined;
  resource?: Array<string> | undefined;
};

/** @internal */
export const ApiServiceIdAuthAuthorizationpropertiesgrant1Scope$outboundSchema:
  z.ZodType<
    ApiServiceIdAuthAuthorizationpropertiesgrant1Scope$Outbound,
    z.ZodTypeDef,
    ApiServiceIdAuthAuthorizationpropertiesgrant1Scope
  > = z.object({
    scope: z.string().optional(),
    resource: z.array(z.string()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiServiceIdAuthAuthorizationpropertiesgrant1Scope$ {
  /** @deprecated use `ApiServiceIdAuthAuthorizationpropertiesgrant1Scope$inboundSchema` instead. */
  export const inboundSchema =
    ApiServiceIdAuthAuthorizationpropertiesgrant1Scope$inboundSchema;
  /** @deprecated use `ApiServiceIdAuthAuthorizationpropertiesgrant1Scope$outboundSchema` instead. */
  export const outboundSchema =
    ApiServiceIdAuthAuthorizationpropertiesgrant1Scope$outboundSchema;
  /** @deprecated use `ApiServiceIdAuthAuthorizationpropertiesgrant1Scope$Outbound` instead. */
  export type Outbound =
    ApiServiceIdAuthAuthorizationpropertiesgrant1Scope$Outbound;
}

export function apiServiceIdAuthAuthorizationpropertiesgrant1ScopeToJSON(
  apiServiceIdAuthAuthorizationpropertiesgrant1Scope:
    ApiServiceIdAuthAuthorizationpropertiesgrant1Scope,
): string {
  return JSON.stringify(
    ApiServiceIdAuthAuthorizationpropertiesgrant1Scope$outboundSchema.parse(
      apiServiceIdAuthAuthorizationpropertiesgrant1Scope,
    ),
  );
}

export function apiServiceIdAuthAuthorizationpropertiesgrant1ScopeFromJSON(
  jsonString: string,
): SafeParseResult<
  ApiServiceIdAuthAuthorizationpropertiesgrant1Scope,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ApiServiceIdAuthAuthorizationpropertiesgrant1Scope$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ApiServiceIdAuthAuthorizationpropertiesgrant1Scope' from JSON`,
  );
}

/** @internal */
export const ApiServiceIdAuthAuthorizationpropertiesgrant1$inboundSchema:
  z.ZodType<
    ApiServiceIdAuthAuthorizationpropertiesgrant1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    scopes: z.array(
      z.lazy(() =>
        ApiServiceIdAuthAuthorizationpropertiesgrant1Scope$inboundSchema
      ),
    ).optional(),
    claims: z.array(z.string()).optional(),
    authorizationDetails: AuthorizationDetails$inboundSchema.optional(),
  });

/** @internal */
export type ApiServiceIdAuthAuthorizationpropertiesgrant1$Outbound = {
  scopes?:
    | Array<ApiServiceIdAuthAuthorizationpropertiesgrant1Scope$Outbound>
    | undefined;
  claims?: Array<string> | undefined;
  authorizationDetails?: AuthorizationDetails$Outbound | undefined;
};

/** @internal */
export const ApiServiceIdAuthAuthorizationpropertiesgrant1$outboundSchema:
  z.ZodType<
    ApiServiceIdAuthAuthorizationpropertiesgrant1$Outbound,
    z.ZodTypeDef,
    ApiServiceIdAuthAuthorizationpropertiesgrant1
  > = z.object({
    scopes: z.array(
      z.lazy(() =>
        ApiServiceIdAuthAuthorizationpropertiesgrant1Scope$outboundSchema
      ),
    ).optional(),
    claims: z.array(z.string()).optional(),
    authorizationDetails: AuthorizationDetails$outboundSchema.optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiServiceIdAuthAuthorizationpropertiesgrant1$ {
  /** @deprecated use `ApiServiceIdAuthAuthorizationpropertiesgrant1$inboundSchema` instead. */
  export const inboundSchema =
    ApiServiceIdAuthAuthorizationpropertiesgrant1$inboundSchema;
  /** @deprecated use `ApiServiceIdAuthAuthorizationpropertiesgrant1$outboundSchema` instead. */
  export const outboundSchema =
    ApiServiceIdAuthAuthorizationpropertiesgrant1$outboundSchema;
  /** @deprecated use `ApiServiceIdAuthAuthorizationpropertiesgrant1$Outbound` instead. */
  export type Outbound = ApiServiceIdAuthAuthorizationpropertiesgrant1$Outbound;
}

export function apiServiceIdAuthAuthorizationpropertiesgrant1ToJSON(
  apiServiceIdAuthAuthorizationpropertiesgrant1:
    ApiServiceIdAuthAuthorizationpropertiesgrant1,
): string {
  return JSON.stringify(
    ApiServiceIdAuthAuthorizationpropertiesgrant1$outboundSchema.parse(
      apiServiceIdAuthAuthorizationpropertiesgrant1,
    ),
  );
}

export function apiServiceIdAuthAuthorizationpropertiesgrant1FromJSON(
  jsonString: string,
): SafeParseResult<
  ApiServiceIdAuthAuthorizationpropertiesgrant1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ApiServiceIdAuthAuthorizationpropertiesgrant1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ApiServiceIdAuthAuthorizationpropertiesgrant1' from JSON`,
  );
}
