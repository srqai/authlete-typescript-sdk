/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type AuthRevocationApiFormRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  apiServiceIdAuthRevocation: models.ApiServiceIdAuthRevocation;
};

/**
 * The next action that the authorization server implementation should take.
 */
export const AuthRevocationApiFormAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Created: "CREATED",
  Unauthorized: "UNAUTHORIZED",
  Forbidden: "FORBIDDEN",
  Json: "JSON",
  Jwt: "JWT",
  Ok: "OK",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type AuthRevocationApiFormAction = ClosedEnum<
  typeof AuthRevocationApiFormAction
>;

/**
 * An object containing schema data
 */
export type AuthRevocationApiFormResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: AuthRevocationApiFormAction | undefined;
  /**
   * The content that the authorization server implementation is to return to the client application.
   *
   * @remarks
   * Its format varies depending on the value of `action` parameter.
   */
  responseContent?: string | undefined;
};

/** @internal */
export const AuthRevocationApiFormRequest$inboundSchema: z.ZodType<
  AuthRevocationApiFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  api_serviceId_auth_revocation:
    models.ApiServiceIdAuthRevocation$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "api_serviceId_auth_revocation": "apiServiceIdAuthRevocation",
  });
});

/** @internal */
export type AuthRevocationApiFormRequest$Outbound = {
  serviceId: string;
  api_serviceId_auth_revocation: models.ApiServiceIdAuthRevocation$Outbound;
};

/** @internal */
export const AuthRevocationApiFormRequest$outboundSchema: z.ZodType<
  AuthRevocationApiFormRequest$Outbound,
  z.ZodTypeDef,
  AuthRevocationApiFormRequest
> = z.object({
  serviceId: z.string(),
  apiServiceIdAuthRevocation: models.ApiServiceIdAuthRevocation$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    apiServiceIdAuthRevocation: "api_serviceId_auth_revocation",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthRevocationApiFormRequest$ {
  /** @deprecated use `AuthRevocationApiFormRequest$inboundSchema` instead. */
  export const inboundSchema = AuthRevocationApiFormRequest$inboundSchema;
  /** @deprecated use `AuthRevocationApiFormRequest$outboundSchema` instead. */
  export const outboundSchema = AuthRevocationApiFormRequest$outboundSchema;
  /** @deprecated use `AuthRevocationApiFormRequest$Outbound` instead. */
  export type Outbound = AuthRevocationApiFormRequest$Outbound;
}

export function authRevocationApiFormRequestToJSON(
  authRevocationApiFormRequest: AuthRevocationApiFormRequest,
): string {
  return JSON.stringify(
    AuthRevocationApiFormRequest$outboundSchema.parse(
      authRevocationApiFormRequest,
    ),
  );
}

export function authRevocationApiFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<AuthRevocationApiFormRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthRevocationApiFormRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthRevocationApiFormRequest' from JSON`,
  );
}

/** @internal */
export const AuthRevocationApiFormAction$inboundSchema: z.ZodNativeEnum<
  typeof AuthRevocationApiFormAction
> = z.nativeEnum(AuthRevocationApiFormAction);

/** @internal */
export const AuthRevocationApiFormAction$outboundSchema: z.ZodNativeEnum<
  typeof AuthRevocationApiFormAction
> = AuthRevocationApiFormAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthRevocationApiFormAction$ {
  /** @deprecated use `AuthRevocationApiFormAction$inboundSchema` instead. */
  export const inboundSchema = AuthRevocationApiFormAction$inboundSchema;
  /** @deprecated use `AuthRevocationApiFormAction$outboundSchema` instead. */
  export const outboundSchema = AuthRevocationApiFormAction$outboundSchema;
}

/** @internal */
export const AuthRevocationApiFormResponse$inboundSchema: z.ZodType<
  AuthRevocationApiFormResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthRevocationApiFormAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
});

/** @internal */
export type AuthRevocationApiFormResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
};

/** @internal */
export const AuthRevocationApiFormResponse$outboundSchema: z.ZodType<
  AuthRevocationApiFormResponse$Outbound,
  z.ZodTypeDef,
  AuthRevocationApiFormResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthRevocationApiFormAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthRevocationApiFormResponse$ {
  /** @deprecated use `AuthRevocationApiFormResponse$inboundSchema` instead. */
  export const inboundSchema = AuthRevocationApiFormResponse$inboundSchema;
  /** @deprecated use `AuthRevocationApiFormResponse$outboundSchema` instead. */
  export const outboundSchema = AuthRevocationApiFormResponse$outboundSchema;
  /** @deprecated use `AuthRevocationApiFormResponse$Outbound` instead. */
  export type Outbound = AuthRevocationApiFormResponse$Outbound;
}

export function authRevocationApiFormResponseToJSON(
  authRevocationApiFormResponse: AuthRevocationApiFormResponse,
): string {
  return JSON.stringify(
    AuthRevocationApiFormResponse$outboundSchema.parse(
      authRevocationApiFormResponse,
    ),
  );
}

export function authRevocationApiFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<AuthRevocationApiFormResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthRevocationApiFormResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthRevocationApiFormResponse' from JSON`,
  );
}
