/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type PostUpdateTicketInformationFormRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  apiServiceIdAuthAuthorizationTicketUpdate:
    models.ApiServiceIdAuthAuthorizationTicketUpdate;
};

/**
 * The result of the /auth/authorization/ticket/info API call.
 */
export const PostUpdateTicketInformationFormAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Created: "CREATED",
  Unauthorized: "UNAUTHORIZED",
  Forbidden: "FORBIDDEN",
  Json: "JSON",
  Jwt: "JWT",
  Ok: "OK",
} as const;
/**
 * The result of the /auth/authorization/ticket/info API call.
 */
export type PostUpdateTicketInformationFormAction = ClosedEnum<
  typeof PostUpdateTicketInformationFormAction
>;

/**
 * An object containing schema data
 */
export type PostUpdateTicketInformationFormResponse = {
  /**
   * Information about the ticket.
   */
  info?: string | undefined;
  /**
   * The result of the /auth/authorization/ticket/info API call.
   */
  action?: PostUpdateTicketInformationFormAction | undefined;
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

/** @internal */
export const PostUpdateTicketInformationFormRequest$inboundSchema: z.ZodType<
  PostUpdateTicketInformationFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  api_serviceId_auth_authorization_ticket_update:
    models.ApiServiceIdAuthAuthorizationTicketUpdate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "api_serviceId_auth_authorization_ticket_update":
      "apiServiceIdAuthAuthorizationTicketUpdate",
  });
});

/** @internal */
export type PostUpdateTicketInformationFormRequest$Outbound = {
  serviceId: string;
  api_serviceId_auth_authorization_ticket_update:
    models.ApiServiceIdAuthAuthorizationTicketUpdate$Outbound;
};

/** @internal */
export const PostUpdateTicketInformationFormRequest$outboundSchema: z.ZodType<
  PostUpdateTicketInformationFormRequest$Outbound,
  z.ZodTypeDef,
  PostUpdateTicketInformationFormRequest
> = z.object({
  serviceId: z.string(),
  apiServiceIdAuthAuthorizationTicketUpdate:
    models.ApiServiceIdAuthAuthorizationTicketUpdate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    apiServiceIdAuthAuthorizationTicketUpdate:
      "api_serviceId_auth_authorization_ticket_update",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUpdateTicketInformationFormRequest$ {
  /** @deprecated use `PostUpdateTicketInformationFormRequest$inboundSchema` instead. */
  export const inboundSchema =
    PostUpdateTicketInformationFormRequest$inboundSchema;
  /** @deprecated use `PostUpdateTicketInformationFormRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostUpdateTicketInformationFormRequest$outboundSchema;
  /** @deprecated use `PostUpdateTicketInformationFormRequest$Outbound` instead. */
  export type Outbound = PostUpdateTicketInformationFormRequest$Outbound;
}

export function postUpdateTicketInformationFormRequestToJSON(
  postUpdateTicketInformationFormRequest:
    PostUpdateTicketInformationFormRequest,
): string {
  return JSON.stringify(
    PostUpdateTicketInformationFormRequest$outboundSchema.parse(
      postUpdateTicketInformationFormRequest,
    ),
  );
}

export function postUpdateTicketInformationFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostUpdateTicketInformationFormRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostUpdateTicketInformationFormRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostUpdateTicketInformationFormRequest' from JSON`,
  );
}

/** @internal */
export const PostUpdateTicketInformationFormAction$inboundSchema:
  z.ZodNativeEnum<typeof PostUpdateTicketInformationFormAction> = z.nativeEnum(
    PostUpdateTicketInformationFormAction,
  );

/** @internal */
export const PostUpdateTicketInformationFormAction$outboundSchema:
  z.ZodNativeEnum<typeof PostUpdateTicketInformationFormAction> =
    PostUpdateTicketInformationFormAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUpdateTicketInformationFormAction$ {
  /** @deprecated use `PostUpdateTicketInformationFormAction$inboundSchema` instead. */
  export const inboundSchema =
    PostUpdateTicketInformationFormAction$inboundSchema;
  /** @deprecated use `PostUpdateTicketInformationFormAction$outboundSchema` instead. */
  export const outboundSchema =
    PostUpdateTicketInformationFormAction$outboundSchema;
}

/** @internal */
export const PostUpdateTicketInformationFormResponse$inboundSchema: z.ZodType<
  PostUpdateTicketInformationFormResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  info: z.string().optional(),
  action: PostUpdateTicketInformationFormAction$inboundSchema.optional(),
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
});

/** @internal */
export type PostUpdateTicketInformationFormResponse$Outbound = {
  info?: string | undefined;
  action?: string | undefined;
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const PostUpdateTicketInformationFormResponse$outboundSchema: z.ZodType<
  PostUpdateTicketInformationFormResponse$Outbound,
  z.ZodTypeDef,
  PostUpdateTicketInformationFormResponse
> = z.object({
  info: z.string().optional(),
  action: PostUpdateTicketInformationFormAction$outboundSchema.optional(),
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUpdateTicketInformationFormResponse$ {
  /** @deprecated use `PostUpdateTicketInformationFormResponse$inboundSchema` instead. */
  export const inboundSchema =
    PostUpdateTicketInformationFormResponse$inboundSchema;
  /** @deprecated use `PostUpdateTicketInformationFormResponse$outboundSchema` instead. */
  export const outboundSchema =
    PostUpdateTicketInformationFormResponse$outboundSchema;
  /** @deprecated use `PostUpdateTicketInformationFormResponse$Outbound` instead. */
  export type Outbound = PostUpdateTicketInformationFormResponse$Outbound;
}

export function postUpdateTicketInformationFormResponseToJSON(
  postUpdateTicketInformationFormResponse:
    PostUpdateTicketInformationFormResponse,
): string {
  return JSON.stringify(
    PostUpdateTicketInformationFormResponse$outboundSchema.parse(
      postUpdateTicketInformationFormResponse,
    ),
  );
}

export function postUpdateTicketInformationFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  PostUpdateTicketInformationFormResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostUpdateTicketInformationFormResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostUpdateTicketInformationFormResponse' from JSON`,
  );
}
