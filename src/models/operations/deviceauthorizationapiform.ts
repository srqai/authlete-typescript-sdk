/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type DeviceAuthorizationApiFormRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  apiServiceIdDeviceAuthorization: models.ApiServiceIdDeviceAuthorization;
};

/**
 * The next action that the authorization server implementation should take.
 */
export const DeviceAuthorizationApiFormAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Created: "CREATED",
  Unauthorized: "UNAUTHORIZED",
  Forbidden: "FORBIDDEN",
  Json: "JSON",
  Jwt: "JWT",
  Ok: "OK",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type DeviceAuthorizationApiFormAction = ClosedEnum<
  typeof DeviceAuthorizationApiFormAction
>;

/**
 * An object containing schema data
 */
export type DeviceAuthorizationApiFormResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: DeviceAuthorizationApiFormAction | undefined;
  /**
   * The content that the authorization server implementation is to return to the client
   *
   * @remarks
   * application. Its format varies depending on the value of `action` parameter.
   */
  responseContent?: string | undefined;
  /**
   * The client ID of the client application that has made the device authorization request.
   *
   * @remarks
   */
  clientId?: number | undefined;
  /**
   * The client ID alias of the client application that has made the device authorization
   *
   * @remarks
   * request.
   */
  clientIdAlias?: string | undefined;
  /**
   * `true` if the value of the client_id request parameter included in the device authorization
   *
   * @remarks
   * request is the client ID alias. `false` if the value is the original numeric client ID.
   */
  clientIdAliasUsed?: boolean | undefined;
  /**
   * The name of the client application which has made the device authorization request.
   *
   * @remarks
   */
  clientName?: string | undefined;
  /**
   * The client authentication method that should be performed at the device authorization
   *
   * @remarks
   * endpoint.
   */
  clientAuthMethod?: string | undefined;
  /**
   * The scopes requested by the device authorization request.
   *
   * @remarks
   *
   * Basically, this property holds the value of the scope request parameter in the device
   * authorization request. However, because unregistered scopes are dropped on Authlete
   * side, if the `scope` request parameter contains unknown scopes, the list returned by
   * this property becomes different from the value of the `scope` request parameter.
   *
   * Note that `description` property and `descriptions` property of each scope object in the
   * array contained in this property is always `null` even if descriptions of the scopes
   * are registered.
   */
  scopes?: Array<models.Scope> | undefined;
  /**
   * The names of the claims which were requested indirectly via some special scopes.
   *
   * @remarks
   * See [5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims)
   * in OpenID Connect Core 1.0 for details.
   */
  claimNames?: Array<string> | undefined;
  /**
   * The list of ACR values requested by the device authorization request.
   *
   * @remarks
   *
   * Basically, this property holds the value of the `acr_values` request parameter in the
   * device authorization request. However, because unsupported ACR values are dropped
   * on Authlete side, if the `acr_values` request parameter contains unrecognized ACR values,
   * the list returned by this property becomes different from the value of the `acr_values`
   * request parameter.
   */
  acrs?: Array<string> | undefined;
  /**
   * The device verification code. This corresponds to the `device_code` property in the
   *
   * @remarks
   * response to the client.
   */
  deviceCode?: string | undefined;
  /**
   * The end-user verification code. This corresponds to the `user_code` property in the
   *
   * @remarks
   * response to the client.
   */
  userCode?: string | undefined;
  /**
   * The end-user verification URI. This corresponds to the `verification_uri` property in
   *
   * @remarks
   * the response to the client.
   */
  verificationUri?: string | undefined;
  /**
   * The end-user verification URI that includes the end-user verification code. This corresponds
   *
   * @remarks
   * to the `verification_uri_complete` property in the response to the client.
   */
  verificationUriComplete?: string | undefined;
  /**
   * The duration of the device verification code in seconds. This corresponds to the `expires_in`
   *
   * @remarks
   * property in the response to the client.
   */
  expiresIn?: number | undefined;
  /**
   * The minimum amount of time in seconds that the client must wait for between polling
   *
   * @remarks
   * requests to the token endpoint. This corresponds to the `interval` property in the response
   * to the client.
   */
  interval?: number | undefined;
  /**
   * The warnings raised during processing the backchannel authentication request.
   *
   * @remarks
   */
  warnings?: Array<string> | undefined;
  /**
   * The resources specified by the `resource` request parameters. See "Resource Indicators
   *
   * @remarks
   * for OAuth 2.0" for details.
   */
  resources?: Array<string> | undefined;
  /**
   * The authorization details. This represents the value of the `authorization_details`
   *
   * @remarks
   * request parameter in the preceding device authorization request which is defined in
   * "OAuth 2.0 Rich Authorization Requests".
   */
  authorizationDetails?: models.AuthorizationDetails | undefined;
  /**
   * The attributes of this service that the client application belongs to.
   *
   * @remarks
   */
  serviceAttributes?: Array<models.Pair> | undefined;
  /**
   * The attributes of the client.
   *
   * @remarks
   */
  clientAttributes?: Array<models.Pair> | undefined;
  /**
   * The dynamic scopes which the client application requested by the scope request parameter.
   *
   * @remarks
   */
  dynamicScopes?: Array<models.DynamicScope> | undefined;
  /**
   * The grant management action of the device authorization request.
   *
   * @remarks
   *
   * The `grant_management_action` request parameter is defined in
   * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).
   */
  gmAction?: models.ApiServiceIdGmpropertiesgmAction2 | undefined;
  /**
   * the value of the `grant_id` request parameter of the device authorization request.
   *
   * @remarks
   *
   * The `grant_id` request parameter is defined in
   * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
   * , which is supported by Authlete 2.3 and newer versions.
   */
  grantId?: string | undefined;
  /**
   * An object containing api_serviceid_auth_authorizationpropertiesgrant2 data
   */
  grant?: models.ApiServiceIdAuthAuthorizationpropertiesgrant2 | undefined;
  /**
   * The subject identifying the user who has given the grant identified
   *
   * @remarks
   * by the `grant_id` request parameter of the device authorization
   * request.
   *
   * Authlete 2.3 and newer versions support <a href=
   * "https://openid.net/specs/fapi-grant-management.html">Grant Management
   * for OAuth 2.0</a>. An authorization request may contain a `grant_id`
   * request parameter which is defined in the specification. If the value of
   * the request parameter is valid, {@link #getGrantSubject()} will return
   * the subject of the user who has given the grant to the client application.
   * Authorization server implementations may use the value returned from
   * {@link #getGrantSubject()} in order to determine the user to authenticate.
   *
   * The user your system will authenticate during the authorization process
   * (or has already authenticated) may be different from the user of the
   * grant. The first implementer's draft of "Grant Management for OAuth 2.0"
   * does not mention anything about the case, so the behavior in the case is
   * left to implementations. Authlete will not perform the grant management
   * action when the `subject` passed to Authlete does not match the
   * user of the grant.
   */
  grantSubject?: string | undefined;
  /**
   * The entity ID of the client.
   *
   * @remarks
   */
  clientEntityId?: string | undefined;
  /**
   * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
   *
   * @remarks
   */
  clientEntityIdUsed?: boolean | undefined;
};

/** @internal */
export const DeviceAuthorizationApiFormRequest$inboundSchema: z.ZodType<
  DeviceAuthorizationApiFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  api_serviceId_device_authorization:
    models.ApiServiceIdDeviceAuthorization$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "api_serviceId_device_authorization": "apiServiceIdDeviceAuthorization",
  });
});

/** @internal */
export type DeviceAuthorizationApiFormRequest$Outbound = {
  serviceId: string;
  api_serviceId_device_authorization:
    models.ApiServiceIdDeviceAuthorization$Outbound;
};

/** @internal */
export const DeviceAuthorizationApiFormRequest$outboundSchema: z.ZodType<
  DeviceAuthorizationApiFormRequest$Outbound,
  z.ZodTypeDef,
  DeviceAuthorizationApiFormRequest
> = z.object({
  serviceId: z.string(),
  apiServiceIdDeviceAuthorization:
    models.ApiServiceIdDeviceAuthorization$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    apiServiceIdDeviceAuthorization: "api_serviceId_device_authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceAuthorizationApiFormRequest$ {
  /** @deprecated use `DeviceAuthorizationApiFormRequest$inboundSchema` instead. */
  export const inboundSchema = DeviceAuthorizationApiFormRequest$inboundSchema;
  /** @deprecated use `DeviceAuthorizationApiFormRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeviceAuthorizationApiFormRequest$outboundSchema;
  /** @deprecated use `DeviceAuthorizationApiFormRequest$Outbound` instead. */
  export type Outbound = DeviceAuthorizationApiFormRequest$Outbound;
}

export function deviceAuthorizationApiFormRequestToJSON(
  deviceAuthorizationApiFormRequest: DeviceAuthorizationApiFormRequest,
): string {
  return JSON.stringify(
    DeviceAuthorizationApiFormRequest$outboundSchema.parse(
      deviceAuthorizationApiFormRequest,
    ),
  );
}

export function deviceAuthorizationApiFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeviceAuthorizationApiFormRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeviceAuthorizationApiFormRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceAuthorizationApiFormRequest' from JSON`,
  );
}

/** @internal */
export const DeviceAuthorizationApiFormAction$inboundSchema: z.ZodNativeEnum<
  typeof DeviceAuthorizationApiFormAction
> = z.nativeEnum(DeviceAuthorizationApiFormAction);

/** @internal */
export const DeviceAuthorizationApiFormAction$outboundSchema: z.ZodNativeEnum<
  typeof DeviceAuthorizationApiFormAction
> = DeviceAuthorizationApiFormAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceAuthorizationApiFormAction$ {
  /** @deprecated use `DeviceAuthorizationApiFormAction$inboundSchema` instead. */
  export const inboundSchema = DeviceAuthorizationApiFormAction$inboundSchema;
  /** @deprecated use `DeviceAuthorizationApiFormAction$outboundSchema` instead. */
  export const outboundSchema = DeviceAuthorizationApiFormAction$outboundSchema;
}

/** @internal */
export const DeviceAuthorizationApiFormResponse$inboundSchema: z.ZodType<
  DeviceAuthorizationApiFormResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: DeviceAuthorizationApiFormAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  clientName: z.string().optional(),
  clientAuthMethod: z.string().optional(),
  scopes: z.array(models.Scope$inboundSchema).optional(),
  claimNames: z.array(z.string()).optional(),
  acrs: z.array(z.string()).optional(),
  deviceCode: z.string().optional(),
  userCode: z.string().optional(),
  verificationUri: z.string().optional(),
  verificationUriComplete: z.string().optional(),
  expiresIn: z.number().int().optional(),
  interval: z.number().int().optional(),
  warnings: z.array(z.string()).optional(),
  resources: z.array(z.string()).optional(),
  authorizationDetails: models.AuthorizationDetails$inboundSchema.optional(),
  serviceAttributes: z.array(models.Pair$inboundSchema).optional(),
  clientAttributes: z.array(models.Pair$inboundSchema).optional(),
  dynamicScopes: z.array(models.DynamicScope$inboundSchema).optional(),
  gmAction: models.ApiServiceIdGmpropertiesgmAction2$inboundSchema.optional(),
  grantId: z.string().optional(),
  grant: models.ApiServiceIdAuthAuthorizationpropertiesgrant2$inboundSchema
    .optional(),
  grantSubject: z.string().optional(),
  clientEntityId: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
});

/** @internal */
export type DeviceAuthorizationApiFormResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  clientId?: number | undefined;
  clientIdAlias?: string | undefined;
  clientIdAliasUsed?: boolean | undefined;
  clientName?: string | undefined;
  clientAuthMethod?: string | undefined;
  scopes?: Array<models.Scope$Outbound> | undefined;
  claimNames?: Array<string> | undefined;
  acrs?: Array<string> | undefined;
  deviceCode?: string | undefined;
  userCode?: string | undefined;
  verificationUri?: string | undefined;
  verificationUriComplete?: string | undefined;
  expiresIn?: number | undefined;
  interval?: number | undefined;
  warnings?: Array<string> | undefined;
  resources?: Array<string> | undefined;
  authorizationDetails?: models.AuthorizationDetails$Outbound | undefined;
  serviceAttributes?: Array<models.Pair$Outbound> | undefined;
  clientAttributes?: Array<models.Pair$Outbound> | undefined;
  dynamicScopes?: Array<models.DynamicScope$Outbound> | undefined;
  gmAction?: string | undefined;
  grantId?: string | undefined;
  grant?:
    | models.ApiServiceIdAuthAuthorizationpropertiesgrant2$Outbound
    | undefined;
  grantSubject?: string | undefined;
  clientEntityId?: string | undefined;
  clientEntityIdUsed?: boolean | undefined;
};

/** @internal */
export const DeviceAuthorizationApiFormResponse$outboundSchema: z.ZodType<
  DeviceAuthorizationApiFormResponse$Outbound,
  z.ZodTypeDef,
  DeviceAuthorizationApiFormResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: DeviceAuthorizationApiFormAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  clientName: z.string().optional(),
  clientAuthMethod: z.string().optional(),
  scopes: z.array(models.Scope$outboundSchema).optional(),
  claimNames: z.array(z.string()).optional(),
  acrs: z.array(z.string()).optional(),
  deviceCode: z.string().optional(),
  userCode: z.string().optional(),
  verificationUri: z.string().optional(),
  verificationUriComplete: z.string().optional(),
  expiresIn: z.number().int().optional(),
  interval: z.number().int().optional(),
  warnings: z.array(z.string()).optional(),
  resources: z.array(z.string()).optional(),
  authorizationDetails: models.AuthorizationDetails$outboundSchema.optional(),
  serviceAttributes: z.array(models.Pair$outboundSchema).optional(),
  clientAttributes: z.array(models.Pair$outboundSchema).optional(),
  dynamicScopes: z.array(models.DynamicScope$outboundSchema).optional(),
  gmAction: models.ApiServiceIdGmpropertiesgmAction2$outboundSchema.optional(),
  grantId: z.string().optional(),
  grant: models.ApiServiceIdAuthAuthorizationpropertiesgrant2$outboundSchema
    .optional(),
  grantSubject: z.string().optional(),
  clientEntityId: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceAuthorizationApiFormResponse$ {
  /** @deprecated use `DeviceAuthorizationApiFormResponse$inboundSchema` instead. */
  export const inboundSchema = DeviceAuthorizationApiFormResponse$inboundSchema;
  /** @deprecated use `DeviceAuthorizationApiFormResponse$outboundSchema` instead. */
  export const outboundSchema =
    DeviceAuthorizationApiFormResponse$outboundSchema;
  /** @deprecated use `DeviceAuthorizationApiFormResponse$Outbound` instead. */
  export type Outbound = DeviceAuthorizationApiFormResponse$Outbound;
}

export function deviceAuthorizationApiFormResponseToJSON(
  deviceAuthorizationApiFormResponse: DeviceAuthorizationApiFormResponse,
): string {
  return JSON.stringify(
    DeviceAuthorizationApiFormResponse$outboundSchema.parse(
      deviceAuthorizationApiFormResponse,
    ),
  );
}

export function deviceAuthorizationApiFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeviceAuthorizationApiFormResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeviceAuthorizationApiFormResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceAuthorizationApiFormResponse' from JSON`,
  );
}
