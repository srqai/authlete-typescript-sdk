/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type AuthUserinfoIssueApiRequestBody = {
  /**
   * The access token that has been passed to the userinfo endpoint by the client application. In other words,
   *
   * @remarks
   * the access token which was contained in the userinfo request.
   */
  token: string;
  /**
   * Claims in JSON format. As for the format, see [OpenID Connect Core 1.0, 5.1. Standard Claims](https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims).
   *
   * @remarks
   */
  claims?: string | undefined;
  /**
   * The value of the `sub` claim. If the value of this request parameter is not empty, it is used as the value of
   *
   * @remarks
   * the `sub` claim. Otherwise, the value of the subject associated with the access token is used.
   */
  sub?: string | undefined;
  /**
   * Claim key-value pairs that are used to compute transformed claims.
   *
   * @remarks
   */
  claimsForTx?: string | undefined;
  /**
   * The Signature header value from the request.
   *
   * @remarks
   */
  requestSignature?: string | undefined;
  /**
   * HTTP headers to be included in processing the signature. If this is a signed request, this must include the
   *
   * @remarks
   * Signature and Signature-Input headers, as well as any additional headers covered by the signature.
   */
  headers?: Array<models.Pair> | undefined;
};

export type AuthUserinfoIssueApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: AuthUserinfoIssueApiRequestBody;
};

/**
 * The next action that the authorization server implementation should take.
 */
export const AuthUserinfoIssueApiAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Unauthorized: "UNAUTHORIZED",
  Forbidden: "FORBIDDEN",
  Json: "JSON",
  Ok: "OK",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type AuthUserinfoIssueApiAction = ClosedEnum<
  typeof AuthUserinfoIssueApiAction
>;

export type AuthUserinfoIssueApiResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: AuthUserinfoIssueApiAction | undefined;
  /**
   * The content that the authorization server implementation can use as the value of `WWW-Authenticate`
   *
   * @remarks
   * header on errors.
   */
  responseContent?: string | undefined;
  /**
   * The signature header of the response message.
   *
   * @remarks
   */
  signature?: string | undefined;
  /**
   * The signature-input header of the response message
   *
   * @remarks
   */
  signatureInput?: string | undefined;
  /**
   * The content-digest header of the response message
   *
   * @remarks
   */
  contentDigest?: string | undefined;
};

/** @internal */
export const AuthUserinfoIssueApiRequestBody$inboundSchema: z.ZodType<
  AuthUserinfoIssueApiRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
  claims: z.string().optional(),
  sub: z.string().optional(),
  claimsForTx: z.string().optional(),
  requestSignature: z.string().optional(),
  headers: z.array(models.Pair$inboundSchema).optional(),
});

/** @internal */
export type AuthUserinfoIssueApiRequestBody$Outbound = {
  token: string;
  claims?: string | undefined;
  sub?: string | undefined;
  claimsForTx?: string | undefined;
  requestSignature?: string | undefined;
  headers?: Array<models.Pair$Outbound> | undefined;
};

/** @internal */
export const AuthUserinfoIssueApiRequestBody$outboundSchema: z.ZodType<
  AuthUserinfoIssueApiRequestBody$Outbound,
  z.ZodTypeDef,
  AuthUserinfoIssueApiRequestBody
> = z.object({
  token: z.string(),
  claims: z.string().optional(),
  sub: z.string().optional(),
  claimsForTx: z.string().optional(),
  requestSignature: z.string().optional(),
  headers: z.array(models.Pair$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthUserinfoIssueApiRequestBody$ {
  /** @deprecated use `AuthUserinfoIssueApiRequestBody$inboundSchema` instead. */
  export const inboundSchema = AuthUserinfoIssueApiRequestBody$inboundSchema;
  /** @deprecated use `AuthUserinfoIssueApiRequestBody$outboundSchema` instead. */
  export const outboundSchema = AuthUserinfoIssueApiRequestBody$outboundSchema;
  /** @deprecated use `AuthUserinfoIssueApiRequestBody$Outbound` instead. */
  export type Outbound = AuthUserinfoIssueApiRequestBody$Outbound;
}

export function authUserinfoIssueApiRequestBodyToJSON(
  authUserinfoIssueApiRequestBody: AuthUserinfoIssueApiRequestBody,
): string {
  return JSON.stringify(
    AuthUserinfoIssueApiRequestBody$outboundSchema.parse(
      authUserinfoIssueApiRequestBody,
    ),
  );
}

export function authUserinfoIssueApiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<AuthUserinfoIssueApiRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthUserinfoIssueApiRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthUserinfoIssueApiRequestBody' from JSON`,
  );
}

/** @internal */
export const AuthUserinfoIssueApiRequest$inboundSchema: z.ZodType<
  AuthUserinfoIssueApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() => AuthUserinfoIssueApiRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type AuthUserinfoIssueApiRequest$Outbound = {
  serviceId: string;
  RequestBody: AuthUserinfoIssueApiRequestBody$Outbound;
};

/** @internal */
export const AuthUserinfoIssueApiRequest$outboundSchema: z.ZodType<
  AuthUserinfoIssueApiRequest$Outbound,
  z.ZodTypeDef,
  AuthUserinfoIssueApiRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() => AuthUserinfoIssueApiRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthUserinfoIssueApiRequest$ {
  /** @deprecated use `AuthUserinfoIssueApiRequest$inboundSchema` instead. */
  export const inboundSchema = AuthUserinfoIssueApiRequest$inboundSchema;
  /** @deprecated use `AuthUserinfoIssueApiRequest$outboundSchema` instead. */
  export const outboundSchema = AuthUserinfoIssueApiRequest$outboundSchema;
  /** @deprecated use `AuthUserinfoIssueApiRequest$Outbound` instead. */
  export type Outbound = AuthUserinfoIssueApiRequest$Outbound;
}

export function authUserinfoIssueApiRequestToJSON(
  authUserinfoIssueApiRequest: AuthUserinfoIssueApiRequest,
): string {
  return JSON.stringify(
    AuthUserinfoIssueApiRequest$outboundSchema.parse(
      authUserinfoIssueApiRequest,
    ),
  );
}

export function authUserinfoIssueApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<AuthUserinfoIssueApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthUserinfoIssueApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthUserinfoIssueApiRequest' from JSON`,
  );
}

/** @internal */
export const AuthUserinfoIssueApiAction$inboundSchema: z.ZodNativeEnum<
  typeof AuthUserinfoIssueApiAction
> = z.nativeEnum(AuthUserinfoIssueApiAction);

/** @internal */
export const AuthUserinfoIssueApiAction$outboundSchema: z.ZodNativeEnum<
  typeof AuthUserinfoIssueApiAction
> = AuthUserinfoIssueApiAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthUserinfoIssueApiAction$ {
  /** @deprecated use `AuthUserinfoIssueApiAction$inboundSchema` instead. */
  export const inboundSchema = AuthUserinfoIssueApiAction$inboundSchema;
  /** @deprecated use `AuthUserinfoIssueApiAction$outboundSchema` instead. */
  export const outboundSchema = AuthUserinfoIssueApiAction$outboundSchema;
}

/** @internal */
export const AuthUserinfoIssueApiResponse$inboundSchema: z.ZodType<
  AuthUserinfoIssueApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthUserinfoIssueApiAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
  signature: z.string().optional(),
  signatureInput: z.string().optional(),
  contentDigest: z.string().optional(),
});

/** @internal */
export type AuthUserinfoIssueApiResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  signature?: string | undefined;
  signatureInput?: string | undefined;
  contentDigest?: string | undefined;
};

/** @internal */
export const AuthUserinfoIssueApiResponse$outboundSchema: z.ZodType<
  AuthUserinfoIssueApiResponse$Outbound,
  z.ZodTypeDef,
  AuthUserinfoIssueApiResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthUserinfoIssueApiAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
  signature: z.string().optional(),
  signatureInput: z.string().optional(),
  contentDigest: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthUserinfoIssueApiResponse$ {
  /** @deprecated use `AuthUserinfoIssueApiResponse$inboundSchema` instead. */
  export const inboundSchema = AuthUserinfoIssueApiResponse$inboundSchema;
  /** @deprecated use `AuthUserinfoIssueApiResponse$outboundSchema` instead. */
  export const outboundSchema = AuthUserinfoIssueApiResponse$outboundSchema;
  /** @deprecated use `AuthUserinfoIssueApiResponse$Outbound` instead. */
  export type Outbound = AuthUserinfoIssueApiResponse$Outbound;
}

export function authUserinfoIssueApiResponseToJSON(
  authUserinfoIssueApiResponse: AuthUserinfoIssueApiResponse,
): string {
  return JSON.stringify(
    AuthUserinfoIssueApiResponse$outboundSchema.parse(
      authUserinfoIssueApiResponse,
    ),
  );
}

export function authUserinfoIssueApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<AuthUserinfoIssueApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthUserinfoIssueApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthUserinfoIssueApiResponse' from JSON`,
  );
}
