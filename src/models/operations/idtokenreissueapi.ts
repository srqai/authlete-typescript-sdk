/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type IdtokenReissueApiRequestBody = {
  /**
   * <p>
   *
   * @remarks
   * The value of this parameter should be (a) the value of the
   * "`jwtAccessToken`" parameter in a response from the
   * `/auth/token` API when the value is available, or (b)
   * the value of the "`accessToken`" parameter in the
   * response from the `/auth/token` API when the value of
   * the "`jwtAccessToken`" parameter is not available.
   * </p>
   */
  accessToken: string;
  /**
   * <p>
   *
   * @remarks
   * The value of this parameter should be the value of the
   * "`refreshToken`" parameter in a response from the
   * `/auth/token` API.
   * </p>
   */
  refreshToken: string;
  /**
   * The value that should be used as the value of the "`sub`"
   *
   * @remarks
   * claim of the ID token.
   *
   * <p>
   * This parameter is optional. When omitted, the value of the subject
   * associated with the access token is used.
   * </p>
   */
  sub?: string | undefined;
  /**
   * Additional claims that should be embedded in the payload part of
   *
   * @remarks
   * the ID token. The format is a JSON object.
   *
   * <p>
   * This parameter is optional.
   * </p>
   */
  claims?: string | undefined;
  /**
   * Additional parameters that should be embedded in the JWS header of
   *
   * @remarks
   * the ID token. The format is a JSON object.
   *
   * <p>
   * This parameter is optional.
   * </p>
   */
  idtHeaderParams?: string | undefined;
  /**
   * The type of the "`aud`" claim of the ID token being issued.
   *
   * @remarks
   *
   * <p>
   * Valid values of this parameter are as follows.
   * </p>
   *
   * <blockquote>
   * <table border="1" cellpadding="5" style="border-collapse: collapse;">
   *   <tr bgcolor="orange">
   *     <th>Value</th>
   *     <th>Description</th>
   *   </tr>
   *   <tr>
   *     <td>"`array`"</td>
   *     <td>The type of the `aud` claim becomes an array of strings.</td>
   *   </tr>
   *   <tr>
   *     <td>"`string`"</td>
   *     <td>The type of the `aud` claim becomes a single string.</td>
   *   </tr>
   * </table>
   * </blockquote>
   *
   * <p>
   * This parameter is optional, and the default value on omission is
   * "`array`".
   * </p>
   *
   * <p>
   * This parameter takes precedence over the `idTokenAudType` property
   * of {@link Service} (cf. {@link Service#getIdTokenAudType()}).
   * </p>
   */
  idTokenAudType?: string | undefined;
};

export type IdtokenReissueApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody?: IdtokenReissueApiRequestBody | undefined;
};

/**
 * The next action that the implementation of the token endpoint should take.
 */
export const IdtokenReissueApiAction = {
  Ok: "OK",
  InternalServerError: "INTERNAL_SERVER_ERROR",
  CallerError: "CALLER_ERROR",
} as const;
/**
 * The next action that the implementation of the token endpoint should take.
 */
export type IdtokenReissueApiAction = ClosedEnum<
  typeof IdtokenReissueApiAction
>;

/**
 * Successful operation
 */
export type IdtokenReissueApiResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the implementation of the token endpoint should take.
   */
  action?: IdtokenReissueApiAction | undefined;
  /**
   * The response content that can be used as the message body of the token response that should
   *
   * @remarks
   * be returned from the token endpoint.
   */
  responseContent?: string | undefined;
  /**
   * The reissued ID token
   *
   * @remarks
   */
  idToken?: string | undefined;
};

/** @internal */
export const IdtokenReissueApiRequestBody$inboundSchema: z.ZodType<
  IdtokenReissueApiRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessToken: z.string(),
  refreshToken: z.string(),
  sub: z.string().optional(),
  claims: z.string().optional(),
  idtHeaderParams: z.string().optional(),
  idTokenAudType: z.string().optional(),
});

/** @internal */
export type IdtokenReissueApiRequestBody$Outbound = {
  accessToken: string;
  refreshToken: string;
  sub?: string | undefined;
  claims?: string | undefined;
  idtHeaderParams?: string | undefined;
  idTokenAudType?: string | undefined;
};

/** @internal */
export const IdtokenReissueApiRequestBody$outboundSchema: z.ZodType<
  IdtokenReissueApiRequestBody$Outbound,
  z.ZodTypeDef,
  IdtokenReissueApiRequestBody
> = z.object({
  accessToken: z.string(),
  refreshToken: z.string(),
  sub: z.string().optional(),
  claims: z.string().optional(),
  idtHeaderParams: z.string().optional(),
  idTokenAudType: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IdtokenReissueApiRequestBody$ {
  /** @deprecated use `IdtokenReissueApiRequestBody$inboundSchema` instead. */
  export const inboundSchema = IdtokenReissueApiRequestBody$inboundSchema;
  /** @deprecated use `IdtokenReissueApiRequestBody$outboundSchema` instead. */
  export const outboundSchema = IdtokenReissueApiRequestBody$outboundSchema;
  /** @deprecated use `IdtokenReissueApiRequestBody$Outbound` instead. */
  export type Outbound = IdtokenReissueApiRequestBody$Outbound;
}

export function idtokenReissueApiRequestBodyToJSON(
  idtokenReissueApiRequestBody: IdtokenReissueApiRequestBody,
): string {
  return JSON.stringify(
    IdtokenReissueApiRequestBody$outboundSchema.parse(
      idtokenReissueApiRequestBody,
    ),
  );
}

export function idtokenReissueApiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<IdtokenReissueApiRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IdtokenReissueApiRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IdtokenReissueApiRequestBody' from JSON`,
  );
}

/** @internal */
export const IdtokenReissueApiRequest$inboundSchema: z.ZodType<
  IdtokenReissueApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() => IdtokenReissueApiRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type IdtokenReissueApiRequest$Outbound = {
  serviceId: string;
  RequestBody?: IdtokenReissueApiRequestBody$Outbound | undefined;
};

/** @internal */
export const IdtokenReissueApiRequest$outboundSchema: z.ZodType<
  IdtokenReissueApiRequest$Outbound,
  z.ZodTypeDef,
  IdtokenReissueApiRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() => IdtokenReissueApiRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IdtokenReissueApiRequest$ {
  /** @deprecated use `IdtokenReissueApiRequest$inboundSchema` instead. */
  export const inboundSchema = IdtokenReissueApiRequest$inboundSchema;
  /** @deprecated use `IdtokenReissueApiRequest$outboundSchema` instead. */
  export const outboundSchema = IdtokenReissueApiRequest$outboundSchema;
  /** @deprecated use `IdtokenReissueApiRequest$Outbound` instead. */
  export type Outbound = IdtokenReissueApiRequest$Outbound;
}

export function idtokenReissueApiRequestToJSON(
  idtokenReissueApiRequest: IdtokenReissueApiRequest,
): string {
  return JSON.stringify(
    IdtokenReissueApiRequest$outboundSchema.parse(idtokenReissueApiRequest),
  );
}

export function idtokenReissueApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<IdtokenReissueApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IdtokenReissueApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IdtokenReissueApiRequest' from JSON`,
  );
}

/** @internal */
export const IdtokenReissueApiAction$inboundSchema: z.ZodNativeEnum<
  typeof IdtokenReissueApiAction
> = z.nativeEnum(IdtokenReissueApiAction);

/** @internal */
export const IdtokenReissueApiAction$outboundSchema: z.ZodNativeEnum<
  typeof IdtokenReissueApiAction
> = IdtokenReissueApiAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IdtokenReissueApiAction$ {
  /** @deprecated use `IdtokenReissueApiAction$inboundSchema` instead. */
  export const inboundSchema = IdtokenReissueApiAction$inboundSchema;
  /** @deprecated use `IdtokenReissueApiAction$outboundSchema` instead. */
  export const outboundSchema = IdtokenReissueApiAction$outboundSchema;
}

/** @internal */
export const IdtokenReissueApiResponse$inboundSchema: z.ZodType<
  IdtokenReissueApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: IdtokenReissueApiAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
  idToken: z.string().optional(),
});

/** @internal */
export type IdtokenReissueApiResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  idToken?: string | undefined;
};

/** @internal */
export const IdtokenReissueApiResponse$outboundSchema: z.ZodType<
  IdtokenReissueApiResponse$Outbound,
  z.ZodTypeDef,
  IdtokenReissueApiResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: IdtokenReissueApiAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
  idToken: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IdtokenReissueApiResponse$ {
  /** @deprecated use `IdtokenReissueApiResponse$inboundSchema` instead. */
  export const inboundSchema = IdtokenReissueApiResponse$inboundSchema;
  /** @deprecated use `IdtokenReissueApiResponse$outboundSchema` instead. */
  export const outboundSchema = IdtokenReissueApiResponse$outboundSchema;
  /** @deprecated use `IdtokenReissueApiResponse$Outbound` instead. */
  export type Outbound = IdtokenReissueApiResponse$Outbound;
}

export function idtokenReissueApiResponseToJSON(
  idtokenReissueApiResponse: IdtokenReissueApiResponse,
): string {
  return JSON.stringify(
    IdtokenReissueApiResponse$outboundSchema.parse(idtokenReissueApiResponse),
  );
}

export function idtokenReissueApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<IdtokenReissueApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IdtokenReissueApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IdtokenReissueApiResponse' from JSON`,
  );
}
