/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type VciJwksApiRequestBody = {
  /**
   * The flag indicating whether the metadata is written in the pretty
   *
   * @remarks
   * format or not.
   */
  pretty: boolean;
};

export type VciJwksApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: VciJwksApiRequestBody;
};

/**
 * The next action that the implementation of the JWK Set document
 *
 * @remarks
 * endpoint of the credential issuer should take after getting a
 * response from Authlete's `/vci/jwks` API.
 */
export const VciJwksApiAction = {
  Ok: "OK",
  NotFound: "NOT_FOUND",
  InternalServerError: "INTERNAL_SERVER_ERROR",
} as const;
/**
 * The next action that the implementation of the JWK Set document
 *
 * @remarks
 * endpoint of the credential issuer should take after getting a
 * response from Authlete's `/vci/jwks` API.
 */
export type VciJwksApiAction = ClosedEnum<typeof VciJwksApiAction>;

/**
 * Successful operation
 */
export type VciJwksApiResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the implementation of the JWK Set document
   *
   * @remarks
   * endpoint of the credential issuer should take after getting a
   * response from Authlete's `/vci/jwks` API.
   */
  action?: VciJwksApiAction | undefined;
  /**
   * Get the content that the implementation of the credential issuer
   *
   * @remarks
   * metadata endpoint should use when it constructs a response.
   */
  responseContent?: string | undefined;
};

/** @internal */
export const VciJwksApiRequestBody$inboundSchema: z.ZodType<
  VciJwksApiRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  pretty: z.boolean(),
});

/** @internal */
export type VciJwksApiRequestBody$Outbound = {
  pretty: boolean;
};

/** @internal */
export const VciJwksApiRequestBody$outboundSchema: z.ZodType<
  VciJwksApiRequestBody$Outbound,
  z.ZodTypeDef,
  VciJwksApiRequestBody
> = z.object({
  pretty: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciJwksApiRequestBody$ {
  /** @deprecated use `VciJwksApiRequestBody$inboundSchema` instead. */
  export const inboundSchema = VciJwksApiRequestBody$inboundSchema;
  /** @deprecated use `VciJwksApiRequestBody$outboundSchema` instead. */
  export const outboundSchema = VciJwksApiRequestBody$outboundSchema;
  /** @deprecated use `VciJwksApiRequestBody$Outbound` instead. */
  export type Outbound = VciJwksApiRequestBody$Outbound;
}

export function vciJwksApiRequestBodyToJSON(
  vciJwksApiRequestBody: VciJwksApiRequestBody,
): string {
  return JSON.stringify(
    VciJwksApiRequestBody$outboundSchema.parse(vciJwksApiRequestBody),
  );
}

export function vciJwksApiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<VciJwksApiRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciJwksApiRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciJwksApiRequestBody' from JSON`,
  );
}

/** @internal */
export const VciJwksApiRequest$inboundSchema: z.ZodType<
  VciJwksApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() => VciJwksApiRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type VciJwksApiRequest$Outbound = {
  serviceId: string;
  RequestBody: VciJwksApiRequestBody$Outbound;
};

/** @internal */
export const VciJwksApiRequest$outboundSchema: z.ZodType<
  VciJwksApiRequest$Outbound,
  z.ZodTypeDef,
  VciJwksApiRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() => VciJwksApiRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciJwksApiRequest$ {
  /** @deprecated use `VciJwksApiRequest$inboundSchema` instead. */
  export const inboundSchema = VciJwksApiRequest$inboundSchema;
  /** @deprecated use `VciJwksApiRequest$outboundSchema` instead. */
  export const outboundSchema = VciJwksApiRequest$outboundSchema;
  /** @deprecated use `VciJwksApiRequest$Outbound` instead. */
  export type Outbound = VciJwksApiRequest$Outbound;
}

export function vciJwksApiRequestToJSON(
  vciJwksApiRequest: VciJwksApiRequest,
): string {
  return JSON.stringify(
    VciJwksApiRequest$outboundSchema.parse(vciJwksApiRequest),
  );
}

export function vciJwksApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<VciJwksApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciJwksApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciJwksApiRequest' from JSON`,
  );
}

/** @internal */
export const VciJwksApiAction$inboundSchema: z.ZodNativeEnum<
  typeof VciJwksApiAction
> = z.nativeEnum(VciJwksApiAction);

/** @internal */
export const VciJwksApiAction$outboundSchema: z.ZodNativeEnum<
  typeof VciJwksApiAction
> = VciJwksApiAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciJwksApiAction$ {
  /** @deprecated use `VciJwksApiAction$inboundSchema` instead. */
  export const inboundSchema = VciJwksApiAction$inboundSchema;
  /** @deprecated use `VciJwksApiAction$outboundSchema` instead. */
  export const outboundSchema = VciJwksApiAction$outboundSchema;
}

/** @internal */
export const VciJwksApiResponse$inboundSchema: z.ZodType<
  VciJwksApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciJwksApiAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
});

/** @internal */
export type VciJwksApiResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
};

/** @internal */
export const VciJwksApiResponse$outboundSchema: z.ZodType<
  VciJwksApiResponse$Outbound,
  z.ZodTypeDef,
  VciJwksApiResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciJwksApiAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciJwksApiResponse$ {
  /** @deprecated use `VciJwksApiResponse$inboundSchema` instead. */
  export const inboundSchema = VciJwksApiResponse$inboundSchema;
  /** @deprecated use `VciJwksApiResponse$outboundSchema` instead. */
  export const outboundSchema = VciJwksApiResponse$outboundSchema;
  /** @deprecated use `VciJwksApiResponse$Outbound` instead. */
  export type Outbound = VciJwksApiResponse$Outbound;
}

export function vciJwksApiResponseToJSON(
  vciJwksApiResponse: VciJwksApiResponse,
): string {
  return JSON.stringify(
    VciJwksApiResponse$outboundSchema.parse(vciJwksApiResponse),
  );
}

export function vciJwksApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<VciJwksApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciJwksApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciJwksApiResponse' from JSON`,
  );
}
