/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type AuthTokenUpdateApiFormRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  apilBraceserviceIdRBraceAuthTokenUpdate:
    models.APILBraceserviceIdRBraceAuthTokenUpdate;
};

/**
 * The next action that the authorization server implementation should take.
 */
export const AuthTokenUpdateApiFormAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Forbidden: "FORBIDDEN",
  NotFound: "NOT_FOUND",
  Ok: "OK",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type AuthTokenUpdateApiFormAction = ClosedEnum<
  typeof AuthTokenUpdateApiFormAction
>;

export type AuthTokenUpdateApiFormResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: AuthTokenUpdateApiFormAction | undefined;
  /**
   * The access token which has been specified by the request.
   */
  accessToken?: string | undefined;
  /**
   * The date at which the access token will expire.
   *
   * @remarks
   */
  accessTokenExpiresAt?: number | undefined;
  /**
   * The extra properties associated with the access token.
   *
   * @remarks
   */
  properties?: Array<models.Property> | undefined;
  /**
   * The scopes associated with the access token.
   *
   * @remarks
   */
  scopes?: Array<string> | undefined;
  /**
   * The authorization details. This represents the value of the `authorization_details`
   *
   * @remarks
   * request parameter in the preceding device authorization request which is defined in
   * "OAuth 2.0 Rich Authorization Requests".
   */
  authorizationDetails?: models.AuthorizationDetails | undefined;
  /**
   * The token type associated with the access token.
   *
   * @remarks
   */
  tokenType?: string | undefined;
  /**
   * the flag which indicates whether the access token is for an external
   *
   * @remarks
   * attachment.
   */
  forExternalAttachment?: boolean | undefined;
  /**
   * Set the unique token identifier.
   *
   * @remarks
   */
  tokenId?: string | undefined;
  /**
   * The datetime at which the newly issued refresh token will expire.
   *
   * @remarks
   * The value is represented in milliseconds since the Unix epoch (1970-01-01).
   */
  refreshTokenExpiresAt?: number | undefined;
};

/** @internal */
export const AuthTokenUpdateApiFormRequest$inboundSchema: z.ZodType<
  AuthTokenUpdateApiFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  APILBraceserviceIdRBraceAuthTokenUpdate:
    models.APILBraceserviceIdRBraceAuthTokenUpdate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "APILBraceserviceIdRBraceAuthTokenUpdate":
      "apilBraceserviceIdRBraceAuthTokenUpdate",
  });
});

/** @internal */
export type AuthTokenUpdateApiFormRequest$Outbound = {
  serviceId: string;
  APILBraceserviceIdRBraceAuthTokenUpdate:
    models.APILBraceserviceIdRBraceAuthTokenUpdate$Outbound;
};

/** @internal */
export const AuthTokenUpdateApiFormRequest$outboundSchema: z.ZodType<
  AuthTokenUpdateApiFormRequest$Outbound,
  z.ZodTypeDef,
  AuthTokenUpdateApiFormRequest
> = z.object({
  serviceId: z.string(),
  apilBraceserviceIdRBraceAuthTokenUpdate:
    models.APILBraceserviceIdRBraceAuthTokenUpdate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    apilBraceserviceIdRBraceAuthTokenUpdate:
      "APILBraceserviceIdRBraceAuthTokenUpdate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenUpdateApiFormRequest$ {
  /** @deprecated use `AuthTokenUpdateApiFormRequest$inboundSchema` instead. */
  export const inboundSchema = AuthTokenUpdateApiFormRequest$inboundSchema;
  /** @deprecated use `AuthTokenUpdateApiFormRequest$outboundSchema` instead. */
  export const outboundSchema = AuthTokenUpdateApiFormRequest$outboundSchema;
  /** @deprecated use `AuthTokenUpdateApiFormRequest$Outbound` instead. */
  export type Outbound = AuthTokenUpdateApiFormRequest$Outbound;
}

export function authTokenUpdateApiFormRequestToJSON(
  authTokenUpdateApiFormRequest: AuthTokenUpdateApiFormRequest,
): string {
  return JSON.stringify(
    AuthTokenUpdateApiFormRequest$outboundSchema.parse(
      authTokenUpdateApiFormRequest,
    ),
  );
}

export function authTokenUpdateApiFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenUpdateApiFormRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenUpdateApiFormRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenUpdateApiFormRequest' from JSON`,
  );
}

/** @internal */
export const AuthTokenUpdateApiFormAction$inboundSchema: z.ZodNativeEnum<
  typeof AuthTokenUpdateApiFormAction
> = z.nativeEnum(AuthTokenUpdateApiFormAction);

/** @internal */
export const AuthTokenUpdateApiFormAction$outboundSchema: z.ZodNativeEnum<
  typeof AuthTokenUpdateApiFormAction
> = AuthTokenUpdateApiFormAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenUpdateApiFormAction$ {
  /** @deprecated use `AuthTokenUpdateApiFormAction$inboundSchema` instead. */
  export const inboundSchema = AuthTokenUpdateApiFormAction$inboundSchema;
  /** @deprecated use `AuthTokenUpdateApiFormAction$outboundSchema` instead. */
  export const outboundSchema = AuthTokenUpdateApiFormAction$outboundSchema;
}

/** @internal */
export const AuthTokenUpdateApiFormResponse$inboundSchema: z.ZodType<
  AuthTokenUpdateApiFormResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthTokenUpdateApiFormAction$inboundSchema.optional(),
  accessToken: z.string().optional(),
  accessTokenExpiresAt: z.number().int().optional(),
  properties: z.array(models.Property$inboundSchema).optional(),
  scopes: z.array(z.string()).optional(),
  authorizationDetails: models.AuthorizationDetails$inboundSchema.optional(),
  tokenType: z.string().optional(),
  forExternalAttachment: z.boolean().optional(),
  tokenId: z.string().optional(),
  refreshTokenExpiresAt: z.number().int().optional(),
});

/** @internal */
export type AuthTokenUpdateApiFormResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  accessToken?: string | undefined;
  accessTokenExpiresAt?: number | undefined;
  properties?: Array<models.Property$Outbound> | undefined;
  scopes?: Array<string> | undefined;
  authorizationDetails?: models.AuthorizationDetails$Outbound | undefined;
  tokenType?: string | undefined;
  forExternalAttachment?: boolean | undefined;
  tokenId?: string | undefined;
  refreshTokenExpiresAt?: number | undefined;
};

/** @internal */
export const AuthTokenUpdateApiFormResponse$outboundSchema: z.ZodType<
  AuthTokenUpdateApiFormResponse$Outbound,
  z.ZodTypeDef,
  AuthTokenUpdateApiFormResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthTokenUpdateApiFormAction$outboundSchema.optional(),
  accessToken: z.string().optional(),
  accessTokenExpiresAt: z.number().int().optional(),
  properties: z.array(models.Property$outboundSchema).optional(),
  scopes: z.array(z.string()).optional(),
  authorizationDetails: models.AuthorizationDetails$outboundSchema.optional(),
  tokenType: z.string().optional(),
  forExternalAttachment: z.boolean().optional(),
  tokenId: z.string().optional(),
  refreshTokenExpiresAt: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenUpdateApiFormResponse$ {
  /** @deprecated use `AuthTokenUpdateApiFormResponse$inboundSchema` instead. */
  export const inboundSchema = AuthTokenUpdateApiFormResponse$inboundSchema;
  /** @deprecated use `AuthTokenUpdateApiFormResponse$outboundSchema` instead. */
  export const outboundSchema = AuthTokenUpdateApiFormResponse$outboundSchema;
  /** @deprecated use `AuthTokenUpdateApiFormResponse$Outbound` instead. */
  export type Outbound = AuthTokenUpdateApiFormResponse$Outbound;
}

export function authTokenUpdateApiFormResponseToJSON(
  authTokenUpdateApiFormResponse: AuthTokenUpdateApiFormResponse,
): string {
  return JSON.stringify(
    AuthTokenUpdateApiFormResponse$outboundSchema.parse(
      authTokenUpdateApiFormResponse,
    ),
  );
}

export function authTokenUpdateApiFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenUpdateApiFormResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenUpdateApiFormResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenUpdateApiFormResponse' from JSON`,
  );
}
