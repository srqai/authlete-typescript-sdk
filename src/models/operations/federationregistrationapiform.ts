/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type FederationRegistrationApiFormRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  apilBraceserviceIdRBraceFederationRegistration:
    models.APILBraceserviceIdRBraceFederationRegistration;
};

/**
 * The next action that the authorization server implementation should take.
 */
export const FederationRegistrationApiFormAction = {
  Ok: "OK",
  BadRequest: "BAD_REQUEST",
  NotFound: "NOT_FOUND",
  InternalServerError: "INTERNAL_SERVER_ERROR",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type FederationRegistrationApiFormAction = ClosedEnum<
  typeof FederationRegistrationApiFormAction
>;

export type FederationRegistrationApiFormResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: FederationRegistrationApiFormAction | undefined;
  /**
   * The content that the authorization server implementation can use as the value of `WWW-Authenticate`
   *
   * @remarks
   * header on errors.
   */
  responseContent?: string | undefined;
  client?: models.Client | undefined;
};

/** @internal */
export const FederationRegistrationApiFormRequest$inboundSchema: z.ZodType<
  FederationRegistrationApiFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  APILBraceserviceIdRBraceFederationRegistration:
    models.APILBraceserviceIdRBraceFederationRegistration$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "APILBraceserviceIdRBraceFederationRegistration":
      "apilBraceserviceIdRBraceFederationRegistration",
  });
});

/** @internal */
export type FederationRegistrationApiFormRequest$Outbound = {
  serviceId: string;
  APILBraceserviceIdRBraceFederationRegistration:
    models.APILBraceserviceIdRBraceFederationRegistration$Outbound;
};

/** @internal */
export const FederationRegistrationApiFormRequest$outboundSchema: z.ZodType<
  FederationRegistrationApiFormRequest$Outbound,
  z.ZodTypeDef,
  FederationRegistrationApiFormRequest
> = z.object({
  serviceId: z.string(),
  apilBraceserviceIdRBraceFederationRegistration:
    models.APILBraceserviceIdRBraceFederationRegistration$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    apilBraceserviceIdRBraceFederationRegistration:
      "APILBraceserviceIdRBraceFederationRegistration",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiFormRequest$ {
  /** @deprecated use `FederationRegistrationApiFormRequest$inboundSchema` instead. */
  export const inboundSchema =
    FederationRegistrationApiFormRequest$inboundSchema;
  /** @deprecated use `FederationRegistrationApiFormRequest$outboundSchema` instead. */
  export const outboundSchema =
    FederationRegistrationApiFormRequest$outboundSchema;
  /** @deprecated use `FederationRegistrationApiFormRequest$Outbound` instead. */
  export type Outbound = FederationRegistrationApiFormRequest$Outbound;
}

export function federationRegistrationApiFormRequestToJSON(
  federationRegistrationApiFormRequest: FederationRegistrationApiFormRequest,
): string {
  return JSON.stringify(
    FederationRegistrationApiFormRequest$outboundSchema.parse(
      federationRegistrationApiFormRequest,
    ),
  );
}

export function federationRegistrationApiFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<FederationRegistrationApiFormRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FederationRegistrationApiFormRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FederationRegistrationApiFormRequest' from JSON`,
  );
}

/** @internal */
export const FederationRegistrationApiFormAction$inboundSchema: z.ZodNativeEnum<
  typeof FederationRegistrationApiFormAction
> = z.nativeEnum(FederationRegistrationApiFormAction);

/** @internal */
export const FederationRegistrationApiFormAction$outboundSchema:
  z.ZodNativeEnum<typeof FederationRegistrationApiFormAction> =
    FederationRegistrationApiFormAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiFormAction$ {
  /** @deprecated use `FederationRegistrationApiFormAction$inboundSchema` instead. */
  export const inboundSchema =
    FederationRegistrationApiFormAction$inboundSchema;
  /** @deprecated use `FederationRegistrationApiFormAction$outboundSchema` instead. */
  export const outboundSchema =
    FederationRegistrationApiFormAction$outboundSchema;
}

/** @internal */
export const FederationRegistrationApiFormResponse$inboundSchema: z.ZodType<
  FederationRegistrationApiFormResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: FederationRegistrationApiFormAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
  client: models.Client$inboundSchema.optional(),
});

/** @internal */
export type FederationRegistrationApiFormResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  client?: models.Client$Outbound | undefined;
};

/** @internal */
export const FederationRegistrationApiFormResponse$outboundSchema: z.ZodType<
  FederationRegistrationApiFormResponse$Outbound,
  z.ZodTypeDef,
  FederationRegistrationApiFormResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: FederationRegistrationApiFormAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
  client: models.Client$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiFormResponse$ {
  /** @deprecated use `FederationRegistrationApiFormResponse$inboundSchema` instead. */
  export const inboundSchema =
    FederationRegistrationApiFormResponse$inboundSchema;
  /** @deprecated use `FederationRegistrationApiFormResponse$outboundSchema` instead. */
  export const outboundSchema =
    FederationRegistrationApiFormResponse$outboundSchema;
  /** @deprecated use `FederationRegistrationApiFormResponse$Outbound` instead. */
  export type Outbound = FederationRegistrationApiFormResponse$Outbound;
}

export function federationRegistrationApiFormResponseToJSON(
  federationRegistrationApiFormResponse: FederationRegistrationApiFormResponse,
): string {
  return JSON.stringify(
    FederationRegistrationApiFormResponse$outboundSchema.parse(
      federationRegistrationApiFormResponse,
    ),
  );
}

export function federationRegistrationApiFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<FederationRegistrationApiFormResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FederationRegistrationApiFormResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FederationRegistrationApiFormResponse' from JSON`,
  );
}
