/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ClientRegistrationDeleteApiRequestBody = {
  /**
   * Client ID.
   *
   * @remarks
   */
  clientId: string;
  /**
   * Client registration access token.
   *
   * @remarks
   */
  token: string;
};

export type ClientRegistrationDeleteApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: ClientRegistrationDeleteApiRequestBody;
};

/**
 * The next action that the authorization server implementation should take.
 *
 * @remarks
 */
export const ClientRegistrationDeleteApiAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Deleted: "DELETED",
  Unauthorized: "UNAUTHORIZED",
} as const;
/**
 * The next action that the authorization server implementation should take.
 *
 * @remarks
 */
export type ClientRegistrationDeleteApiAction = ClosedEnum<
  typeof ClientRegistrationDeleteApiAction
>;

/**
 * Successful operation
 */
export type ClientRegistrationDeleteApiResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   *
   * @remarks
   */
  action?: ClientRegistrationDeleteApiAction | undefined;
  /**
   * The content that the authorization server implementation is to return to the client application.
   *
   * @remarks
   * Its format varies depending on the value of `action` parameter.
   */
  responseContent?: string | undefined;
  client?: models.Client | undefined;
};

/** @internal */
export const ClientRegistrationDeleteApiRequestBody$inboundSchema: z.ZodType<
  ClientRegistrationDeleteApiRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientId: z.string(),
  token: z.string(),
});

/** @internal */
export type ClientRegistrationDeleteApiRequestBody$Outbound = {
  clientId: string;
  token: string;
};

/** @internal */
export const ClientRegistrationDeleteApiRequestBody$outboundSchema: z.ZodType<
  ClientRegistrationDeleteApiRequestBody$Outbound,
  z.ZodTypeDef,
  ClientRegistrationDeleteApiRequestBody
> = z.object({
  clientId: z.string(),
  token: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationDeleteApiRequestBody$ {
  /** @deprecated use `ClientRegistrationDeleteApiRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    ClientRegistrationDeleteApiRequestBody$inboundSchema;
  /** @deprecated use `ClientRegistrationDeleteApiRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    ClientRegistrationDeleteApiRequestBody$outboundSchema;
  /** @deprecated use `ClientRegistrationDeleteApiRequestBody$Outbound` instead. */
  export type Outbound = ClientRegistrationDeleteApiRequestBody$Outbound;
}

export function clientRegistrationDeleteApiRequestBodyToJSON(
  clientRegistrationDeleteApiRequestBody:
    ClientRegistrationDeleteApiRequestBody,
): string {
  return JSON.stringify(
    ClientRegistrationDeleteApiRequestBody$outboundSchema.parse(
      clientRegistrationDeleteApiRequestBody,
    ),
  );
}

export function clientRegistrationDeleteApiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<ClientRegistrationDeleteApiRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ClientRegistrationDeleteApiRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientRegistrationDeleteApiRequestBody' from JSON`,
  );
}

/** @internal */
export const ClientRegistrationDeleteApiRequest$inboundSchema: z.ZodType<
  ClientRegistrationDeleteApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() =>
    ClientRegistrationDeleteApiRequestBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type ClientRegistrationDeleteApiRequest$Outbound = {
  serviceId: string;
  RequestBody: ClientRegistrationDeleteApiRequestBody$Outbound;
};

/** @internal */
export const ClientRegistrationDeleteApiRequest$outboundSchema: z.ZodType<
  ClientRegistrationDeleteApiRequest$Outbound,
  z.ZodTypeDef,
  ClientRegistrationDeleteApiRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() =>
    ClientRegistrationDeleteApiRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationDeleteApiRequest$ {
  /** @deprecated use `ClientRegistrationDeleteApiRequest$inboundSchema` instead. */
  export const inboundSchema = ClientRegistrationDeleteApiRequest$inboundSchema;
  /** @deprecated use `ClientRegistrationDeleteApiRequest$outboundSchema` instead. */
  export const outboundSchema =
    ClientRegistrationDeleteApiRequest$outboundSchema;
  /** @deprecated use `ClientRegistrationDeleteApiRequest$Outbound` instead. */
  export type Outbound = ClientRegistrationDeleteApiRequest$Outbound;
}

export function clientRegistrationDeleteApiRequestToJSON(
  clientRegistrationDeleteApiRequest: ClientRegistrationDeleteApiRequest,
): string {
  return JSON.stringify(
    ClientRegistrationDeleteApiRequest$outboundSchema.parse(
      clientRegistrationDeleteApiRequest,
    ),
  );
}

export function clientRegistrationDeleteApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<ClientRegistrationDeleteApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ClientRegistrationDeleteApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientRegistrationDeleteApiRequest' from JSON`,
  );
}

/** @internal */
export const ClientRegistrationDeleteApiAction$inboundSchema: z.ZodNativeEnum<
  typeof ClientRegistrationDeleteApiAction
> = z.nativeEnum(ClientRegistrationDeleteApiAction);

/** @internal */
export const ClientRegistrationDeleteApiAction$outboundSchema: z.ZodNativeEnum<
  typeof ClientRegistrationDeleteApiAction
> = ClientRegistrationDeleteApiAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationDeleteApiAction$ {
  /** @deprecated use `ClientRegistrationDeleteApiAction$inboundSchema` instead. */
  export const inboundSchema = ClientRegistrationDeleteApiAction$inboundSchema;
  /** @deprecated use `ClientRegistrationDeleteApiAction$outboundSchema` instead. */
  export const outboundSchema =
    ClientRegistrationDeleteApiAction$outboundSchema;
}

/** @internal */
export const ClientRegistrationDeleteApiResponse$inboundSchema: z.ZodType<
  ClientRegistrationDeleteApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: ClientRegistrationDeleteApiAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
  client: models.Client$inboundSchema.optional(),
});

/** @internal */
export type ClientRegistrationDeleteApiResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  client?: models.Client$Outbound | undefined;
};

/** @internal */
export const ClientRegistrationDeleteApiResponse$outboundSchema: z.ZodType<
  ClientRegistrationDeleteApiResponse$Outbound,
  z.ZodTypeDef,
  ClientRegistrationDeleteApiResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: ClientRegistrationDeleteApiAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
  client: models.Client$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationDeleteApiResponse$ {
  /** @deprecated use `ClientRegistrationDeleteApiResponse$inboundSchema` instead. */
  export const inboundSchema =
    ClientRegistrationDeleteApiResponse$inboundSchema;
  /** @deprecated use `ClientRegistrationDeleteApiResponse$outboundSchema` instead. */
  export const outboundSchema =
    ClientRegistrationDeleteApiResponse$outboundSchema;
  /** @deprecated use `ClientRegistrationDeleteApiResponse$Outbound` instead. */
  export type Outbound = ClientRegistrationDeleteApiResponse$Outbound;
}

export function clientRegistrationDeleteApiResponseToJSON(
  clientRegistrationDeleteApiResponse: ClientRegistrationDeleteApiResponse,
): string {
  return JSON.stringify(
    ClientRegistrationDeleteApiResponse$outboundSchema.parse(
      clientRegistrationDeleteApiResponse,
    ),
  );
}

export function clientRegistrationDeleteApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<ClientRegistrationDeleteApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ClientRegistrationDeleteApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientRegistrationDeleteApiResponse' from JSON`,
  );
}
