/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

/**
 * An object containing schema data
 */
export type ClientRegistrationUpdateApiRequestBody = {
  /**
   * Client ID.
   *
   * @remarks
   */
  clientId: number;
  /**
   * Client registration access token.
   *
   * @remarks
   */
  token: string;
  /**
   * Client metadata in JSON format that complies with [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591)
   *
   * @remarks
   * (OAuth 2.0 Dynamic Client Registration Protocol).
   */
  json: string;
};

export type ClientRegistrationUpdateApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: ClientRegistrationUpdateApiRequestBody;
};

/**
 * The next action that the authorization server implementation should take.
 *
 * @remarks
 */
export const ClientRegistrationUpdateApiAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Created: "CREATED",
  Unauthorized: "UNAUTHORIZED",
  Forbidden: "FORBIDDEN",
  Json: "JSON",
  Jwt: "JWT",
  Ok: "OK",
} as const;
/**
 * The next action that the authorization server implementation should take.
 *
 * @remarks
 */
export type ClientRegistrationUpdateApiAction = ClosedEnum<
  typeof ClientRegistrationUpdateApiAction
>;

/**
 * An object containing schema data
 */
export type ClientRegistrationUpdateApiResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   *
   * @remarks
   */
  action?: ClientRegistrationUpdateApiAction | undefined;
  /**
   * The content that the authorization server implementation is to return to the client application.
   *
   * @remarks
   * Its format varies depending on the value of `action` parameter.
   */
  responseContent?: string | undefined;
  /**
   * An object containing client data
   */
  client?: models.Client | undefined;
};

/** @internal */
export const ClientRegistrationUpdateApiRequestBody$inboundSchema: z.ZodType<
  ClientRegistrationUpdateApiRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientId: z.number().int(),
  token: z.string(),
  json: z.string(),
});

/** @internal */
export type ClientRegistrationUpdateApiRequestBody$Outbound = {
  clientId: number;
  token: string;
  json: string;
};

/** @internal */
export const ClientRegistrationUpdateApiRequestBody$outboundSchema: z.ZodType<
  ClientRegistrationUpdateApiRequestBody$Outbound,
  z.ZodTypeDef,
  ClientRegistrationUpdateApiRequestBody
> = z.object({
  clientId: z.number().int(),
  token: z.string(),
  json: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationUpdateApiRequestBody$ {
  /** @deprecated use `ClientRegistrationUpdateApiRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    ClientRegistrationUpdateApiRequestBody$inboundSchema;
  /** @deprecated use `ClientRegistrationUpdateApiRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    ClientRegistrationUpdateApiRequestBody$outboundSchema;
  /** @deprecated use `ClientRegistrationUpdateApiRequestBody$Outbound` instead. */
  export type Outbound = ClientRegistrationUpdateApiRequestBody$Outbound;
}

export function clientRegistrationUpdateApiRequestBodyToJSON(
  clientRegistrationUpdateApiRequestBody:
    ClientRegistrationUpdateApiRequestBody,
): string {
  return JSON.stringify(
    ClientRegistrationUpdateApiRequestBody$outboundSchema.parse(
      clientRegistrationUpdateApiRequestBody,
    ),
  );
}

export function clientRegistrationUpdateApiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<ClientRegistrationUpdateApiRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ClientRegistrationUpdateApiRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientRegistrationUpdateApiRequestBody' from JSON`,
  );
}

/** @internal */
export const ClientRegistrationUpdateApiRequest$inboundSchema: z.ZodType<
  ClientRegistrationUpdateApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() =>
    ClientRegistrationUpdateApiRequestBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type ClientRegistrationUpdateApiRequest$Outbound = {
  serviceId: string;
  RequestBody: ClientRegistrationUpdateApiRequestBody$Outbound;
};

/** @internal */
export const ClientRegistrationUpdateApiRequest$outboundSchema: z.ZodType<
  ClientRegistrationUpdateApiRequest$Outbound,
  z.ZodTypeDef,
  ClientRegistrationUpdateApiRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() =>
    ClientRegistrationUpdateApiRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationUpdateApiRequest$ {
  /** @deprecated use `ClientRegistrationUpdateApiRequest$inboundSchema` instead. */
  export const inboundSchema = ClientRegistrationUpdateApiRequest$inboundSchema;
  /** @deprecated use `ClientRegistrationUpdateApiRequest$outboundSchema` instead. */
  export const outboundSchema =
    ClientRegistrationUpdateApiRequest$outboundSchema;
  /** @deprecated use `ClientRegistrationUpdateApiRequest$Outbound` instead. */
  export type Outbound = ClientRegistrationUpdateApiRequest$Outbound;
}

export function clientRegistrationUpdateApiRequestToJSON(
  clientRegistrationUpdateApiRequest: ClientRegistrationUpdateApiRequest,
): string {
  return JSON.stringify(
    ClientRegistrationUpdateApiRequest$outboundSchema.parse(
      clientRegistrationUpdateApiRequest,
    ),
  );
}

export function clientRegistrationUpdateApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<ClientRegistrationUpdateApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ClientRegistrationUpdateApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientRegistrationUpdateApiRequest' from JSON`,
  );
}

/** @internal */
export const ClientRegistrationUpdateApiAction$inboundSchema: z.ZodNativeEnum<
  typeof ClientRegistrationUpdateApiAction
> = z.nativeEnum(ClientRegistrationUpdateApiAction);

/** @internal */
export const ClientRegistrationUpdateApiAction$outboundSchema: z.ZodNativeEnum<
  typeof ClientRegistrationUpdateApiAction
> = ClientRegistrationUpdateApiAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationUpdateApiAction$ {
  /** @deprecated use `ClientRegistrationUpdateApiAction$inboundSchema` instead. */
  export const inboundSchema = ClientRegistrationUpdateApiAction$inboundSchema;
  /** @deprecated use `ClientRegistrationUpdateApiAction$outboundSchema` instead. */
  export const outboundSchema =
    ClientRegistrationUpdateApiAction$outboundSchema;
}

/** @internal */
export const ClientRegistrationUpdateApiResponse$inboundSchema: z.ZodType<
  ClientRegistrationUpdateApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: ClientRegistrationUpdateApiAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
  client: models.Client$inboundSchema.optional(),
});

/** @internal */
export type ClientRegistrationUpdateApiResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  client?: models.Client$Outbound | undefined;
};

/** @internal */
export const ClientRegistrationUpdateApiResponse$outboundSchema: z.ZodType<
  ClientRegistrationUpdateApiResponse$Outbound,
  z.ZodTypeDef,
  ClientRegistrationUpdateApiResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: ClientRegistrationUpdateApiAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
  client: models.Client$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationUpdateApiResponse$ {
  /** @deprecated use `ClientRegistrationUpdateApiResponse$inboundSchema` instead. */
  export const inboundSchema =
    ClientRegistrationUpdateApiResponse$inboundSchema;
  /** @deprecated use `ClientRegistrationUpdateApiResponse$outboundSchema` instead. */
  export const outboundSchema =
    ClientRegistrationUpdateApiResponse$outboundSchema;
  /** @deprecated use `ClientRegistrationUpdateApiResponse$Outbound` instead. */
  export type Outbound = ClientRegistrationUpdateApiResponse$Outbound;
}

export function clientRegistrationUpdateApiResponseToJSON(
  clientRegistrationUpdateApiResponse: ClientRegistrationUpdateApiResponse,
): string {
  return JSON.stringify(
    ClientRegistrationUpdateApiResponse$outboundSchema.parse(
      clientRegistrationUpdateApiResponse,
    ),
  );
}

export function clientRegistrationUpdateApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<ClientRegistrationUpdateApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ClientRegistrationUpdateApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientRegistrationUpdateApiResponse' from JSON`,
  );
}
