/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type VciMetadataApiFormRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  vciMetadataRequest: models.VciMetadataRequest;
};

/**
 * The next action that the implementation of the credential issuer
 *
 * @remarks
 * metadata endpoint (`/.well-known/openid-credential-issuer`)
 * should take after getting a response from Authlete's
 * `/vci/metadata` API.
 */
export const VciMetadataApiFormAction = {
  Ok: "OK",
  NotFound: "NOT_FOUND",
  InternalServerError: "INTERNAL_SERVER_ERROR",
} as const;
/**
 * The next action that the implementation of the credential issuer
 *
 * @remarks
 * metadata endpoint (`/.well-known/openid-credential-issuer`)
 * should take after getting a response from Authlete's
 * `/vci/metadata` API.
 */
export type VciMetadataApiFormAction = ClosedEnum<
  typeof VciMetadataApiFormAction
>;

/**
 * Successful operation
 */
export type VciMetadataApiFormResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the implementation of the credential issuer
   *
   * @remarks
   * metadata endpoint (`/.well-known/openid-credential-issuer`)
   * should take after getting a response from Authlete's
   * `/vci/metadata` API.
   */
  action?: VciMetadataApiFormAction | undefined;
  /**
   * Get the content that the implementation of the credential issuer
   *
   * @remarks
   * metadata endpoint should use when it constructs a response.
   */
  responseContent?: string | undefined;
};

/** @internal */
export const VciMetadataApiFormRequest$inboundSchema: z.ZodType<
  VciMetadataApiFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  VciMetadataRequest: models.VciMetadataRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "VciMetadataRequest": "vciMetadataRequest",
  });
});

/** @internal */
export type VciMetadataApiFormRequest$Outbound = {
  serviceId: string;
  VciMetadataRequest: models.VciMetadataRequest$Outbound;
};

/** @internal */
export const VciMetadataApiFormRequest$outboundSchema: z.ZodType<
  VciMetadataApiFormRequest$Outbound,
  z.ZodTypeDef,
  VciMetadataApiFormRequest
> = z.object({
  serviceId: z.string(),
  vciMetadataRequest: models.VciMetadataRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    vciMetadataRequest: "VciMetadataRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciMetadataApiFormRequest$ {
  /** @deprecated use `VciMetadataApiFormRequest$inboundSchema` instead. */
  export const inboundSchema = VciMetadataApiFormRequest$inboundSchema;
  /** @deprecated use `VciMetadataApiFormRequest$outboundSchema` instead. */
  export const outboundSchema = VciMetadataApiFormRequest$outboundSchema;
  /** @deprecated use `VciMetadataApiFormRequest$Outbound` instead. */
  export type Outbound = VciMetadataApiFormRequest$Outbound;
}

export function vciMetadataApiFormRequestToJSON(
  vciMetadataApiFormRequest: VciMetadataApiFormRequest,
): string {
  return JSON.stringify(
    VciMetadataApiFormRequest$outboundSchema.parse(vciMetadataApiFormRequest),
  );
}

export function vciMetadataApiFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<VciMetadataApiFormRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciMetadataApiFormRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciMetadataApiFormRequest' from JSON`,
  );
}

/** @internal */
export const VciMetadataApiFormAction$inboundSchema: z.ZodNativeEnum<
  typeof VciMetadataApiFormAction
> = z.nativeEnum(VciMetadataApiFormAction);

/** @internal */
export const VciMetadataApiFormAction$outboundSchema: z.ZodNativeEnum<
  typeof VciMetadataApiFormAction
> = VciMetadataApiFormAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciMetadataApiFormAction$ {
  /** @deprecated use `VciMetadataApiFormAction$inboundSchema` instead. */
  export const inboundSchema = VciMetadataApiFormAction$inboundSchema;
  /** @deprecated use `VciMetadataApiFormAction$outboundSchema` instead. */
  export const outboundSchema = VciMetadataApiFormAction$outboundSchema;
}

/** @internal */
export const VciMetadataApiFormResponse$inboundSchema: z.ZodType<
  VciMetadataApiFormResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciMetadataApiFormAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
});

/** @internal */
export type VciMetadataApiFormResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
};

/** @internal */
export const VciMetadataApiFormResponse$outboundSchema: z.ZodType<
  VciMetadataApiFormResponse$Outbound,
  z.ZodTypeDef,
  VciMetadataApiFormResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciMetadataApiFormAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciMetadataApiFormResponse$ {
  /** @deprecated use `VciMetadataApiFormResponse$inboundSchema` instead. */
  export const inboundSchema = VciMetadataApiFormResponse$inboundSchema;
  /** @deprecated use `VciMetadataApiFormResponse$outboundSchema` instead. */
  export const outboundSchema = VciMetadataApiFormResponse$outboundSchema;
  /** @deprecated use `VciMetadataApiFormResponse$Outbound` instead. */
  export type Outbound = VciMetadataApiFormResponse$Outbound;
}

export function vciMetadataApiFormResponseToJSON(
  vciMetadataApiFormResponse: VciMetadataApiFormResponse,
): string {
  return JSON.stringify(
    VciMetadataApiFormResponse$outboundSchema.parse(vciMetadataApiFormResponse),
  );
}

export function vciMetadataApiFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<VciMetadataApiFormResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciMetadataApiFormResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciMetadataApiFormResponse' from JSON`,
  );
}
