/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ClientFlagUpdateApiRequestBody = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export type ClientFlagUpdateApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  /**
   * A client ID.
   */
  clientIdentifier: string;
  requestBody?: ClientFlagUpdateApiRequestBody | undefined;
};

/**
 * Successful operation
 */
export type ClientFlagUpdateApiResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode: string;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage: string;
};

/** @internal */
export const ClientFlagUpdateApiRequestBody$inboundSchema: z.ZodType<
  ClientFlagUpdateApiRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
});

/** @internal */
export type ClientFlagUpdateApiRequestBody$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientFlagUpdateApiRequestBody$outboundSchema: z.ZodType<
  ClientFlagUpdateApiRequestBody$Outbound,
  z.ZodTypeDef,
  ClientFlagUpdateApiRequestBody
> = z.object({
  clientLocked: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientFlagUpdateApiRequestBody$ {
  /** @deprecated use `ClientFlagUpdateApiRequestBody$inboundSchema` instead. */
  export const inboundSchema = ClientFlagUpdateApiRequestBody$inboundSchema;
  /** @deprecated use `ClientFlagUpdateApiRequestBody$outboundSchema` instead. */
  export const outboundSchema = ClientFlagUpdateApiRequestBody$outboundSchema;
  /** @deprecated use `ClientFlagUpdateApiRequestBody$Outbound` instead. */
  export type Outbound = ClientFlagUpdateApiRequestBody$Outbound;
}

export function clientFlagUpdateApiRequestBodyToJSON(
  clientFlagUpdateApiRequestBody: ClientFlagUpdateApiRequestBody,
): string {
  return JSON.stringify(
    ClientFlagUpdateApiRequestBody$outboundSchema.parse(
      clientFlagUpdateApiRequestBody,
    ),
  );
}

export function clientFlagUpdateApiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<ClientFlagUpdateApiRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientFlagUpdateApiRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientFlagUpdateApiRequestBody' from JSON`,
  );
}

/** @internal */
export const ClientFlagUpdateApiRequest$inboundSchema: z.ZodType<
  ClientFlagUpdateApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  clientIdentifier: z.string(),
  RequestBody: z.lazy(() => ClientFlagUpdateApiRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type ClientFlagUpdateApiRequest$Outbound = {
  serviceId: string;
  clientIdentifier: string;
  RequestBody?: ClientFlagUpdateApiRequestBody$Outbound | undefined;
};

/** @internal */
export const ClientFlagUpdateApiRequest$outboundSchema: z.ZodType<
  ClientFlagUpdateApiRequest$Outbound,
  z.ZodTypeDef,
  ClientFlagUpdateApiRequest
> = z.object({
  serviceId: z.string(),
  clientIdentifier: z.string(),
  requestBody: z.lazy(() => ClientFlagUpdateApiRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientFlagUpdateApiRequest$ {
  /** @deprecated use `ClientFlagUpdateApiRequest$inboundSchema` instead. */
  export const inboundSchema = ClientFlagUpdateApiRequest$inboundSchema;
  /** @deprecated use `ClientFlagUpdateApiRequest$outboundSchema` instead. */
  export const outboundSchema = ClientFlagUpdateApiRequest$outboundSchema;
  /** @deprecated use `ClientFlagUpdateApiRequest$Outbound` instead. */
  export type Outbound = ClientFlagUpdateApiRequest$Outbound;
}

export function clientFlagUpdateApiRequestToJSON(
  clientFlagUpdateApiRequest: ClientFlagUpdateApiRequest,
): string {
  return JSON.stringify(
    ClientFlagUpdateApiRequest$outboundSchema.parse(clientFlagUpdateApiRequest),
  );
}

export function clientFlagUpdateApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<ClientFlagUpdateApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientFlagUpdateApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientFlagUpdateApiRequest' from JSON`,
  );
}

/** @internal */
export const ClientFlagUpdateApiResponse$inboundSchema: z.ZodType<
  ClientFlagUpdateApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string(),
  resultMessage: z.string(),
});

/** @internal */
export type ClientFlagUpdateApiResponse$Outbound = {
  resultCode: string;
  resultMessage: string;
};

/** @internal */
export const ClientFlagUpdateApiResponse$outboundSchema: z.ZodType<
  ClientFlagUpdateApiResponse$Outbound,
  z.ZodTypeDef,
  ClientFlagUpdateApiResponse
> = z.object({
  resultCode: z.string(),
  resultMessage: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientFlagUpdateApiResponse$ {
  /** @deprecated use `ClientFlagUpdateApiResponse$inboundSchema` instead. */
  export const inboundSchema = ClientFlagUpdateApiResponse$inboundSchema;
  /** @deprecated use `ClientFlagUpdateApiResponse$outboundSchema` instead. */
  export const outboundSchema = ClientFlagUpdateApiResponse$outboundSchema;
  /** @deprecated use `ClientFlagUpdateApiResponse$Outbound` instead. */
  export type Outbound = ClientFlagUpdateApiResponse$Outbound;
}

export function clientFlagUpdateApiResponseToJSON(
  clientFlagUpdateApiResponse: ClientFlagUpdateApiResponse,
): string {
  return JSON.stringify(
    ClientFlagUpdateApiResponse$outboundSchema.parse(
      clientFlagUpdateApiResponse,
    ),
  );
}

export function clientFlagUpdateApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<ClientFlagUpdateApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientFlagUpdateApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientFlagUpdateApiResponse' from JSON`,
  );
}
