/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type InfoApiResponse = {
  /**
   * The server version.
   */
  version: string;
  /**
   * the features that the server supports.
   */
  features: Array<string>;
};

/** @internal */
export const InfoApiResponse$inboundSchema: z.ZodType<
  InfoApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: z.string(),
  features: z.array(z.string()),
});

/** @internal */
export type InfoApiResponse$Outbound = {
  version: string;
  features: Array<string>;
};

/** @internal */
export const InfoApiResponse$outboundSchema: z.ZodType<
  InfoApiResponse$Outbound,
  z.ZodTypeDef,
  InfoApiResponse
> = z.object({
  version: z.string(),
  features: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InfoApiResponse$ {
  /** @deprecated use `InfoApiResponse$inboundSchema` instead. */
  export const inboundSchema = InfoApiResponse$inboundSchema;
  /** @deprecated use `InfoApiResponse$outboundSchema` instead. */
  export const outboundSchema = InfoApiResponse$outboundSchema;
  /** @deprecated use `InfoApiResponse$Outbound` instead. */
  export type Outbound = InfoApiResponse$Outbound;
}

export function infoApiResponseToJSON(
  infoApiResponse: InfoApiResponse,
): string {
  return JSON.stringify(InfoApiResponse$outboundSchema.parse(infoApiResponse));
}

export function infoApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<InfoApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InfoApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InfoApiResponse' from JSON`,
  );
}
