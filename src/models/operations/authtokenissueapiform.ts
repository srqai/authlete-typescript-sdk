/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type AuthTokenIssueApiFormRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  apiServiceIdAuthTokenIssue: models.ApiServiceIdAuthTokenIssue;
};

/**
 * The next action that the authorization server implementation should take.
 */
export const AuthTokenIssueApiFormAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Created: "CREATED",
  Unauthorized: "UNAUTHORIZED",
  Forbidden: "FORBIDDEN",
  Json: "JSON",
  Jwt: "JWT",
  Ok: "OK",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type AuthTokenIssueApiFormAction = ClosedEnum<
  typeof AuthTokenIssueApiFormAction
>;

/**
 * An object containing schema data
 */
export type AuthTokenIssueApiFormResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: AuthTokenIssueApiFormAction | undefined;
  /**
   * The content that the authorization server implementation is to return to the client application.
   *
   * @remarks
   * Its format is JSON.
   */
  responseContent?: string | undefined;
  /**
   * The newly issued access token. This parameter is a non-null value only when the value of `action` parameter is `OK`.
   */
  accessToken?: string | undefined;
  /**
   * The datetime at which the newly issued access token will expire.
   *
   * @remarks
   * The value is represented in milliseconds since the Unix epoch (1970-01-01).
   */
  accessTokenExpiresAt?: number | undefined;
  /**
   * The duration of the newly issued access token in seconds.
   */
  accessTokenDuration?: number | undefined;
  /**
   * The refresh token. This parameter is a non-null value only when `action` is `OK` and the service supports the refresh token flow.
   *
   * @remarks
   * If `refreshTokenKept` is set to `false`, a new refresh token is issued and the old refresh token used in the refresh token flow
   * is invalidated. On the contrary, if `refreshTokenKept` is set to `true`, the refresh token itself is not refreshed.
   */
  refreshToken?: string | undefined;
  /**
   * The datetime at which the newly issued refresh token will expire.
   *
   * @remarks
   * The value is represented in milliseconds since the Unix epoch (1970-01-01).
   */
  refreshTokenExpiresAt?: number | undefined;
  /**
   * The duration of the newly issued refresh token in seconds.
   */
  refreshTokenDuration?: number | undefined;
  /**
   * The client ID.
   */
  clientId?: number | undefined;
  /**
   * The client ID alias. If the client did not have an alias, this parameter is `null`.
   *
   * @remarks
   */
  clientIdAlias?: string | undefined;
  /**
   * The flag which indicates whether the client ID alias was used when the token request was made.
   *
   * @remarks
   * `true` if the client ID alias was used when the token request was made.
   */
  clientIdAliasUsed?: boolean | undefined;
  /**
   * The subject (= resource owner's ID) of the access token.
   *
   * @remarks
   * Even if an access token has been issued by calling `/api/auth/token` API, this parameter is `null` if the flow of the token request was
   * [Client Credentials Flow](https://datatracker.ietf.org/doc/html/rfc6749#section-4.4) (`grant_type=client_credentials`) because it means
   * the access token is not associated with any specific end-user.
   */
  subject?: string | undefined;
  /**
   * The scopes covered by the access token.
   */
  scopes?: Array<string> | undefined;
  /**
   * The extra properties associated with the access token.
   *
   * @remarks
   * This parameter is `null` when no extra property is associated with the issued access token.
   */
  properties?: Array<models.Property> | undefined;
  /**
   * The newly issued access token in JWT format. If the authorization server is configured to issue JWT-based access tokens
   *
   * @remarks
   * (= if the service's `accessTokenSignAlg` value is a non-null value), a JWT-based access token is issued along with the
   * original random-string one.
   */
  jwtAccessToken?: string | undefined;
  /**
   * The target resources of the access token being issued. See "Resource Indicators for OAuth 2.0" for details.
   *
   * @remarks
   */
  accessTokenResources?: Array<string> | undefined;
  /**
   * The authorization details. This represents the value of the `authorization_details`
   *
   * @remarks
   * request parameter in the preceding device authorization request which is defined in
   * "OAuth 2.0 Rich Authorization Requests".
   */
  authorizationDetails?: models.AuthorizationDetails | undefined;
  /**
   * The attributes of this service that the client application belongs to.
   *
   * @remarks
   */
  serviceAttributes?: Array<models.Pair> | undefined;
  /**
   * The attributes of the client.
   *
   * @remarks
   */
  clientAttributes?: Array<models.Pair> | undefined;
  /**
   * The entity ID of the client.
   *
   * @remarks
   */
  clientEntityId?: string | undefined;
  /**
   * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
   *
   * @remarks
   */
  clientEntityIdUsed?: boolean | undefined;
  /**
   * The scopes associated with the refresh token. May be null.
   *
   * @remarks
   */
  refreshTokenScopes?: Array<string> | undefined;
};

/** @internal */
export const AuthTokenIssueApiFormRequest$inboundSchema: z.ZodType<
  AuthTokenIssueApiFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  api_serviceId_auth_token_issue:
    models.ApiServiceIdAuthTokenIssue$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "api_serviceId_auth_token_issue": "apiServiceIdAuthTokenIssue",
  });
});

/** @internal */
export type AuthTokenIssueApiFormRequest$Outbound = {
  serviceId: string;
  api_serviceId_auth_token_issue: models.ApiServiceIdAuthTokenIssue$Outbound;
};

/** @internal */
export const AuthTokenIssueApiFormRequest$outboundSchema: z.ZodType<
  AuthTokenIssueApiFormRequest$Outbound,
  z.ZodTypeDef,
  AuthTokenIssueApiFormRequest
> = z.object({
  serviceId: z.string(),
  apiServiceIdAuthTokenIssue: models.ApiServiceIdAuthTokenIssue$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    apiServiceIdAuthTokenIssue: "api_serviceId_auth_token_issue",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenIssueApiFormRequest$ {
  /** @deprecated use `AuthTokenIssueApiFormRequest$inboundSchema` instead. */
  export const inboundSchema = AuthTokenIssueApiFormRequest$inboundSchema;
  /** @deprecated use `AuthTokenIssueApiFormRequest$outboundSchema` instead. */
  export const outboundSchema = AuthTokenIssueApiFormRequest$outboundSchema;
  /** @deprecated use `AuthTokenIssueApiFormRequest$Outbound` instead. */
  export type Outbound = AuthTokenIssueApiFormRequest$Outbound;
}

export function authTokenIssueApiFormRequestToJSON(
  authTokenIssueApiFormRequest: AuthTokenIssueApiFormRequest,
): string {
  return JSON.stringify(
    AuthTokenIssueApiFormRequest$outboundSchema.parse(
      authTokenIssueApiFormRequest,
    ),
  );
}

export function authTokenIssueApiFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenIssueApiFormRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenIssueApiFormRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenIssueApiFormRequest' from JSON`,
  );
}

/** @internal */
export const AuthTokenIssueApiFormAction$inboundSchema: z.ZodNativeEnum<
  typeof AuthTokenIssueApiFormAction
> = z.nativeEnum(AuthTokenIssueApiFormAction);

/** @internal */
export const AuthTokenIssueApiFormAction$outboundSchema: z.ZodNativeEnum<
  typeof AuthTokenIssueApiFormAction
> = AuthTokenIssueApiFormAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenIssueApiFormAction$ {
  /** @deprecated use `AuthTokenIssueApiFormAction$inboundSchema` instead. */
  export const inboundSchema = AuthTokenIssueApiFormAction$inboundSchema;
  /** @deprecated use `AuthTokenIssueApiFormAction$outboundSchema` instead. */
  export const outboundSchema = AuthTokenIssueApiFormAction$outboundSchema;
}

/** @internal */
export const AuthTokenIssueApiFormResponse$inboundSchema: z.ZodType<
  AuthTokenIssueApiFormResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthTokenIssueApiFormAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
  accessToken: z.string().optional(),
  accessTokenExpiresAt: z.number().int().optional(),
  accessTokenDuration: z.number().int().optional(),
  refreshToken: z.string().optional(),
  refreshTokenExpiresAt: z.number().int().optional(),
  refreshTokenDuration: z.number().int().optional(),
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  subject: z.string().optional(),
  scopes: z.array(z.string()).optional(),
  properties: z.array(models.Property$inboundSchema).optional(),
  jwtAccessToken: z.string().optional(),
  accessTokenResources: z.array(z.string()).optional(),
  authorizationDetails: models.AuthorizationDetails$inboundSchema.optional(),
  serviceAttributes: z.array(models.Pair$inboundSchema).optional(),
  clientAttributes: z.array(models.Pair$inboundSchema).optional(),
  clientEntityId: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
  refreshTokenScopes: z.array(z.string()).optional(),
});

/** @internal */
export type AuthTokenIssueApiFormResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  accessToken?: string | undefined;
  accessTokenExpiresAt?: number | undefined;
  accessTokenDuration?: number | undefined;
  refreshToken?: string | undefined;
  refreshTokenExpiresAt?: number | undefined;
  refreshTokenDuration?: number | undefined;
  clientId?: number | undefined;
  clientIdAlias?: string | undefined;
  clientIdAliasUsed?: boolean | undefined;
  subject?: string | undefined;
  scopes?: Array<string> | undefined;
  properties?: Array<models.Property$Outbound> | undefined;
  jwtAccessToken?: string | undefined;
  accessTokenResources?: Array<string> | undefined;
  authorizationDetails?: models.AuthorizationDetails$Outbound | undefined;
  serviceAttributes?: Array<models.Pair$Outbound> | undefined;
  clientAttributes?: Array<models.Pair$Outbound> | undefined;
  clientEntityId?: string | undefined;
  clientEntityIdUsed?: boolean | undefined;
  refreshTokenScopes?: Array<string> | undefined;
};

/** @internal */
export const AuthTokenIssueApiFormResponse$outboundSchema: z.ZodType<
  AuthTokenIssueApiFormResponse$Outbound,
  z.ZodTypeDef,
  AuthTokenIssueApiFormResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthTokenIssueApiFormAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
  accessToken: z.string().optional(),
  accessTokenExpiresAt: z.number().int().optional(),
  accessTokenDuration: z.number().int().optional(),
  refreshToken: z.string().optional(),
  refreshTokenExpiresAt: z.number().int().optional(),
  refreshTokenDuration: z.number().int().optional(),
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  subject: z.string().optional(),
  scopes: z.array(z.string()).optional(),
  properties: z.array(models.Property$outboundSchema).optional(),
  jwtAccessToken: z.string().optional(),
  accessTokenResources: z.array(z.string()).optional(),
  authorizationDetails: models.AuthorizationDetails$outboundSchema.optional(),
  serviceAttributes: z.array(models.Pair$outboundSchema).optional(),
  clientAttributes: z.array(models.Pair$outboundSchema).optional(),
  clientEntityId: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
  refreshTokenScopes: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenIssueApiFormResponse$ {
  /** @deprecated use `AuthTokenIssueApiFormResponse$inboundSchema` instead. */
  export const inboundSchema = AuthTokenIssueApiFormResponse$inboundSchema;
  /** @deprecated use `AuthTokenIssueApiFormResponse$outboundSchema` instead. */
  export const outboundSchema = AuthTokenIssueApiFormResponse$outboundSchema;
  /** @deprecated use `AuthTokenIssueApiFormResponse$Outbound` instead. */
  export type Outbound = AuthTokenIssueApiFormResponse$Outbound;
}

export function authTokenIssueApiFormResponseToJSON(
  authTokenIssueApiFormResponse: AuthTokenIssueApiFormResponse,
): string {
  return JSON.stringify(
    AuthTokenIssueApiFormResponse$outboundSchema.parse(
      authTokenIssueApiFormResponse,
    ),
  );
}

export function authTokenIssueApiFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenIssueApiFormResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenIssueApiFormResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenIssueApiFormResponse' from JSON`,
  );
}
