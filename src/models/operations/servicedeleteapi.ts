/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ServiceDeleteApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
};

/**
 * Response for 204
 */
export type ServiceDeleteApiResponse = {};

/** @internal */
export const ServiceDeleteApiRequest$inboundSchema: z.ZodType<
  ServiceDeleteApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
});

/** @internal */
export type ServiceDeleteApiRequest$Outbound = {
  serviceId: string;
};

/** @internal */
export const ServiceDeleteApiRequest$outboundSchema: z.ZodType<
  ServiceDeleteApiRequest$Outbound,
  z.ZodTypeDef,
  ServiceDeleteApiRequest
> = z.object({
  serviceId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceDeleteApiRequest$ {
  /** @deprecated use `ServiceDeleteApiRequest$inboundSchema` instead. */
  export const inboundSchema = ServiceDeleteApiRequest$inboundSchema;
  /** @deprecated use `ServiceDeleteApiRequest$outboundSchema` instead. */
  export const outboundSchema = ServiceDeleteApiRequest$outboundSchema;
  /** @deprecated use `ServiceDeleteApiRequest$Outbound` instead. */
  export type Outbound = ServiceDeleteApiRequest$Outbound;
}

export function serviceDeleteApiRequestToJSON(
  serviceDeleteApiRequest: ServiceDeleteApiRequest,
): string {
  return JSON.stringify(
    ServiceDeleteApiRequest$outboundSchema.parse(serviceDeleteApiRequest),
  );
}

export function serviceDeleteApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<ServiceDeleteApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServiceDeleteApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServiceDeleteApiRequest' from JSON`,
  );
}

/** @internal */
export const ServiceDeleteApiResponse$inboundSchema: z.ZodType<
  ServiceDeleteApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ServiceDeleteApiResponse$Outbound = {};

/** @internal */
export const ServiceDeleteApiResponse$outboundSchema: z.ZodType<
  ServiceDeleteApiResponse$Outbound,
  z.ZodTypeDef,
  ServiceDeleteApiResponse
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceDeleteApiResponse$ {
  /** @deprecated use `ServiceDeleteApiResponse$inboundSchema` instead. */
  export const inboundSchema = ServiceDeleteApiResponse$inboundSchema;
  /** @deprecated use `ServiceDeleteApiResponse$outboundSchema` instead. */
  export const outboundSchema = ServiceDeleteApiResponse$outboundSchema;
  /** @deprecated use `ServiceDeleteApiResponse$Outbound` instead. */
  export type Outbound = ServiceDeleteApiResponse$Outbound;
}

export function serviceDeleteApiResponseToJSON(
  serviceDeleteApiResponse: ServiceDeleteApiResponse,
): string {
  return JSON.stringify(
    ServiceDeleteApiResponse$outboundSchema.parse(serviceDeleteApiResponse),
  );
}

export function serviceDeleteApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<ServiceDeleteApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServiceDeleteApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServiceDeleteApiResponse' from JSON`,
  );
}
