/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type BackchannelAuthenticationApiFormRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  apilBraceserviceIdRBraceBackchannelAuthentication:
    models.APILBraceserviceIdRBraceBackchannelAuthentication;
};

/**
 * The next action that the authorization server implementation should take.
 */
export const BackchannelAuthenticationApiFormAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Unauthorized: "UNAUTHORIZED",
  UserIdentification: "USER_IDENTIFICATION",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type BackchannelAuthenticationApiFormAction = ClosedEnum<
  typeof BackchannelAuthenticationApiFormAction
>;

export type BackchannelAuthenticationApiFormResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: BackchannelAuthenticationApiFormAction | undefined;
  /**
   * The content that the authorization server implementation is to return to the client
   *
   * @remarks
   * application. Its format varies depending on the value of `action` parameter.
   */
  responseContent?: string | undefined;
  /**
   * The client ID of the client application that has made the backchannel authentication
   *
   * @remarks
   * request.
   */
  clientId?: number | undefined;
  /**
   * The client ID alias of the client application that has made the backchannel authentication
   *
   * @remarks
   * request.
   */
  clientIdAlias?: string | undefined;
  /**
   * `true` if the value of the client_id request parameter included in the backchannel
   *
   * @remarks
   * authentication request is the client ID alias. `false` if the value is the original
   * numeric client ID.
   */
  clientIdAliasUsed?: boolean | undefined;
  /**
   * The name of the client application which has made the backchannel authentication request.
   *
   * @remarks
   */
  clientName?: string | undefined;
  /**
   * The scopes requested by the backchannel authentication request.
   *
   * @remarks
   *
   * Basically, this property holds the value of the `scope` request parameter in the backchannel
   * authentication request. However, because unregistered scopes are dropped on Authlete side,
   * if the `scope` request parameter contains unknown scopes, the list returned by this
   * property becomes different from the value of the `scope` request parameter.
   *
   * Note that `description` property and `descriptions` property of each `scope` object
   * in the array contained in this property is always null even if descriptions of the scopes
   * are registered.
   */
  scopes?: Array<models.Scope> | undefined;
  /**
   * The names of the claims which were requested indirectly via some special scopes.
   *
   * @remarks
   * See [5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims)
   * in OpenID Connect Core 1.0 for details.
   */
  claimNames?: Array<string> | undefined;
  /**
   * The client notification token included in the backchannel authentication request.
   *
   * @remarks
   */
  clientNotificationToken?: string | undefined;
  /**
   * The list of ACR values requested by the backchannel authentication request.
   *
   * @remarks
   *
   * Basically, this property holds the value of the `acr_values` request parameter in the
   * backchannel authentication request. However, because unsupported ACR values are dropped
   * on Authlete side, if the `acr_values` request parameter contains unrecognized ACR values,
   * the list returned by this property becomes different from the value of the `acr_values`
   * request parameter.
   */
  acrs?: Array<string> | undefined;
  /**
   * The type of the hint for end-user identification which was included in the backchannel authentication request.
   *
   * @remarks
   */
  hintType?: string | undefined;
  /**
   * The value of the hint for end-user identification.
   *
   * @remarks
   */
  hint?: string | undefined;
  /**
   * The value of the `sub` claim contained in the ID token hint included in the backchannel authentication request.
   *
   * @remarks
   */
  sub?: string | undefined;
  /**
   * The binding message included in the backchannel authentication request.
   *
   * @remarks
   */
  bindingMessage?: string | undefined;
  /**
   * The binding message included in the backchannel authentication request.
   *
   * @remarks
   */
  userCode?: string | undefined;
  /**
   * The flag which indicates whether a user code is required.
   *
   * @remarks
   *
   * `true` when both the `backchannel_user_code_parameter` metadata of the client (= Client's
   * `bcUserCodeRequired` property) and the `backchannel_user_code_parameter_supported`
   * metadata of the service (= Service's `backchannelUserCodeParameterSupported` property)
   * are `true`.
   */
  userCodeRequired?: boolean | undefined;
  /**
   * The requested expiry for the authentication request ID (`auth_req_id`).
   *
   * @remarks
   */
  requestedExpiry?: number | undefined;
  /**
   * The request context of the backchannel authentication request.
   *
   * @remarks
   *
   * It is the value of the request_context claim in the signed authentication request and
   * its format is JSON. request_context is a new claim added by the FAPI-CIBA profile.
   */
  requestContext?: string | undefined;
  /**
   * The warnings raised during processing the backchannel authentication request.
   *
   * @remarks
   */
  warnings?: Array<string> | undefined;
  /**
   * The ticket which is necessary to call Authlete's `/auth/token/fail` API or `/auth/token/issue` API.
   *
   * @remarks
   *
   * This parameter has a value only if the value of `grant_type` request parameter is `password` and the token request is valid.
   */
  ticket?: string | undefined;
  /**
   * The resources specified by the `resource` request parameters or by the `resource` property
   *
   * @remarks
   * in the request object. If both are given, the values in the request object should be
   * set. See "Resource Indicators for OAuth 2.0" for details.
   */
  resources?: Array<string> | undefined;
  /**
   * The authorization details. This represents the value of the `authorization_details`
   *
   * @remarks
   * request parameter in the preceding device authorization request which is defined in
   * "OAuth 2.0 Rich Authorization Requests".
   */
  authorizationDetails?: models.AuthorizationDetails | undefined;
  /**
   * The attributes of this service that the client application belongs to.
   *
   * @remarks
   */
  serviceAttributes?: Array<models.Pair> | undefined;
  /**
   * The attributes of the client.
   *
   * @remarks
   */
  clientAttributes?: Array<models.Pair> | undefined;
  /**
   * The dynamic scopes which the client application requested by the scope request parameter.
   *
   * @remarks
   */
  dynamicScopes?: Array<models.DynamicScope> | undefined;
  deliveryMode?: models.DeliveryMode | undefined;
  /**
   * The client authentication method that was performed.
   *
   * @remarks
   */
  clientAuthMethod?: string | undefined;
  gmAction?: models.APILBraceserviceIdRBraceGmPropertiesGmAction | undefined;
  /**
   * the value of the `grant_id` request parameter of the device authorization request.
   *
   * @remarks
   *
   * The `grant_id` request parameter is defined in
   * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
   * , which is supported by Authlete 2.3 and newer versions.
   */
  grantId?: string | undefined;
  grant?:
    | models.APILBraceserviceIdRBraceAuthAuthorization200PropertiesGrant
    | undefined;
  /**
   * The subject identifying the user who has given the grant identified
   *
   * @remarks
   * by the `grant_id` request parameter of the device authorization
   * request.
   *
   * Authlete 2.3 and newer versions support <a href=
   * "https://openid.net/specs/fapi-grant-management.html">Grant Management
   * for OAuth 2.0</a>. An authorization request may contain a `grant_id`
   * request parameter which is defined in the specification. If the value of
   * the request parameter is valid, {@link #getGrantSubject()} will return
   * the subject of the user who has given the grant to the client application.
   * Authorization server implementations may use the value returned from
   * {@link #getGrantSubject()} in order to determine the user to authenticate.
   *
   * The user your system will authenticate during the authorization process
   * (or has already authenticated) may be different from the user of the
   * grant. The first implementer's draft of "Grant Management for OAuth 2.0"
   * does not mention anything about the case, so the behavior in the case is
   * left to implementations. Authlete will not perform the grant management
   * action when the `subject` passed to Authlete does not match the
   * user of the grant.
   */
  grantSubject?: string | undefined;
  /**
   * The entity ID of the client.
   *
   * @remarks
   */
  clientEntityId?: string | undefined;
  /**
   * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
   *
   * @remarks
   */
  clientEntityIdUsed?: boolean | undefined;
};

/** @internal */
export const BackchannelAuthenticationApiFormRequest$inboundSchema: z.ZodType<
  BackchannelAuthenticationApiFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  APILBraceserviceIdRBraceBackchannelAuthentication:
    models.APILBraceserviceIdRBraceBackchannelAuthentication$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "APILBraceserviceIdRBraceBackchannelAuthentication":
      "apilBraceserviceIdRBraceBackchannelAuthentication",
  });
});

/** @internal */
export type BackchannelAuthenticationApiFormRequest$Outbound = {
  serviceId: string;
  APILBraceserviceIdRBraceBackchannelAuthentication:
    models.APILBraceserviceIdRBraceBackchannelAuthentication$Outbound;
};

/** @internal */
export const BackchannelAuthenticationApiFormRequest$outboundSchema: z.ZodType<
  BackchannelAuthenticationApiFormRequest$Outbound,
  z.ZodTypeDef,
  BackchannelAuthenticationApiFormRequest
> = z.object({
  serviceId: z.string(),
  apilBraceserviceIdRBraceBackchannelAuthentication:
    models.APILBraceserviceIdRBraceBackchannelAuthentication$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    apilBraceserviceIdRBraceBackchannelAuthentication:
      "APILBraceserviceIdRBraceBackchannelAuthentication",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationApiFormRequest$ {
  /** @deprecated use `BackchannelAuthenticationApiFormRequest$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationApiFormRequest$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiFormRequest$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationApiFormRequest$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiFormRequest$Outbound` instead. */
  export type Outbound = BackchannelAuthenticationApiFormRequest$Outbound;
}

export function backchannelAuthenticationApiFormRequestToJSON(
  backchannelAuthenticationApiFormRequest:
    BackchannelAuthenticationApiFormRequest,
): string {
  return JSON.stringify(
    BackchannelAuthenticationApiFormRequest$outboundSchema.parse(
      backchannelAuthenticationApiFormRequest,
    ),
  );
}

export function backchannelAuthenticationApiFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  BackchannelAuthenticationApiFormRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationApiFormRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BackchannelAuthenticationApiFormRequest' from JSON`,
  );
}

/** @internal */
export const BackchannelAuthenticationApiFormAction$inboundSchema:
  z.ZodNativeEnum<typeof BackchannelAuthenticationApiFormAction> = z.nativeEnum(
    BackchannelAuthenticationApiFormAction,
  );

/** @internal */
export const BackchannelAuthenticationApiFormAction$outboundSchema:
  z.ZodNativeEnum<typeof BackchannelAuthenticationApiFormAction> =
    BackchannelAuthenticationApiFormAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationApiFormAction$ {
  /** @deprecated use `BackchannelAuthenticationApiFormAction$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationApiFormAction$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiFormAction$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationApiFormAction$outboundSchema;
}

/** @internal */
export const BackchannelAuthenticationApiFormResponse$inboundSchema: z.ZodType<
  BackchannelAuthenticationApiFormResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: BackchannelAuthenticationApiFormAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  clientName: z.string().optional(),
  scopes: z.array(models.Scope$inboundSchema).optional(),
  claimNames: z.array(z.string()).optional(),
  clientNotificationToken: z.string().optional(),
  acrs: z.array(z.string()).optional(),
  hintType: z.string().optional(),
  hint: z.string().optional(),
  sub: z.string().optional(),
  bindingMessage: z.string().optional(),
  userCode: z.string().optional(),
  userCodeRequired: z.boolean().optional(),
  requestedExpiry: z.number().int().optional(),
  requestContext: z.string().optional(),
  warnings: z.array(z.string()).optional(),
  ticket: z.string().optional(),
  resources: z.array(z.string()).optional(),
  authorizationDetails: models.AuthorizationDetails$inboundSchema.optional(),
  serviceAttributes: z.array(models.Pair$inboundSchema).optional(),
  clientAttributes: z.array(models.Pair$inboundSchema).optional(),
  dynamicScopes: z.array(models.DynamicScope$inboundSchema).optional(),
  deliveryMode: models.DeliveryMode$inboundSchema.optional(),
  clientAuthMethod: z.string().optional(),
  gmAction: models.APILBraceserviceIdRBraceGmPropertiesGmAction$inboundSchema
    .optional(),
  grantId: z.string().optional(),
  grant: models
    .APILBraceserviceIdRBraceAuthAuthorization200PropertiesGrant$inboundSchema
    .optional(),
  grantSubject: z.string().optional(),
  clientEntityId: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
});

/** @internal */
export type BackchannelAuthenticationApiFormResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  clientId?: number | undefined;
  clientIdAlias?: string | undefined;
  clientIdAliasUsed?: boolean | undefined;
  clientName?: string | undefined;
  scopes?: Array<models.Scope$Outbound> | undefined;
  claimNames?: Array<string> | undefined;
  clientNotificationToken?: string | undefined;
  acrs?: Array<string> | undefined;
  hintType?: string | undefined;
  hint?: string | undefined;
  sub?: string | undefined;
  bindingMessage?: string | undefined;
  userCode?: string | undefined;
  userCodeRequired?: boolean | undefined;
  requestedExpiry?: number | undefined;
  requestContext?: string | undefined;
  warnings?: Array<string> | undefined;
  ticket?: string | undefined;
  resources?: Array<string> | undefined;
  authorizationDetails?: models.AuthorizationDetails$Outbound | undefined;
  serviceAttributes?: Array<models.Pair$Outbound> | undefined;
  clientAttributes?: Array<models.Pair$Outbound> | undefined;
  dynamicScopes?: Array<models.DynamicScope$Outbound> | undefined;
  deliveryMode?: string | undefined;
  clientAuthMethod?: string | undefined;
  gmAction?:
    | models.APILBraceserviceIdRBraceGmPropertiesGmAction$Outbound
    | undefined;
  grantId?: string | undefined;
  grant?:
    | models.APILBraceserviceIdRBraceAuthAuthorization200PropertiesGrant$Outbound
    | undefined;
  grantSubject?: string | undefined;
  clientEntityId?: string | undefined;
  clientEntityIdUsed?: boolean | undefined;
};

/** @internal */
export const BackchannelAuthenticationApiFormResponse$outboundSchema: z.ZodType<
  BackchannelAuthenticationApiFormResponse$Outbound,
  z.ZodTypeDef,
  BackchannelAuthenticationApiFormResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: BackchannelAuthenticationApiFormAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  clientName: z.string().optional(),
  scopes: z.array(models.Scope$outboundSchema).optional(),
  claimNames: z.array(z.string()).optional(),
  clientNotificationToken: z.string().optional(),
  acrs: z.array(z.string()).optional(),
  hintType: z.string().optional(),
  hint: z.string().optional(),
  sub: z.string().optional(),
  bindingMessage: z.string().optional(),
  userCode: z.string().optional(),
  userCodeRequired: z.boolean().optional(),
  requestedExpiry: z.number().int().optional(),
  requestContext: z.string().optional(),
  warnings: z.array(z.string()).optional(),
  ticket: z.string().optional(),
  resources: z.array(z.string()).optional(),
  authorizationDetails: models.AuthorizationDetails$outboundSchema.optional(),
  serviceAttributes: z.array(models.Pair$outboundSchema).optional(),
  clientAttributes: z.array(models.Pair$outboundSchema).optional(),
  dynamicScopes: z.array(models.DynamicScope$outboundSchema).optional(),
  deliveryMode: models.DeliveryMode$outboundSchema.optional(),
  clientAuthMethod: z.string().optional(),
  gmAction: models.APILBraceserviceIdRBraceGmPropertiesGmAction$outboundSchema
    .optional(),
  grantId: z.string().optional(),
  grant: models
    .APILBraceserviceIdRBraceAuthAuthorization200PropertiesGrant$outboundSchema
    .optional(),
  grantSubject: z.string().optional(),
  clientEntityId: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationApiFormResponse$ {
  /** @deprecated use `BackchannelAuthenticationApiFormResponse$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationApiFormResponse$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiFormResponse$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationApiFormResponse$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiFormResponse$Outbound` instead. */
  export type Outbound = BackchannelAuthenticationApiFormResponse$Outbound;
}

export function backchannelAuthenticationApiFormResponseToJSON(
  backchannelAuthenticationApiFormResponse:
    BackchannelAuthenticationApiFormResponse,
): string {
  return JSON.stringify(
    BackchannelAuthenticationApiFormResponse$outboundSchema.parse(
      backchannelAuthenticationApiFormResponse,
    ),
  );
}

export function backchannelAuthenticationApiFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  BackchannelAuthenticationApiFormResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationApiFormResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BackchannelAuthenticationApiFormResponse' from JSON`,
  );
}
