/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * An object containing schema data
 */
export type VciMetadataApiRequestBody = {
  /**
   * The flag indicating whether the metadata is written in the pretty
   *
   * @remarks
   * format or not.
   */
  pretty: boolean;
};

export type VciMetadataApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: VciMetadataApiRequestBody;
};

/**
 * The next action that the implementation of the credential issuer
 *
 * @remarks
 * metadata endpoint (`/.well-known/openid-credential-issuer`)
 * should take after getting a response from Authlete's
 * `/vci/metadata` API.
 */
export const VciMetadataApiAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Created: "CREATED",
  Unauthorized: "UNAUTHORIZED",
  Forbidden: "FORBIDDEN",
  Json: "JSON",
  Jwt: "JWT",
  Ok: "OK",
} as const;
/**
 * The next action that the implementation of the credential issuer
 *
 * @remarks
 * metadata endpoint (`/.well-known/openid-credential-issuer`)
 * should take after getting a response from Authlete's
 * `/vci/metadata` API.
 */
export type VciMetadataApiAction = ClosedEnum<typeof VciMetadataApiAction>;

/**
 * An object containing schema data
 */
export type VciMetadataApiResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the implementation of the credential issuer
   *
   * @remarks
   * metadata endpoint (`/.well-known/openid-credential-issuer`)
   * should take after getting a response from Authlete's
   * `/vci/metadata` API.
   */
  action?: VciMetadataApiAction | undefined;
  /**
   * Get the content that the implementation of the credential issuer
   *
   * @remarks
   * metadata endpoint should use when it constructs a response.
   */
  responseContent?: string | undefined;
};

/** @internal */
export const VciMetadataApiRequestBody$inboundSchema: z.ZodType<
  VciMetadataApiRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  pretty: z.boolean(),
});

/** @internal */
export type VciMetadataApiRequestBody$Outbound = {
  pretty: boolean;
};

/** @internal */
export const VciMetadataApiRequestBody$outboundSchema: z.ZodType<
  VciMetadataApiRequestBody$Outbound,
  z.ZodTypeDef,
  VciMetadataApiRequestBody
> = z.object({
  pretty: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciMetadataApiRequestBody$ {
  /** @deprecated use `VciMetadataApiRequestBody$inboundSchema` instead. */
  export const inboundSchema = VciMetadataApiRequestBody$inboundSchema;
  /** @deprecated use `VciMetadataApiRequestBody$outboundSchema` instead. */
  export const outboundSchema = VciMetadataApiRequestBody$outboundSchema;
  /** @deprecated use `VciMetadataApiRequestBody$Outbound` instead. */
  export type Outbound = VciMetadataApiRequestBody$Outbound;
}

export function vciMetadataApiRequestBodyToJSON(
  vciMetadataApiRequestBody: VciMetadataApiRequestBody,
): string {
  return JSON.stringify(
    VciMetadataApiRequestBody$outboundSchema.parse(vciMetadataApiRequestBody),
  );
}

export function vciMetadataApiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<VciMetadataApiRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciMetadataApiRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciMetadataApiRequestBody' from JSON`,
  );
}

/** @internal */
export const VciMetadataApiRequest$inboundSchema: z.ZodType<
  VciMetadataApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() => VciMetadataApiRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type VciMetadataApiRequest$Outbound = {
  serviceId: string;
  RequestBody: VciMetadataApiRequestBody$Outbound;
};

/** @internal */
export const VciMetadataApiRequest$outboundSchema: z.ZodType<
  VciMetadataApiRequest$Outbound,
  z.ZodTypeDef,
  VciMetadataApiRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() => VciMetadataApiRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciMetadataApiRequest$ {
  /** @deprecated use `VciMetadataApiRequest$inboundSchema` instead. */
  export const inboundSchema = VciMetadataApiRequest$inboundSchema;
  /** @deprecated use `VciMetadataApiRequest$outboundSchema` instead. */
  export const outboundSchema = VciMetadataApiRequest$outboundSchema;
  /** @deprecated use `VciMetadataApiRequest$Outbound` instead. */
  export type Outbound = VciMetadataApiRequest$Outbound;
}

export function vciMetadataApiRequestToJSON(
  vciMetadataApiRequest: VciMetadataApiRequest,
): string {
  return JSON.stringify(
    VciMetadataApiRequest$outboundSchema.parse(vciMetadataApiRequest),
  );
}

export function vciMetadataApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<VciMetadataApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciMetadataApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciMetadataApiRequest' from JSON`,
  );
}

/** @internal */
export const VciMetadataApiAction$inboundSchema: z.ZodNativeEnum<
  typeof VciMetadataApiAction
> = z.nativeEnum(VciMetadataApiAction);

/** @internal */
export const VciMetadataApiAction$outboundSchema: z.ZodNativeEnum<
  typeof VciMetadataApiAction
> = VciMetadataApiAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciMetadataApiAction$ {
  /** @deprecated use `VciMetadataApiAction$inboundSchema` instead. */
  export const inboundSchema = VciMetadataApiAction$inboundSchema;
  /** @deprecated use `VciMetadataApiAction$outboundSchema` instead. */
  export const outboundSchema = VciMetadataApiAction$outboundSchema;
}

/** @internal */
export const VciMetadataApiResponse$inboundSchema: z.ZodType<
  VciMetadataApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciMetadataApiAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
});

/** @internal */
export type VciMetadataApiResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
};

/** @internal */
export const VciMetadataApiResponse$outboundSchema: z.ZodType<
  VciMetadataApiResponse$Outbound,
  z.ZodTypeDef,
  VciMetadataApiResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciMetadataApiAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciMetadataApiResponse$ {
  /** @deprecated use `VciMetadataApiResponse$inboundSchema` instead. */
  export const inboundSchema = VciMetadataApiResponse$inboundSchema;
  /** @deprecated use `VciMetadataApiResponse$outboundSchema` instead. */
  export const outboundSchema = VciMetadataApiResponse$outboundSchema;
  /** @deprecated use `VciMetadataApiResponse$Outbound` instead. */
  export type Outbound = VciMetadataApiResponse$Outbound;
}

export function vciMetadataApiResponseToJSON(
  vciMetadataApiResponse: VciMetadataApiResponse,
): string {
  return JSON.stringify(
    VciMetadataApiResponse$outboundSchema.parse(vciMetadataApiResponse),
  );
}

export function vciMetadataApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<VciMetadataApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciMetadataApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciMetadataApiResponse' from JSON`,
  );
}
