/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ServiceJwksGetApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  /**
   * The boolean value that indicates whether the response should include the private keys associated with the service or not. If `true`, the private keys are included in the response. The default value is `false`.
   */
  includePrivateKeys?: boolean | undefined;
  /**
   * This boolean value indicates whether the JSON in the response should be formatted or not. If `true`, the JSON in the response is pretty-formatted. The default value is `false`.
   */
  pretty?: boolean | undefined;
};

/**
 * An object representing JWK. See [RFC 7517](https://datatracker.ietf.org/doc/html/rfc7517) for more details.
 *
 * @remarks
 */
export type Key = {};

export type ServiceJwksGetApiResponse = {
  /**
   * An array of [JWK](https://datatracker.ietf.org/doc/html/rfc7517)s.
   */
  keys?: Array<Key> | undefined;
};

/** @internal */
export const ServiceJwksGetApiRequest$inboundSchema: z.ZodType<
  ServiceJwksGetApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  includePrivateKeys: z.boolean().optional(),
  pretty: z.boolean().optional(),
});

/** @internal */
export type ServiceJwksGetApiRequest$Outbound = {
  serviceId: string;
  includePrivateKeys?: boolean | undefined;
  pretty?: boolean | undefined;
};

/** @internal */
export const ServiceJwksGetApiRequest$outboundSchema: z.ZodType<
  ServiceJwksGetApiRequest$Outbound,
  z.ZodTypeDef,
  ServiceJwksGetApiRequest
> = z.object({
  serviceId: z.string(),
  includePrivateKeys: z.boolean().optional(),
  pretty: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceJwksGetApiRequest$ {
  /** @deprecated use `ServiceJwksGetApiRequest$inboundSchema` instead. */
  export const inboundSchema = ServiceJwksGetApiRequest$inboundSchema;
  /** @deprecated use `ServiceJwksGetApiRequest$outboundSchema` instead. */
  export const outboundSchema = ServiceJwksGetApiRequest$outboundSchema;
  /** @deprecated use `ServiceJwksGetApiRequest$Outbound` instead. */
  export type Outbound = ServiceJwksGetApiRequest$Outbound;
}

export function serviceJwksGetApiRequestToJSON(
  serviceJwksGetApiRequest: ServiceJwksGetApiRequest,
): string {
  return JSON.stringify(
    ServiceJwksGetApiRequest$outboundSchema.parse(serviceJwksGetApiRequest),
  );
}

export function serviceJwksGetApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<ServiceJwksGetApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServiceJwksGetApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServiceJwksGetApiRequest' from JSON`,
  );
}

/** @internal */
export const Key$inboundSchema: z.ZodType<Key, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Key$Outbound = {};

/** @internal */
export const Key$outboundSchema: z.ZodType<Key$Outbound, z.ZodTypeDef, Key> = z
  .object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Key$ {
  /** @deprecated use `Key$inboundSchema` instead. */
  export const inboundSchema = Key$inboundSchema;
  /** @deprecated use `Key$outboundSchema` instead. */
  export const outboundSchema = Key$outboundSchema;
  /** @deprecated use `Key$Outbound` instead. */
  export type Outbound = Key$Outbound;
}

export function keyToJSON(key: Key): string {
  return JSON.stringify(Key$outboundSchema.parse(key));
}

export function keyFromJSON(
  jsonString: string,
): SafeParseResult<Key, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Key$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Key' from JSON`,
  );
}

/** @internal */
export const ServiceJwksGetApiResponse$inboundSchema: z.ZodType<
  ServiceJwksGetApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  keys: z.array(z.lazy(() => Key$inboundSchema)).optional(),
});

/** @internal */
export type ServiceJwksGetApiResponse$Outbound = {
  keys?: Array<Key$Outbound> | undefined;
};

/** @internal */
export const ServiceJwksGetApiResponse$outboundSchema: z.ZodType<
  ServiceJwksGetApiResponse$Outbound,
  z.ZodTypeDef,
  ServiceJwksGetApiResponse
> = z.object({
  keys: z.array(z.lazy(() => Key$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceJwksGetApiResponse$ {
  /** @deprecated use `ServiceJwksGetApiResponse$inboundSchema` instead. */
  export const inboundSchema = ServiceJwksGetApiResponse$inboundSchema;
  /** @deprecated use `ServiceJwksGetApiResponse$outboundSchema` instead. */
  export const outboundSchema = ServiceJwksGetApiResponse$outboundSchema;
  /** @deprecated use `ServiceJwksGetApiResponse$Outbound` instead. */
  export type Outbound = ServiceJwksGetApiResponse$Outbound;
}

export function serviceJwksGetApiResponseToJSON(
  serviceJwksGetApiResponse: ServiceJwksGetApiResponse,
): string {
  return JSON.stringify(
    ServiceJwksGetApiResponse$outboundSchema.parse(serviceJwksGetApiResponse),
  );
}

export function serviceJwksGetApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<ServiceJwksGetApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServiceJwksGetApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServiceJwksGetApiResponse' from JSON`,
  );
}
