/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type VciDeferredParseApiFormRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  apiServiceIdVciDeferredParse: models.ApiServiceIdVciDeferredParse;
};

/**
 * The next action that the deferred credential endpoint should take.
 */
export const VciDeferredParseApiFormAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Created: "CREATED",
  Unauthorized: "UNAUTHORIZED",
  Forbidden: "FORBIDDEN",
  Json: "JSON",
  Jwt: "JWT",
  Ok: "OK",
} as const;
/**
 * The next action that the deferred credential endpoint should take.
 */
export type VciDeferredParseApiFormAction = ClosedEnum<
  typeof VciDeferredParseApiFormAction
>;

/**
 * An object containing schema data
 */
export type VciDeferredParseApiFormResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the deferred credential endpoint should take.
   */
  action?: VciDeferredParseApiFormAction | undefined;
  /**
   * The content of the response to the request sender.
   */
  responseContent?: string | undefined;
  /**
   * An object containing credentialrequestinfo data
   */
  info?: models.CredentialRequestInfo | undefined;
};

/** @internal */
export const VciDeferredParseApiFormRequest$inboundSchema: z.ZodType<
  VciDeferredParseApiFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  api_serviceId_vci_deferred_parse:
    models.ApiServiceIdVciDeferredParse$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "api_serviceId_vci_deferred_parse": "apiServiceIdVciDeferredParse",
  });
});

/** @internal */
export type VciDeferredParseApiFormRequest$Outbound = {
  serviceId: string;
  api_serviceId_vci_deferred_parse:
    models.ApiServiceIdVciDeferredParse$Outbound;
};

/** @internal */
export const VciDeferredParseApiFormRequest$outboundSchema: z.ZodType<
  VciDeferredParseApiFormRequest$Outbound,
  z.ZodTypeDef,
  VciDeferredParseApiFormRequest
> = z.object({
  serviceId: z.string(),
  apiServiceIdVciDeferredParse:
    models.ApiServiceIdVciDeferredParse$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    apiServiceIdVciDeferredParse: "api_serviceId_vci_deferred_parse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciDeferredParseApiFormRequest$ {
  /** @deprecated use `VciDeferredParseApiFormRequest$inboundSchema` instead. */
  export const inboundSchema = VciDeferredParseApiFormRequest$inboundSchema;
  /** @deprecated use `VciDeferredParseApiFormRequest$outboundSchema` instead. */
  export const outboundSchema = VciDeferredParseApiFormRequest$outboundSchema;
  /** @deprecated use `VciDeferredParseApiFormRequest$Outbound` instead. */
  export type Outbound = VciDeferredParseApiFormRequest$Outbound;
}

export function vciDeferredParseApiFormRequestToJSON(
  vciDeferredParseApiFormRequest: VciDeferredParseApiFormRequest,
): string {
  return JSON.stringify(
    VciDeferredParseApiFormRequest$outboundSchema.parse(
      vciDeferredParseApiFormRequest,
    ),
  );
}

export function vciDeferredParseApiFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<VciDeferredParseApiFormRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciDeferredParseApiFormRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciDeferredParseApiFormRequest' from JSON`,
  );
}

/** @internal */
export const VciDeferredParseApiFormAction$inboundSchema: z.ZodNativeEnum<
  typeof VciDeferredParseApiFormAction
> = z.nativeEnum(VciDeferredParseApiFormAction);

/** @internal */
export const VciDeferredParseApiFormAction$outboundSchema: z.ZodNativeEnum<
  typeof VciDeferredParseApiFormAction
> = VciDeferredParseApiFormAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciDeferredParseApiFormAction$ {
  /** @deprecated use `VciDeferredParseApiFormAction$inboundSchema` instead. */
  export const inboundSchema = VciDeferredParseApiFormAction$inboundSchema;
  /** @deprecated use `VciDeferredParseApiFormAction$outboundSchema` instead. */
  export const outboundSchema = VciDeferredParseApiFormAction$outboundSchema;
}

/** @internal */
export const VciDeferredParseApiFormResponse$inboundSchema: z.ZodType<
  VciDeferredParseApiFormResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciDeferredParseApiFormAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
  info: models.CredentialRequestInfo$inboundSchema.optional(),
});

/** @internal */
export type VciDeferredParseApiFormResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  info?: models.CredentialRequestInfo$Outbound | undefined;
};

/** @internal */
export const VciDeferredParseApiFormResponse$outboundSchema: z.ZodType<
  VciDeferredParseApiFormResponse$Outbound,
  z.ZodTypeDef,
  VciDeferredParseApiFormResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciDeferredParseApiFormAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
  info: models.CredentialRequestInfo$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciDeferredParseApiFormResponse$ {
  /** @deprecated use `VciDeferredParseApiFormResponse$inboundSchema` instead. */
  export const inboundSchema = VciDeferredParseApiFormResponse$inboundSchema;
  /** @deprecated use `VciDeferredParseApiFormResponse$outboundSchema` instead. */
  export const outboundSchema = VciDeferredParseApiFormResponse$outboundSchema;
  /** @deprecated use `VciDeferredParseApiFormResponse$Outbound` instead. */
  export type Outbound = VciDeferredParseApiFormResponse$Outbound;
}

export function vciDeferredParseApiFormResponseToJSON(
  vciDeferredParseApiFormResponse: VciDeferredParseApiFormResponse,
): string {
  return JSON.stringify(
    VciDeferredParseApiFormResponse$outboundSchema.parse(
      vciDeferredParseApiFormResponse,
    ),
  );
}

export function vciDeferredParseApiFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<VciDeferredParseApiFormResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciDeferredParseApiFormResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciDeferredParseApiFormResponse' from JSON`,
  );
}
