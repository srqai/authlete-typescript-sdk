/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * An object containing schema data
 */
export type JoseVerifyApiRequestBody = {
  /**
   * A JOSE object.
   *
   * @remarks
   */
  jose: string;
  /**
   * Mandatory claims that are required to be included in the JOSE object.
   *
   * @remarks
   */
  mandatoryClaims?: string | undefined;
  /**
   * Allowable clock skew in seconds.
   *
   * @remarks
   */
  clockSkew?: number | undefined;
  /**
   * The identifier of the client application whose keys are required for verification of the JOSE
   *
   * @remarks
   * object.
   */
  clientIdentifier?: string | undefined;
  /**
   * The flag which indicates whether the signature of the JOSE object has been signed by a client
   *
   * @remarks
   * application with the client's private key or a shared symmetric key.
   */
  signedByClient?: boolean | undefined;
};

export type JoseVerifyApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody?: JoseVerifyApiRequestBody | undefined;
};

/**
 * An object containing schema data
 */
export type JoseVerifyApiResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The result of the verification on the JOSE object.
   *
   * @remarks
   */
  valid?: boolean | undefined;
  /**
   * The result of the signature verification.
   *
   * @remarks
   */
  signatureValid?: boolean | undefined;
  /**
   * The list of missing claims.
   *
   * @remarks
   */
  missingClaims?: Array<string> | undefined;
  /**
   * The list of invalid claims.
   *
   * @remarks
   */
  invalidClaims?: Array<string> | undefined;
  /**
   * The list of error messages.
   *
   * @remarks
   */
  errorDescriptions?: Array<string> | undefined;
};

/** @internal */
export const JoseVerifyApiRequestBody$inboundSchema: z.ZodType<
  JoseVerifyApiRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  jose: z.string(),
  mandatoryClaims: z.string().optional(),
  clockSkew: z.number().int().optional(),
  clientIdentifier: z.string().optional(),
  signedByClient: z.boolean().optional(),
});

/** @internal */
export type JoseVerifyApiRequestBody$Outbound = {
  jose: string;
  mandatoryClaims?: string | undefined;
  clockSkew?: number | undefined;
  clientIdentifier?: string | undefined;
  signedByClient?: boolean | undefined;
};

/** @internal */
export const JoseVerifyApiRequestBody$outboundSchema: z.ZodType<
  JoseVerifyApiRequestBody$Outbound,
  z.ZodTypeDef,
  JoseVerifyApiRequestBody
> = z.object({
  jose: z.string(),
  mandatoryClaims: z.string().optional(),
  clockSkew: z.number().int().optional(),
  clientIdentifier: z.string().optional(),
  signedByClient: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JoseVerifyApiRequestBody$ {
  /** @deprecated use `JoseVerifyApiRequestBody$inboundSchema` instead. */
  export const inboundSchema = JoseVerifyApiRequestBody$inboundSchema;
  /** @deprecated use `JoseVerifyApiRequestBody$outboundSchema` instead. */
  export const outboundSchema = JoseVerifyApiRequestBody$outboundSchema;
  /** @deprecated use `JoseVerifyApiRequestBody$Outbound` instead. */
  export type Outbound = JoseVerifyApiRequestBody$Outbound;
}

export function joseVerifyApiRequestBodyToJSON(
  joseVerifyApiRequestBody: JoseVerifyApiRequestBody,
): string {
  return JSON.stringify(
    JoseVerifyApiRequestBody$outboundSchema.parse(joseVerifyApiRequestBody),
  );
}

export function joseVerifyApiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<JoseVerifyApiRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JoseVerifyApiRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JoseVerifyApiRequestBody' from JSON`,
  );
}

/** @internal */
export const JoseVerifyApiRequest$inboundSchema: z.ZodType<
  JoseVerifyApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() => JoseVerifyApiRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type JoseVerifyApiRequest$Outbound = {
  serviceId: string;
  RequestBody?: JoseVerifyApiRequestBody$Outbound | undefined;
};

/** @internal */
export const JoseVerifyApiRequest$outboundSchema: z.ZodType<
  JoseVerifyApiRequest$Outbound,
  z.ZodTypeDef,
  JoseVerifyApiRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() => JoseVerifyApiRequestBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JoseVerifyApiRequest$ {
  /** @deprecated use `JoseVerifyApiRequest$inboundSchema` instead. */
  export const inboundSchema = JoseVerifyApiRequest$inboundSchema;
  /** @deprecated use `JoseVerifyApiRequest$outboundSchema` instead. */
  export const outboundSchema = JoseVerifyApiRequest$outboundSchema;
  /** @deprecated use `JoseVerifyApiRequest$Outbound` instead. */
  export type Outbound = JoseVerifyApiRequest$Outbound;
}

export function joseVerifyApiRequestToJSON(
  joseVerifyApiRequest: JoseVerifyApiRequest,
): string {
  return JSON.stringify(
    JoseVerifyApiRequest$outboundSchema.parse(joseVerifyApiRequest),
  );
}

export function joseVerifyApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<JoseVerifyApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JoseVerifyApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JoseVerifyApiRequest' from JSON`,
  );
}

/** @internal */
export const JoseVerifyApiResponse$inboundSchema: z.ZodType<
  JoseVerifyApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  valid: z.boolean().optional(),
  signatureValid: z.boolean().optional(),
  missingClaims: z.array(z.string()).optional(),
  invalidClaims: z.array(z.string()).optional(),
  errorDescriptions: z.array(z.string()).optional(),
});

/** @internal */
export type JoseVerifyApiResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  valid?: boolean | undefined;
  signatureValid?: boolean | undefined;
  missingClaims?: Array<string> | undefined;
  invalidClaims?: Array<string> | undefined;
  errorDescriptions?: Array<string> | undefined;
};

/** @internal */
export const JoseVerifyApiResponse$outboundSchema: z.ZodType<
  JoseVerifyApiResponse$Outbound,
  z.ZodTypeDef,
  JoseVerifyApiResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  valid: z.boolean().optional(),
  signatureValid: z.boolean().optional(),
  missingClaims: z.array(z.string()).optional(),
  invalidClaims: z.array(z.string()).optional(),
  errorDescriptions: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JoseVerifyApiResponse$ {
  /** @deprecated use `JoseVerifyApiResponse$inboundSchema` instead. */
  export const inboundSchema = JoseVerifyApiResponse$inboundSchema;
  /** @deprecated use `JoseVerifyApiResponse$outboundSchema` instead. */
  export const outboundSchema = JoseVerifyApiResponse$outboundSchema;
  /** @deprecated use `JoseVerifyApiResponse$Outbound` instead. */
  export type Outbound = JoseVerifyApiResponse$Outbound;
}

export function joseVerifyApiResponseToJSON(
  joseVerifyApiResponse: JoseVerifyApiResponse,
): string {
  return JSON.stringify(
    JoseVerifyApiResponse$outboundSchema.parse(joseVerifyApiResponse),
  );
}

export function joseVerifyApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<JoseVerifyApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JoseVerifyApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JoseVerifyApiResponse' from JSON`,
  );
}
