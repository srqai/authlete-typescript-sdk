/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type VciSingleParseApiFormRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  vciSingleParseRequest: models.VciSingleParseRequest;
};

/**
 * The next action that the credential endpoint should take.
 */
export const VciSingleParseApiFormAction = {
  Ok: "OK",
  BadRequest: "BAD_REQUEST",
  Unauthorized: "UNAUTHORIZED",
  Forbidden: "FORBIDDEN",
  InternalServerError: "INTERNAL_SERVER_ERROR",
} as const;
/**
 * The next action that the credential endpoint should take.
 */
export type VciSingleParseApiFormAction = ClosedEnum<
  typeof VciSingleParseApiFormAction
>;

/**
 * Successful operation
 */
export type VciSingleParseApiFormResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the credential endpoint should take.
   */
  action?: VciSingleParseApiFormAction | undefined;
  /**
   * The content of the response to the request sender.
   */
  responseContent?: string | undefined;
  info?: models.CredentialRequestInfo | undefined;
};

/** @internal */
export const VciSingleParseApiFormRequest$inboundSchema: z.ZodType<
  VciSingleParseApiFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  VciSingleParseRequest: models.VciSingleParseRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "VciSingleParseRequest": "vciSingleParseRequest",
  });
});

/** @internal */
export type VciSingleParseApiFormRequest$Outbound = {
  serviceId: string;
  VciSingleParseRequest: models.VciSingleParseRequest$Outbound;
};

/** @internal */
export const VciSingleParseApiFormRequest$outboundSchema: z.ZodType<
  VciSingleParseApiFormRequest$Outbound,
  z.ZodTypeDef,
  VciSingleParseApiFormRequest
> = z.object({
  serviceId: z.string(),
  vciSingleParseRequest: models.VciSingleParseRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    vciSingleParseRequest: "VciSingleParseRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciSingleParseApiFormRequest$ {
  /** @deprecated use `VciSingleParseApiFormRequest$inboundSchema` instead. */
  export const inboundSchema = VciSingleParseApiFormRequest$inboundSchema;
  /** @deprecated use `VciSingleParseApiFormRequest$outboundSchema` instead. */
  export const outboundSchema = VciSingleParseApiFormRequest$outboundSchema;
  /** @deprecated use `VciSingleParseApiFormRequest$Outbound` instead. */
  export type Outbound = VciSingleParseApiFormRequest$Outbound;
}

export function vciSingleParseApiFormRequestToJSON(
  vciSingleParseApiFormRequest: VciSingleParseApiFormRequest,
): string {
  return JSON.stringify(
    VciSingleParseApiFormRequest$outboundSchema.parse(
      vciSingleParseApiFormRequest,
    ),
  );
}

export function vciSingleParseApiFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<VciSingleParseApiFormRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciSingleParseApiFormRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciSingleParseApiFormRequest' from JSON`,
  );
}

/** @internal */
export const VciSingleParseApiFormAction$inboundSchema: z.ZodNativeEnum<
  typeof VciSingleParseApiFormAction
> = z.nativeEnum(VciSingleParseApiFormAction);

/** @internal */
export const VciSingleParseApiFormAction$outboundSchema: z.ZodNativeEnum<
  typeof VciSingleParseApiFormAction
> = VciSingleParseApiFormAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciSingleParseApiFormAction$ {
  /** @deprecated use `VciSingleParseApiFormAction$inboundSchema` instead. */
  export const inboundSchema = VciSingleParseApiFormAction$inboundSchema;
  /** @deprecated use `VciSingleParseApiFormAction$outboundSchema` instead. */
  export const outboundSchema = VciSingleParseApiFormAction$outboundSchema;
}

/** @internal */
export const VciSingleParseApiFormResponse$inboundSchema: z.ZodType<
  VciSingleParseApiFormResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciSingleParseApiFormAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
  info: models.CredentialRequestInfo$inboundSchema.optional(),
});

/** @internal */
export type VciSingleParseApiFormResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  info?: models.CredentialRequestInfo$Outbound | undefined;
};

/** @internal */
export const VciSingleParseApiFormResponse$outboundSchema: z.ZodType<
  VciSingleParseApiFormResponse$Outbound,
  z.ZodTypeDef,
  VciSingleParseApiFormResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciSingleParseApiFormAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
  info: models.CredentialRequestInfo$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciSingleParseApiFormResponse$ {
  /** @deprecated use `VciSingleParseApiFormResponse$inboundSchema` instead. */
  export const inboundSchema = VciSingleParseApiFormResponse$inboundSchema;
  /** @deprecated use `VciSingleParseApiFormResponse$outboundSchema` instead. */
  export const outboundSchema = VciSingleParseApiFormResponse$outboundSchema;
  /** @deprecated use `VciSingleParseApiFormResponse$Outbound` instead. */
  export type Outbound = VciSingleParseApiFormResponse$Outbound;
}

export function vciSingleParseApiFormResponseToJSON(
  vciSingleParseApiFormResponse: VciSingleParseApiFormResponse,
): string {
  return JSON.stringify(
    VciSingleParseApiFormResponse$outboundSchema.parse(
      vciSingleParseApiFormResponse,
    ),
  );
}

export function vciSingleParseApiFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<VciSingleParseApiFormResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciSingleParseApiFormResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciSingleParseApiFormResponse' from JSON`,
  );
}
