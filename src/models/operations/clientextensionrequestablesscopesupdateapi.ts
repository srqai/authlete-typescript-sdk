/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ClientExtensionRequestablesScopesUpdateApiRequestBody = {
  /**
   * The set of scopes that the client application is allowed to request.
   *
   * @remarks
   * This parameter will be one of the following. Details are described in the description.
   *
   * - an empty set
   * - a set with at least one element
   *
   * If this parameter contains scopes that the service does not support, those scopes are just
   * ignored. Also, if this parameter is `null` or is not included in the request, it is equivalent
   * to calling `/client/extension/requestable_scopes/delete` API.
   */
  requestableScopes?: Array<string> | undefined;
};

export type ClientExtensionRequestablesScopesUpdateApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  /**
   * A client ID.
   *
   * @remarks
   */
  clientId: string;
  requestBody: ClientExtensionRequestablesScopesUpdateApiRequestBody;
};

export type ClientExtensionRequestablesScopesUpdateApiResponse = {
  requestableScopes?: Array<string> | undefined;
};

/** @internal */
export const ClientExtensionRequestablesScopesUpdateApiRequestBody$inboundSchema:
  z.ZodType<
    ClientExtensionRequestablesScopesUpdateApiRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    requestableScopes: z.array(z.string()).optional(),
  });

/** @internal */
export type ClientExtensionRequestablesScopesUpdateApiRequestBody$Outbound = {
  requestableScopes?: Array<string> | undefined;
};

/** @internal */
export const ClientExtensionRequestablesScopesUpdateApiRequestBody$outboundSchema:
  z.ZodType<
    ClientExtensionRequestablesScopesUpdateApiRequestBody$Outbound,
    z.ZodTypeDef,
    ClientExtensionRequestablesScopesUpdateApiRequestBody
  > = z.object({
    requestableScopes: z.array(z.string()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientExtensionRequestablesScopesUpdateApiRequestBody$ {
  /** @deprecated use `ClientExtensionRequestablesScopesUpdateApiRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    ClientExtensionRequestablesScopesUpdateApiRequestBody$inboundSchema;
  /** @deprecated use `ClientExtensionRequestablesScopesUpdateApiRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    ClientExtensionRequestablesScopesUpdateApiRequestBody$outboundSchema;
  /** @deprecated use `ClientExtensionRequestablesScopesUpdateApiRequestBody$Outbound` instead. */
  export type Outbound =
    ClientExtensionRequestablesScopesUpdateApiRequestBody$Outbound;
}

export function clientExtensionRequestablesScopesUpdateApiRequestBodyToJSON(
  clientExtensionRequestablesScopesUpdateApiRequestBody:
    ClientExtensionRequestablesScopesUpdateApiRequestBody,
): string {
  return JSON.stringify(
    ClientExtensionRequestablesScopesUpdateApiRequestBody$outboundSchema.parse(
      clientExtensionRequestablesScopesUpdateApiRequestBody,
    ),
  );
}

export function clientExtensionRequestablesScopesUpdateApiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  ClientExtensionRequestablesScopesUpdateApiRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ClientExtensionRequestablesScopesUpdateApiRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ClientExtensionRequestablesScopesUpdateApiRequestBody' from JSON`,
  );
}

/** @internal */
export const ClientExtensionRequestablesScopesUpdateApiRequest$inboundSchema:
  z.ZodType<
    ClientExtensionRequestablesScopesUpdateApiRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    serviceId: z.string(),
    clientId: z.string(),
    RequestBody: z.lazy(() =>
      ClientExtensionRequestablesScopesUpdateApiRequestBody$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "RequestBody": "requestBody",
    });
  });

/** @internal */
export type ClientExtensionRequestablesScopesUpdateApiRequest$Outbound = {
  serviceId: string;
  clientId: string;
  RequestBody: ClientExtensionRequestablesScopesUpdateApiRequestBody$Outbound;
};

/** @internal */
export const ClientExtensionRequestablesScopesUpdateApiRequest$outboundSchema:
  z.ZodType<
    ClientExtensionRequestablesScopesUpdateApiRequest$Outbound,
    z.ZodTypeDef,
    ClientExtensionRequestablesScopesUpdateApiRequest
  > = z.object({
    serviceId: z.string(),
    clientId: z.string(),
    requestBody: z.lazy(() =>
      ClientExtensionRequestablesScopesUpdateApiRequestBody$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientExtensionRequestablesScopesUpdateApiRequest$ {
  /** @deprecated use `ClientExtensionRequestablesScopesUpdateApiRequest$inboundSchema` instead. */
  export const inboundSchema =
    ClientExtensionRequestablesScopesUpdateApiRequest$inboundSchema;
  /** @deprecated use `ClientExtensionRequestablesScopesUpdateApiRequest$outboundSchema` instead. */
  export const outboundSchema =
    ClientExtensionRequestablesScopesUpdateApiRequest$outboundSchema;
  /** @deprecated use `ClientExtensionRequestablesScopesUpdateApiRequest$Outbound` instead. */
  export type Outbound =
    ClientExtensionRequestablesScopesUpdateApiRequest$Outbound;
}

export function clientExtensionRequestablesScopesUpdateApiRequestToJSON(
  clientExtensionRequestablesScopesUpdateApiRequest:
    ClientExtensionRequestablesScopesUpdateApiRequest,
): string {
  return JSON.stringify(
    ClientExtensionRequestablesScopesUpdateApiRequest$outboundSchema.parse(
      clientExtensionRequestablesScopesUpdateApiRequest,
    ),
  );
}

export function clientExtensionRequestablesScopesUpdateApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  ClientExtensionRequestablesScopesUpdateApiRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ClientExtensionRequestablesScopesUpdateApiRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ClientExtensionRequestablesScopesUpdateApiRequest' from JSON`,
  );
}

/** @internal */
export const ClientExtensionRequestablesScopesUpdateApiResponse$inboundSchema:
  z.ZodType<
    ClientExtensionRequestablesScopesUpdateApiResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    requestableScopes: z.array(z.string()).optional(),
  });

/** @internal */
export type ClientExtensionRequestablesScopesUpdateApiResponse$Outbound = {
  requestableScopes?: Array<string> | undefined;
};

/** @internal */
export const ClientExtensionRequestablesScopesUpdateApiResponse$outboundSchema:
  z.ZodType<
    ClientExtensionRequestablesScopesUpdateApiResponse$Outbound,
    z.ZodTypeDef,
    ClientExtensionRequestablesScopesUpdateApiResponse
  > = z.object({
    requestableScopes: z.array(z.string()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientExtensionRequestablesScopesUpdateApiResponse$ {
  /** @deprecated use `ClientExtensionRequestablesScopesUpdateApiResponse$inboundSchema` instead. */
  export const inboundSchema =
    ClientExtensionRequestablesScopesUpdateApiResponse$inboundSchema;
  /** @deprecated use `ClientExtensionRequestablesScopesUpdateApiResponse$outboundSchema` instead. */
  export const outboundSchema =
    ClientExtensionRequestablesScopesUpdateApiResponse$outboundSchema;
  /** @deprecated use `ClientExtensionRequestablesScopesUpdateApiResponse$Outbound` instead. */
  export type Outbound =
    ClientExtensionRequestablesScopesUpdateApiResponse$Outbound;
}

export function clientExtensionRequestablesScopesUpdateApiResponseToJSON(
  clientExtensionRequestablesScopesUpdateApiResponse:
    ClientExtensionRequestablesScopesUpdateApiResponse,
): string {
  return JSON.stringify(
    ClientExtensionRequestablesScopesUpdateApiResponse$outboundSchema.parse(
      clientExtensionRequestablesScopesUpdateApiResponse,
    ),
  );
}

export function clientExtensionRequestablesScopesUpdateApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  ClientExtensionRequestablesScopesUpdateApiResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ClientExtensionRequestablesScopesUpdateApiResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ClientExtensionRequestablesScopesUpdateApiResponse' from JSON`,
  );
}
