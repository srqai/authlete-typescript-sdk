/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type BackchannelAuthenticationCompleteApiFormRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  apiServiceIdBackchannelAuthenticationComplete:
    models.ApiServiceIdBackchannelAuthenticationComplete;
};

/**
 * The next action that the authorization server implementation should take.
 *
 * @remarks
 */
export const BackchannelAuthenticationCompleteApiFormAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Created: "CREATED",
  Unauthorized: "UNAUTHORIZED",
  Forbidden: "FORBIDDEN",
  Json: "JSON",
  Jwt: "JWT",
  Ok: "OK",
} as const;
/**
 * The next action that the authorization server implementation should take.
 *
 * @remarks
 */
export type BackchannelAuthenticationCompleteApiFormAction = ClosedEnum<
  typeof BackchannelAuthenticationCompleteApiFormAction
>;

/**
 * An object containing schema data
 */
export type BackchannelAuthenticationCompleteApiFormResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   *
   * @remarks
   */
  action?: BackchannelAuthenticationCompleteApiFormAction | undefined;
  /**
   * The content that the authorization server implementation is to return to the client
   *
   * @remarks
   * application. Its format varies depending on the value of `action` parameter.
   */
  responseContent?: string | undefined;
  /**
   * The client ID of the client application that has made the backchannel authentication
   *
   * @remarks
   * request.
   */
  clientId?: number | undefined;
  /**
   * The client ID alias of the client application that has made the backchannel authentication
   *
   * @remarks
   * request.
   */
  clientIdAlias?: string | undefined;
  /**
   * `true` if the value of the client_id request parameter included in the backchannel
   *
   * @remarks
   * authentication request is the client ID alias. `false` if the value is the original
   * numeric client ID.
   */
  clientIdAliasUsed?: boolean | undefined;
  /**
   * The name of the client application which has made the backchannel authentication request.
   *
   * @remarks
   */
  clientName?: string | undefined;
  /**
   * A string value
   */
  deliveryMode?: models.DeliveryMode | undefined;
  /**
   * The client notification endpoint to which a notification needs to be sent. This corresponds
   *
   * @remarks
   * to the `client_notification_endpoint` metadata of the client application.
   */
  clientNotificationEndpoint?: string | undefined;
  /**
   * The client notification token which needs to be embedded as a Bearer token in the Authorization
   *
   * @remarks
   * header in the notification. This is the value of the `client_notification_token` request
   * parameter included in the backchannel authentication request.
   */
  clientNotificationToken?: string | undefined;
  /**
   * The newly issued authentication request ID.
   *
   * @remarks
   */
  authReqId?: string | undefined;
  /**
   * The issued access token.
   *
   * @remarks
   */
  accessToken?: string | undefined;
  /**
   * The issued refresh token.
   *
   * @remarks
   */
  refreshToken?: string | undefined;
  /**
   * The issued ID token.
   *
   * @remarks
   */
  idToken?: string | undefined;
  /**
   * The duration of the access token in seconds.
   *
   * @remarks
   */
  accessTokenDuration?: number | undefined;
  /**
   * The duration of the refresh token in seconds.
   *
   * @remarks
   */
  refreshTokenDuration?: number | undefined;
  /**
   * The duration of the ID token in seconds.
   *
   * @remarks
   */
  idTokenDuration?: number | undefined;
  /**
   * The issued access token in JWT format.
   *
   * @remarks
   */
  jwtAccessToken?: string | undefined;
  /**
   * The resources specified by the `resource` request parameters or by the `resource` property
   *
   * @remarks
   * in the request object. If both are given, the values in the request object should be
   * set. See "Resource Indicators for OAuth 2.0" for details.
   */
  resources?: Array<string> | undefined;
  /**
   * The authorization details. This represents the value of the `authorization_details`
   *
   * @remarks
   * request parameter in the preceding device authorization request which is defined in
   * "OAuth 2.0 Rich Authorization Requests".
   */
  authorizationDetails?: models.AuthorizationDetails | undefined;
  /**
   * The attributes of this service that the client application belongs to.
   *
   * @remarks
   */
  serviceAttributes?: Array<models.Pair> | undefined;
  /**
   * The attributes of the client.
   *
   * @remarks
   */
  clientAttributes?: Array<models.Pair> | undefined;
  /**
   * the value of the `grant_id` request parameter of the device authorization request.
   *
   * @remarks
   *
   * The `grant_id` request parameter is defined in
   * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
   * , which is supported by Authlete 2.3 and newer versions.
   */
  grantId?: string | undefined;
  /**
   * The entity ID of the client.
   *
   * @remarks
   */
  clientEntityId?: string | undefined;
  /**
   * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
   *
   * @remarks
   */
  clientEntityIdUsed?: boolean | undefined;
};

/** @internal */
export const BackchannelAuthenticationCompleteApiFormRequest$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationCompleteApiFormRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    serviceId: z.string(),
    api_serviceId_backchannel_authentication_complete:
      models.ApiServiceIdBackchannelAuthenticationComplete$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "api_serviceId_backchannel_authentication_complete":
        "apiServiceIdBackchannelAuthenticationComplete",
    });
  });

/** @internal */
export type BackchannelAuthenticationCompleteApiFormRequest$Outbound = {
  serviceId: string;
  api_serviceId_backchannel_authentication_complete:
    models.ApiServiceIdBackchannelAuthenticationComplete$Outbound;
};

/** @internal */
export const BackchannelAuthenticationCompleteApiFormRequest$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationCompleteApiFormRequest$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationCompleteApiFormRequest
  > = z.object({
    serviceId: z.string(),
    apiServiceIdBackchannelAuthenticationComplete:
      models.ApiServiceIdBackchannelAuthenticationComplete$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      apiServiceIdBackchannelAuthenticationComplete:
        "api_serviceId_backchannel_authentication_complete",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationCompleteApiFormRequest$ {
  /** @deprecated use `BackchannelAuthenticationCompleteApiFormRequest$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationCompleteApiFormRequest$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationCompleteApiFormRequest$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationCompleteApiFormRequest$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationCompleteApiFormRequest$Outbound` instead. */
  export type Outbound =
    BackchannelAuthenticationCompleteApiFormRequest$Outbound;
}

export function backchannelAuthenticationCompleteApiFormRequestToJSON(
  backchannelAuthenticationCompleteApiFormRequest:
    BackchannelAuthenticationCompleteApiFormRequest,
): string {
  return JSON.stringify(
    BackchannelAuthenticationCompleteApiFormRequest$outboundSchema.parse(
      backchannelAuthenticationCompleteApiFormRequest,
    ),
  );
}

export function backchannelAuthenticationCompleteApiFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  BackchannelAuthenticationCompleteApiFormRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationCompleteApiFormRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BackchannelAuthenticationCompleteApiFormRequest' from JSON`,
  );
}

/** @internal */
export const BackchannelAuthenticationCompleteApiFormAction$inboundSchema:
  z.ZodNativeEnum<typeof BackchannelAuthenticationCompleteApiFormAction> = z
    .nativeEnum(BackchannelAuthenticationCompleteApiFormAction);

/** @internal */
export const BackchannelAuthenticationCompleteApiFormAction$outboundSchema:
  z.ZodNativeEnum<typeof BackchannelAuthenticationCompleteApiFormAction> =
    BackchannelAuthenticationCompleteApiFormAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationCompleteApiFormAction$ {
  /** @deprecated use `BackchannelAuthenticationCompleteApiFormAction$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationCompleteApiFormAction$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationCompleteApiFormAction$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationCompleteApiFormAction$outboundSchema;
}

/** @internal */
export const BackchannelAuthenticationCompleteApiFormResponse$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationCompleteApiFormResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
    action: BackchannelAuthenticationCompleteApiFormAction$inboundSchema
      .optional(),
    responseContent: z.string().optional(),
    clientId: z.number().int().optional(),
    clientIdAlias: z.string().optional(),
    clientIdAliasUsed: z.boolean().optional(),
    clientName: z.string().optional(),
    deliveryMode: models.DeliveryMode$inboundSchema.optional(),
    clientNotificationEndpoint: z.string().optional(),
    clientNotificationToken: z.string().optional(),
    authReqId: z.string().optional(),
    accessToken: z.string().optional(),
    refreshToken: z.string().optional(),
    idToken: z.string().optional(),
    accessTokenDuration: z.number().int().optional(),
    refreshTokenDuration: z.number().int().optional(),
    idTokenDuration: z.number().int().optional(),
    jwtAccessToken: z.string().optional(),
    resources: z.array(z.string()).optional(),
    authorizationDetails: models.AuthorizationDetails$inboundSchema.optional(),
    serviceAttributes: z.array(models.Pair$inboundSchema).optional(),
    clientAttributes: z.array(models.Pair$inboundSchema).optional(),
    grantId: z.string().optional(),
    clientEntityId: z.string().optional(),
    clientEntityIdUsed: z.boolean().optional(),
  });

/** @internal */
export type BackchannelAuthenticationCompleteApiFormResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  clientId?: number | undefined;
  clientIdAlias?: string | undefined;
  clientIdAliasUsed?: boolean | undefined;
  clientName?: string | undefined;
  deliveryMode?: string | undefined;
  clientNotificationEndpoint?: string | undefined;
  clientNotificationToken?: string | undefined;
  authReqId?: string | undefined;
  accessToken?: string | undefined;
  refreshToken?: string | undefined;
  idToken?: string | undefined;
  accessTokenDuration?: number | undefined;
  refreshTokenDuration?: number | undefined;
  idTokenDuration?: number | undefined;
  jwtAccessToken?: string | undefined;
  resources?: Array<string> | undefined;
  authorizationDetails?: models.AuthorizationDetails$Outbound | undefined;
  serviceAttributes?: Array<models.Pair$Outbound> | undefined;
  clientAttributes?: Array<models.Pair$Outbound> | undefined;
  grantId?: string | undefined;
  clientEntityId?: string | undefined;
  clientEntityIdUsed?: boolean | undefined;
};

/** @internal */
export const BackchannelAuthenticationCompleteApiFormResponse$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationCompleteApiFormResponse$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationCompleteApiFormResponse
  > = z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
    action: BackchannelAuthenticationCompleteApiFormAction$outboundSchema
      .optional(),
    responseContent: z.string().optional(),
    clientId: z.number().int().optional(),
    clientIdAlias: z.string().optional(),
    clientIdAliasUsed: z.boolean().optional(),
    clientName: z.string().optional(),
    deliveryMode: models.DeliveryMode$outboundSchema.optional(),
    clientNotificationEndpoint: z.string().optional(),
    clientNotificationToken: z.string().optional(),
    authReqId: z.string().optional(),
    accessToken: z.string().optional(),
    refreshToken: z.string().optional(),
    idToken: z.string().optional(),
    accessTokenDuration: z.number().int().optional(),
    refreshTokenDuration: z.number().int().optional(),
    idTokenDuration: z.number().int().optional(),
    jwtAccessToken: z.string().optional(),
    resources: z.array(z.string()).optional(),
    authorizationDetails: models.AuthorizationDetails$outboundSchema.optional(),
    serviceAttributes: z.array(models.Pair$outboundSchema).optional(),
    clientAttributes: z.array(models.Pair$outboundSchema).optional(),
    grantId: z.string().optional(),
    clientEntityId: z.string().optional(),
    clientEntityIdUsed: z.boolean().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationCompleteApiFormResponse$ {
  /** @deprecated use `BackchannelAuthenticationCompleteApiFormResponse$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationCompleteApiFormResponse$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationCompleteApiFormResponse$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationCompleteApiFormResponse$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationCompleteApiFormResponse$Outbound` instead. */
  export type Outbound =
    BackchannelAuthenticationCompleteApiFormResponse$Outbound;
}

export function backchannelAuthenticationCompleteApiFormResponseToJSON(
  backchannelAuthenticationCompleteApiFormResponse:
    BackchannelAuthenticationCompleteApiFormResponse,
): string {
  return JSON.stringify(
    BackchannelAuthenticationCompleteApiFormResponse$outboundSchema.parse(
      backchannelAuthenticationCompleteApiFormResponse,
    ),
  );
}

export function backchannelAuthenticationCompleteApiFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  BackchannelAuthenticationCompleteApiFormResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationCompleteApiFormResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BackchannelAuthenticationCompleteApiFormResponse' from JSON`,
  );
}
