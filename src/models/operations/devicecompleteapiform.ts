/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type DeviceCompleteApiFormRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  apiServiceIdDeviceComplete: models.ApiServiceIdDeviceComplete;
};

/**
 * The next action that the authorization server implementation should take.
 *
 * @remarks
 */
export const DeviceCompleteApiFormAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Created: "CREATED",
  Unauthorized: "UNAUTHORIZED",
  Forbidden: "FORBIDDEN",
  Json: "JSON",
  Jwt: "JWT",
  Ok: "OK",
} as const;
/**
 * The next action that the authorization server implementation should take.
 *
 * @remarks
 */
export type DeviceCompleteApiFormAction = ClosedEnum<
  typeof DeviceCompleteApiFormAction
>;

/**
 * An object containing schema data
 */
export type DeviceCompleteApiFormResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   *
   * @remarks
   */
  action?: DeviceCompleteApiFormAction | undefined;
};

/** @internal */
export const DeviceCompleteApiFormRequest$inboundSchema: z.ZodType<
  DeviceCompleteApiFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  api_serviceId_device_complete:
    models.ApiServiceIdDeviceComplete$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "api_serviceId_device_complete": "apiServiceIdDeviceComplete",
  });
});

/** @internal */
export type DeviceCompleteApiFormRequest$Outbound = {
  serviceId: string;
  api_serviceId_device_complete: models.ApiServiceIdDeviceComplete$Outbound;
};

/** @internal */
export const DeviceCompleteApiFormRequest$outboundSchema: z.ZodType<
  DeviceCompleteApiFormRequest$Outbound,
  z.ZodTypeDef,
  DeviceCompleteApiFormRequest
> = z.object({
  serviceId: z.string(),
  apiServiceIdDeviceComplete: models.ApiServiceIdDeviceComplete$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    apiServiceIdDeviceComplete: "api_serviceId_device_complete",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceCompleteApiFormRequest$ {
  /** @deprecated use `DeviceCompleteApiFormRequest$inboundSchema` instead. */
  export const inboundSchema = DeviceCompleteApiFormRequest$inboundSchema;
  /** @deprecated use `DeviceCompleteApiFormRequest$outboundSchema` instead. */
  export const outboundSchema = DeviceCompleteApiFormRequest$outboundSchema;
  /** @deprecated use `DeviceCompleteApiFormRequest$Outbound` instead. */
  export type Outbound = DeviceCompleteApiFormRequest$Outbound;
}

export function deviceCompleteApiFormRequestToJSON(
  deviceCompleteApiFormRequest: DeviceCompleteApiFormRequest,
): string {
  return JSON.stringify(
    DeviceCompleteApiFormRequest$outboundSchema.parse(
      deviceCompleteApiFormRequest,
    ),
  );
}

export function deviceCompleteApiFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeviceCompleteApiFormRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeviceCompleteApiFormRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceCompleteApiFormRequest' from JSON`,
  );
}

/** @internal */
export const DeviceCompleteApiFormAction$inboundSchema: z.ZodNativeEnum<
  typeof DeviceCompleteApiFormAction
> = z.nativeEnum(DeviceCompleteApiFormAction);

/** @internal */
export const DeviceCompleteApiFormAction$outboundSchema: z.ZodNativeEnum<
  typeof DeviceCompleteApiFormAction
> = DeviceCompleteApiFormAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceCompleteApiFormAction$ {
  /** @deprecated use `DeviceCompleteApiFormAction$inboundSchema` instead. */
  export const inboundSchema = DeviceCompleteApiFormAction$inboundSchema;
  /** @deprecated use `DeviceCompleteApiFormAction$outboundSchema` instead. */
  export const outboundSchema = DeviceCompleteApiFormAction$outboundSchema;
}

/** @internal */
export const DeviceCompleteApiFormResponse$inboundSchema: z.ZodType<
  DeviceCompleteApiFormResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: DeviceCompleteApiFormAction$inboundSchema.optional(),
});

/** @internal */
export type DeviceCompleteApiFormResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
};

/** @internal */
export const DeviceCompleteApiFormResponse$outboundSchema: z.ZodType<
  DeviceCompleteApiFormResponse$Outbound,
  z.ZodTypeDef,
  DeviceCompleteApiFormResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: DeviceCompleteApiFormAction$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceCompleteApiFormResponse$ {
  /** @deprecated use `DeviceCompleteApiFormResponse$inboundSchema` instead. */
  export const inboundSchema = DeviceCompleteApiFormResponse$inboundSchema;
  /** @deprecated use `DeviceCompleteApiFormResponse$outboundSchema` instead. */
  export const outboundSchema = DeviceCompleteApiFormResponse$outboundSchema;
  /** @deprecated use `DeviceCompleteApiFormResponse$Outbound` instead. */
  export type Outbound = DeviceCompleteApiFormResponse$Outbound;
}

export function deviceCompleteApiFormResponseToJSON(
  deviceCompleteApiFormResponse: DeviceCompleteApiFormResponse,
): string {
  return JSON.stringify(
    DeviceCompleteApiFormResponse$outboundSchema.parse(
      deviceCompleteApiFormResponse,
    ),
  );
}

export function deviceCompleteApiFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeviceCompleteApiFormResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeviceCompleteApiFormResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceCompleteApiFormResponse' from JSON`,
  );
}
