/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * An object containing schema data
 */
export type PushedAuthReqApiRequestBody = {
  /**
   * The pushed authorization request body received from the client application.
   *
   * @remarks
   *
   * The value of parameters is the entire entity body (which is formatted in `application/x-www-form-urlencoded`) of the request from
   * the client application.
   */
  parameters: string;
  /**
   * The client ID extracted from `Authorization` header of the pushed request from the client application.
   *
   * @remarks
   */
  clientId?: number | undefined;
  /**
   * The client secret extracted from `Authorization` header of the pushed authorization request from the client application.
   *
   * @remarks
   */
  clientSecret?: string | undefined;
  /**
   * The client certificate from the MTLS connection to pushed authorization endpoint from the client application.
   */
  clientCertificate?: string | undefined;
  /**
   * The certificate path presented by the client during client authentication. These certificates are strings in PEM format.
   *
   * @remarks
   */
  clientCertificatePath?: string | undefined;
  /**
   * DPoP Header
   *
   * @remarks
   */
  dpop?: string | undefined;
  /**
   * HTTP Method (for DPoP validation).
   *
   * @remarks
   */
  htm?: string | undefined;
  /**
   * HTTP URL base (for DPoP validation).
   *
   * @remarks
   */
  htu?: string | undefined;
};

export type PushedAuthReqApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: PushedAuthReqApiRequestBody;
};

/**
 * The next action that the authorization server implementation should take. Any other value other than "CREATED" should be handled as unsuccessful result.
 */
export const PushedAuthReqApiAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Created: "CREATED",
  Unauthorized: "UNAUTHORIZED",
  Forbidden: "FORBIDDEN",
  Json: "JSON",
  Jwt: "JWT",
  Ok: "OK",
} as const;
/**
 * The next action that the authorization server implementation should take. Any other value other than "CREATED" should be handled as unsuccessful result.
 */
export type PushedAuthReqApiAction = ClosedEnum<typeof PushedAuthReqApiAction>;

/**
 * The client authentication method that the client application declares that it uses at the token
 *
 * @remarks
 * endpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic
 * Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
 */
export const PushedAuthReqApiClientAuthMethod = {
  None: "NONE",
  ClientSecretBasic: "CLIENT_SECRET_BASIC",
  ClientSecretPost: "CLIENT_SECRET_POST",
  ClientSecretJwt: "CLIENT_SECRET_JWT",
  PrivateKeyJwt: "PRIVATE_KEY_JWT",
  TlsClientAuth: "TLS_CLIENT_AUTH",
  SelfSignedTlsClientAuth: "SELF_SIGNED_TLS_CLIENT_AUTH",
} as const;
/**
 * The client authentication method that the client application declares that it uses at the token
 *
 * @remarks
 * endpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic
 * Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
 */
export type PushedAuthReqApiClientAuthMethod = ClosedEnum<
  typeof PushedAuthReqApiClientAuthMethod
>;

/**
 * An object containing schema data
 */
export type PushedAuthReqApiResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take. Any other value other than "CREATED" should be handled as unsuccessful result.
   */
  action?: PushedAuthReqApiAction | undefined;
  /**
   * The request_uri created to the client to be used as request_uri on the authorize call.
   *
   * @remarks
   */
  requestUri?: string | undefined;
  /**
   * The content that the authorization server implementation is to return to the client
   *
   * @remarks
   * application.
   */
  responseContent?: string | undefined;
  /**
   * The client authentication method that the client application declares that it uses at the token
   *
   * @remarks
   * endpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic
   * Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  clientAuthMethod?: PushedAuthReqApiClientAuthMethod | undefined;
  /**
   * Get the expected nonce value for DPoP proof JWT, which should be used
   *
   * @remarks
   * as the value of the `DPoP-Nonce` HTTP header.
   */
  dpopNonce?: string | undefined;
};

/** @internal */
export const PushedAuthReqApiRequestBody$inboundSchema: z.ZodType<
  PushedAuthReqApiRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  parameters: z.string(),
  clientId: z.number().int().optional(),
  clientSecret: z.string().optional(),
  clientCertificate: z.string().optional(),
  clientCertificatePath: z.string().optional(),
  dpop: z.string().optional(),
  htm: z.string().optional(),
  htu: z.string().optional(),
});

/** @internal */
export type PushedAuthReqApiRequestBody$Outbound = {
  parameters: string;
  clientId?: number | undefined;
  clientSecret?: string | undefined;
  clientCertificate?: string | undefined;
  clientCertificatePath?: string | undefined;
  dpop?: string | undefined;
  htm?: string | undefined;
  htu?: string | undefined;
};

/** @internal */
export const PushedAuthReqApiRequestBody$outboundSchema: z.ZodType<
  PushedAuthReqApiRequestBody$Outbound,
  z.ZodTypeDef,
  PushedAuthReqApiRequestBody
> = z.object({
  parameters: z.string(),
  clientId: z.number().int().optional(),
  clientSecret: z.string().optional(),
  clientCertificate: z.string().optional(),
  clientCertificatePath: z.string().optional(),
  dpop: z.string().optional(),
  htm: z.string().optional(),
  htu: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PushedAuthReqApiRequestBody$ {
  /** @deprecated use `PushedAuthReqApiRequestBody$inboundSchema` instead. */
  export const inboundSchema = PushedAuthReqApiRequestBody$inboundSchema;
  /** @deprecated use `PushedAuthReqApiRequestBody$outboundSchema` instead. */
  export const outboundSchema = PushedAuthReqApiRequestBody$outboundSchema;
  /** @deprecated use `PushedAuthReqApiRequestBody$Outbound` instead. */
  export type Outbound = PushedAuthReqApiRequestBody$Outbound;
}

export function pushedAuthReqApiRequestBodyToJSON(
  pushedAuthReqApiRequestBody: PushedAuthReqApiRequestBody,
): string {
  return JSON.stringify(
    PushedAuthReqApiRequestBody$outboundSchema.parse(
      pushedAuthReqApiRequestBody,
    ),
  );
}

export function pushedAuthReqApiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PushedAuthReqApiRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PushedAuthReqApiRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PushedAuthReqApiRequestBody' from JSON`,
  );
}

/** @internal */
export const PushedAuthReqApiRequest$inboundSchema: z.ZodType<
  PushedAuthReqApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() => PushedAuthReqApiRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PushedAuthReqApiRequest$Outbound = {
  serviceId: string;
  RequestBody: PushedAuthReqApiRequestBody$Outbound;
};

/** @internal */
export const PushedAuthReqApiRequest$outboundSchema: z.ZodType<
  PushedAuthReqApiRequest$Outbound,
  z.ZodTypeDef,
  PushedAuthReqApiRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() => PushedAuthReqApiRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PushedAuthReqApiRequest$ {
  /** @deprecated use `PushedAuthReqApiRequest$inboundSchema` instead. */
  export const inboundSchema = PushedAuthReqApiRequest$inboundSchema;
  /** @deprecated use `PushedAuthReqApiRequest$outboundSchema` instead. */
  export const outboundSchema = PushedAuthReqApiRequest$outboundSchema;
  /** @deprecated use `PushedAuthReqApiRequest$Outbound` instead. */
  export type Outbound = PushedAuthReqApiRequest$Outbound;
}

export function pushedAuthReqApiRequestToJSON(
  pushedAuthReqApiRequest: PushedAuthReqApiRequest,
): string {
  return JSON.stringify(
    PushedAuthReqApiRequest$outboundSchema.parse(pushedAuthReqApiRequest),
  );
}

export function pushedAuthReqApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<PushedAuthReqApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PushedAuthReqApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PushedAuthReqApiRequest' from JSON`,
  );
}

/** @internal */
export const PushedAuthReqApiAction$inboundSchema: z.ZodNativeEnum<
  typeof PushedAuthReqApiAction
> = z.nativeEnum(PushedAuthReqApiAction);

/** @internal */
export const PushedAuthReqApiAction$outboundSchema: z.ZodNativeEnum<
  typeof PushedAuthReqApiAction
> = PushedAuthReqApiAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PushedAuthReqApiAction$ {
  /** @deprecated use `PushedAuthReqApiAction$inboundSchema` instead. */
  export const inboundSchema = PushedAuthReqApiAction$inboundSchema;
  /** @deprecated use `PushedAuthReqApiAction$outboundSchema` instead. */
  export const outboundSchema = PushedAuthReqApiAction$outboundSchema;
}

/** @internal */
export const PushedAuthReqApiClientAuthMethod$inboundSchema: z.ZodNativeEnum<
  typeof PushedAuthReqApiClientAuthMethod
> = z.nativeEnum(PushedAuthReqApiClientAuthMethod);

/** @internal */
export const PushedAuthReqApiClientAuthMethod$outboundSchema: z.ZodNativeEnum<
  typeof PushedAuthReqApiClientAuthMethod
> = PushedAuthReqApiClientAuthMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PushedAuthReqApiClientAuthMethod$ {
  /** @deprecated use `PushedAuthReqApiClientAuthMethod$inboundSchema` instead. */
  export const inboundSchema = PushedAuthReqApiClientAuthMethod$inboundSchema;
  /** @deprecated use `PushedAuthReqApiClientAuthMethod$outboundSchema` instead. */
  export const outboundSchema = PushedAuthReqApiClientAuthMethod$outboundSchema;
}

/** @internal */
export const PushedAuthReqApiResponse$inboundSchema: z.ZodType<
  PushedAuthReqApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: PushedAuthReqApiAction$inboundSchema.optional(),
  requestUri: z.string().optional(),
  responseContent: z.string().optional(),
  clientAuthMethod: PushedAuthReqApiClientAuthMethod$inboundSchema.optional(),
  dpopNonce: z.string().optional(),
});

/** @internal */
export type PushedAuthReqApiResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  requestUri?: string | undefined;
  responseContent?: string | undefined;
  clientAuthMethod?: string | undefined;
  dpopNonce?: string | undefined;
};

/** @internal */
export const PushedAuthReqApiResponse$outboundSchema: z.ZodType<
  PushedAuthReqApiResponse$Outbound,
  z.ZodTypeDef,
  PushedAuthReqApiResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: PushedAuthReqApiAction$outboundSchema.optional(),
  requestUri: z.string().optional(),
  responseContent: z.string().optional(),
  clientAuthMethod: PushedAuthReqApiClientAuthMethod$outboundSchema.optional(),
  dpopNonce: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PushedAuthReqApiResponse$ {
  /** @deprecated use `PushedAuthReqApiResponse$inboundSchema` instead. */
  export const inboundSchema = PushedAuthReqApiResponse$inboundSchema;
  /** @deprecated use `PushedAuthReqApiResponse$outboundSchema` instead. */
  export const outboundSchema = PushedAuthReqApiResponse$outboundSchema;
  /** @deprecated use `PushedAuthReqApiResponse$Outbound` instead. */
  export type Outbound = PushedAuthReqApiResponse$Outbound;
}

export function pushedAuthReqApiResponseToJSON(
  pushedAuthReqApiResponse: PushedAuthReqApiResponse,
): string {
  return JSON.stringify(
    PushedAuthReqApiResponse$outboundSchema.parse(pushedAuthReqApiResponse),
  );
}

export function pushedAuthReqApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<PushedAuthReqApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PushedAuthReqApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PushedAuthReqApiResponse' from JSON`,
  );
}
