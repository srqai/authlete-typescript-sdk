/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ClientFlagUpdateApiFormRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  /**
   * A client ID.
   */
  clientIdentifier: string;
  apiServiceIdClientLockFlagUpdateClientIdenti?:
    | models.ApiServiceIdClientLockFlagUpdateClientIdenti
    | undefined;
};

/**
 * An object containing schema data
 */
export type ClientFlagUpdateApiFormResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode: string;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage: string;
};

/** @internal */
export const ClientFlagUpdateApiFormRequest$inboundSchema: z.ZodType<
  ClientFlagUpdateApiFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  clientIdentifier: z.string(),
  api_serviceId_client_lock_flag_update_clientIdenti: models
    .ApiServiceIdClientLockFlagUpdateClientIdenti$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "api_serviceId_client_lock_flag_update_clientIdenti":
      "apiServiceIdClientLockFlagUpdateClientIdenti",
  });
});

/** @internal */
export type ClientFlagUpdateApiFormRequest$Outbound = {
  serviceId: string;
  clientIdentifier: string;
  api_serviceId_client_lock_flag_update_clientIdenti?:
    | models.ApiServiceIdClientLockFlagUpdateClientIdenti$Outbound
    | undefined;
};

/** @internal */
export const ClientFlagUpdateApiFormRequest$outboundSchema: z.ZodType<
  ClientFlagUpdateApiFormRequest$Outbound,
  z.ZodTypeDef,
  ClientFlagUpdateApiFormRequest
> = z.object({
  serviceId: z.string(),
  clientIdentifier: z.string(),
  apiServiceIdClientLockFlagUpdateClientIdenti: models
    .ApiServiceIdClientLockFlagUpdateClientIdenti$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    apiServiceIdClientLockFlagUpdateClientIdenti:
      "api_serviceId_client_lock_flag_update_clientIdenti",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientFlagUpdateApiFormRequest$ {
  /** @deprecated use `ClientFlagUpdateApiFormRequest$inboundSchema` instead. */
  export const inboundSchema = ClientFlagUpdateApiFormRequest$inboundSchema;
  /** @deprecated use `ClientFlagUpdateApiFormRequest$outboundSchema` instead. */
  export const outboundSchema = ClientFlagUpdateApiFormRequest$outboundSchema;
  /** @deprecated use `ClientFlagUpdateApiFormRequest$Outbound` instead. */
  export type Outbound = ClientFlagUpdateApiFormRequest$Outbound;
}

export function clientFlagUpdateApiFormRequestToJSON(
  clientFlagUpdateApiFormRequest: ClientFlagUpdateApiFormRequest,
): string {
  return JSON.stringify(
    ClientFlagUpdateApiFormRequest$outboundSchema.parse(
      clientFlagUpdateApiFormRequest,
    ),
  );
}

export function clientFlagUpdateApiFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<ClientFlagUpdateApiFormRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientFlagUpdateApiFormRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientFlagUpdateApiFormRequest' from JSON`,
  );
}

/** @internal */
export const ClientFlagUpdateApiFormResponse$inboundSchema: z.ZodType<
  ClientFlagUpdateApiFormResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string(),
  resultMessage: z.string(),
});

/** @internal */
export type ClientFlagUpdateApiFormResponse$Outbound = {
  resultCode: string;
  resultMessage: string;
};

/** @internal */
export const ClientFlagUpdateApiFormResponse$outboundSchema: z.ZodType<
  ClientFlagUpdateApiFormResponse$Outbound,
  z.ZodTypeDef,
  ClientFlagUpdateApiFormResponse
> = z.object({
  resultCode: z.string(),
  resultMessage: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientFlagUpdateApiFormResponse$ {
  /** @deprecated use `ClientFlagUpdateApiFormResponse$inboundSchema` instead. */
  export const inboundSchema = ClientFlagUpdateApiFormResponse$inboundSchema;
  /** @deprecated use `ClientFlagUpdateApiFormResponse$outboundSchema` instead. */
  export const outboundSchema = ClientFlagUpdateApiFormResponse$outboundSchema;
  /** @deprecated use `ClientFlagUpdateApiFormResponse$Outbound` instead. */
  export type Outbound = ClientFlagUpdateApiFormResponse$Outbound;
}

export function clientFlagUpdateApiFormResponseToJSON(
  clientFlagUpdateApiFormResponse: ClientFlagUpdateApiFormResponse,
): string {
  return JSON.stringify(
    ClientFlagUpdateApiFormResponse$outboundSchema.parse(
      clientFlagUpdateApiFormResponse,
    ),
  );
}

export function clientFlagUpdateApiFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<ClientFlagUpdateApiFormResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientFlagUpdateApiFormResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientFlagUpdateApiFormResponse' from JSON`,
  );
}
