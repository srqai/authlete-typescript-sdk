/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type FederationRegistrationApiRequestBody = {
  /**
   * The entity configuration of a relying party.
   *
   * @remarks
   */
  entityConfiguration?: string | undefined;
  /**
   * The trust chain of a relying party.
   *
   * @remarks
   */
  trustChain?: string | undefined;
};

export type FederationRegistrationApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: FederationRegistrationApiRequestBody;
};

/**
 * The next action that the authorization server implementation should take.
 */
export const FederationRegistrationApiAction = {
  Ok: "OK",
  BadRequest: "BAD_REQUEST",
  NotFound: "NOT_FOUND",
  InternalServerError: "INTERNAL_SERVER_ERROR",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type FederationRegistrationApiAction = ClosedEnum<
  typeof FederationRegistrationApiAction
>;

/**
 * Successful operation
 */
export type FederationRegistrationApiResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: FederationRegistrationApiAction | undefined;
  /**
   * The content that the authorization server implementation can use as the value of `WWW-Authenticate`
   *
   * @remarks
   * header on errors.
   */
  responseContent?: string | undefined;
  client?: models.Client | undefined;
};

/** @internal */
export const FederationRegistrationApiRequestBody$inboundSchema: z.ZodType<
  FederationRegistrationApiRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  entityConfiguration: z.string().optional(),
  trustChain: z.string().optional(),
});

/** @internal */
export type FederationRegistrationApiRequestBody$Outbound = {
  entityConfiguration?: string | undefined;
  trustChain?: string | undefined;
};

/** @internal */
export const FederationRegistrationApiRequestBody$outboundSchema: z.ZodType<
  FederationRegistrationApiRequestBody$Outbound,
  z.ZodTypeDef,
  FederationRegistrationApiRequestBody
> = z.object({
  entityConfiguration: z.string().optional(),
  trustChain: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiRequestBody$ {
  /** @deprecated use `FederationRegistrationApiRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    FederationRegistrationApiRequestBody$inboundSchema;
  /** @deprecated use `FederationRegistrationApiRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    FederationRegistrationApiRequestBody$outboundSchema;
  /** @deprecated use `FederationRegistrationApiRequestBody$Outbound` instead. */
  export type Outbound = FederationRegistrationApiRequestBody$Outbound;
}

export function federationRegistrationApiRequestBodyToJSON(
  federationRegistrationApiRequestBody: FederationRegistrationApiRequestBody,
): string {
  return JSON.stringify(
    FederationRegistrationApiRequestBody$outboundSchema.parse(
      federationRegistrationApiRequestBody,
    ),
  );
}

export function federationRegistrationApiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<FederationRegistrationApiRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FederationRegistrationApiRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FederationRegistrationApiRequestBody' from JSON`,
  );
}

/** @internal */
export const FederationRegistrationApiRequest$inboundSchema: z.ZodType<
  FederationRegistrationApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() => FederationRegistrationApiRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type FederationRegistrationApiRequest$Outbound = {
  serviceId: string;
  RequestBody: FederationRegistrationApiRequestBody$Outbound;
};

/** @internal */
export const FederationRegistrationApiRequest$outboundSchema: z.ZodType<
  FederationRegistrationApiRequest$Outbound,
  z.ZodTypeDef,
  FederationRegistrationApiRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() =>
    FederationRegistrationApiRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiRequest$ {
  /** @deprecated use `FederationRegistrationApiRequest$inboundSchema` instead. */
  export const inboundSchema = FederationRegistrationApiRequest$inboundSchema;
  /** @deprecated use `FederationRegistrationApiRequest$outboundSchema` instead. */
  export const outboundSchema = FederationRegistrationApiRequest$outboundSchema;
  /** @deprecated use `FederationRegistrationApiRequest$Outbound` instead. */
  export type Outbound = FederationRegistrationApiRequest$Outbound;
}

export function federationRegistrationApiRequestToJSON(
  federationRegistrationApiRequest: FederationRegistrationApiRequest,
): string {
  return JSON.stringify(
    FederationRegistrationApiRequest$outboundSchema.parse(
      federationRegistrationApiRequest,
    ),
  );
}

export function federationRegistrationApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<FederationRegistrationApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FederationRegistrationApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FederationRegistrationApiRequest' from JSON`,
  );
}

/** @internal */
export const FederationRegistrationApiAction$inboundSchema: z.ZodNativeEnum<
  typeof FederationRegistrationApiAction
> = z.nativeEnum(FederationRegistrationApiAction);

/** @internal */
export const FederationRegistrationApiAction$outboundSchema: z.ZodNativeEnum<
  typeof FederationRegistrationApiAction
> = FederationRegistrationApiAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiAction$ {
  /** @deprecated use `FederationRegistrationApiAction$inboundSchema` instead. */
  export const inboundSchema = FederationRegistrationApiAction$inboundSchema;
  /** @deprecated use `FederationRegistrationApiAction$outboundSchema` instead. */
  export const outboundSchema = FederationRegistrationApiAction$outboundSchema;
}

/** @internal */
export const FederationRegistrationApiResponse$inboundSchema: z.ZodType<
  FederationRegistrationApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: FederationRegistrationApiAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
  client: models.Client$inboundSchema.optional(),
});

/** @internal */
export type FederationRegistrationApiResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  client?: models.Client$Outbound | undefined;
};

/** @internal */
export const FederationRegistrationApiResponse$outboundSchema: z.ZodType<
  FederationRegistrationApiResponse$Outbound,
  z.ZodTypeDef,
  FederationRegistrationApiResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: FederationRegistrationApiAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
  client: models.Client$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiResponse$ {
  /** @deprecated use `FederationRegistrationApiResponse$inboundSchema` instead. */
  export const inboundSchema = FederationRegistrationApiResponse$inboundSchema;
  /** @deprecated use `FederationRegistrationApiResponse$outboundSchema` instead. */
  export const outboundSchema =
    FederationRegistrationApiResponse$outboundSchema;
  /** @deprecated use `FederationRegistrationApiResponse$Outbound` instead. */
  export type Outbound = FederationRegistrationApiResponse$Outbound;
}

export function federationRegistrationApiResponseToJSON(
  federationRegistrationApiResponse: FederationRegistrationApiResponse,
): string {
  return JSON.stringify(
    FederationRegistrationApiResponse$outboundSchema.parse(
      federationRegistrationApiResponse,
    ),
  );
}

export function federationRegistrationApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<FederationRegistrationApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FederationRegistrationApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FederationRegistrationApiResponse' from JSON`,
  );
}
