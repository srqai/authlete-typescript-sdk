/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AuthIntrospectionStandardApiRequestBody = {
  /**
   * Request parameters which comply with the introspection request defined
   *
   * @remarks
   * in "[2.1. Introspection Request](https://datatracker.ietf.org/doc/html/rfc7662#section-2.1)" in
   * RFC 7662.
   *
   * The implementation of the introspection endpoint of your authorization server will receive an
   * HTTP POST [[RFC 7231](https://datatracker.ietf.org/doc/html/rfc7231)] request with parameters
   * in the `application/x-www-form-urlencoded` format. It is the entity body of the request that
   * Authlete's  `/api/auth/introspection/standard` API expects as the value of `parameters`.
   */
  parameters: string;
  /**
   * Flag indicating whether to include hidden properties in the output.
   *
   * @remarks
   *
   * Authlete has a mechanism whereby to associate arbitrary key-value pairs with an access token.
   * Each key-value pair has a hidden attribute. By default, key-value pairs whose hidden attribute
   * is set to `true` are not embedded in the standard introspection output.
   *
   * If the `withHiddenProperties` request parameter is given and its value is `true`, `/api/auth/introspection/standard
   * API includes all the associated key-value pairs into the output regardless of the value of the
   * hidden attribute.
   */
  withHiddenProperties?: string | undefined;
};

export type AuthIntrospectionStandardApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: AuthIntrospectionStandardApiRequestBody;
};

/**
 * The next action that the authorization server implementation should take.
 */
export const AuthIntrospectionStandardApiAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Ok: "OK",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type AuthIntrospectionStandardApiAction = ClosedEnum<
  typeof AuthIntrospectionStandardApiAction
>;

/**
 * Successful operation
 */
export type AuthIntrospectionStandardApiResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: AuthIntrospectionStandardApiAction | undefined;
  /**
   * The content that the authorization server implementation is to return to the client
   *
   * @remarks
   * application.
   */
  responseContent?: string | undefined;
};

/** @internal */
export const AuthIntrospectionStandardApiRequestBody$inboundSchema: z.ZodType<
  AuthIntrospectionStandardApiRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  parameters: z.string(),
  withHiddenProperties: z.string().optional(),
});

/** @internal */
export type AuthIntrospectionStandardApiRequestBody$Outbound = {
  parameters: string;
  withHiddenProperties?: string | undefined;
};

/** @internal */
export const AuthIntrospectionStandardApiRequestBody$outboundSchema: z.ZodType<
  AuthIntrospectionStandardApiRequestBody$Outbound,
  z.ZodTypeDef,
  AuthIntrospectionStandardApiRequestBody
> = z.object({
  parameters: z.string(),
  withHiddenProperties: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionStandardApiRequestBody$ {
  /** @deprecated use `AuthIntrospectionStandardApiRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    AuthIntrospectionStandardApiRequestBody$inboundSchema;
  /** @deprecated use `AuthIntrospectionStandardApiRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    AuthIntrospectionStandardApiRequestBody$outboundSchema;
  /** @deprecated use `AuthIntrospectionStandardApiRequestBody$Outbound` instead. */
  export type Outbound = AuthIntrospectionStandardApiRequestBody$Outbound;
}

export function authIntrospectionStandardApiRequestBodyToJSON(
  authIntrospectionStandardApiRequestBody:
    AuthIntrospectionStandardApiRequestBody,
): string {
  return JSON.stringify(
    AuthIntrospectionStandardApiRequestBody$outboundSchema.parse(
      authIntrospectionStandardApiRequestBody,
    ),
  );
}

export function authIntrospectionStandardApiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  AuthIntrospectionStandardApiRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AuthIntrospectionStandardApiRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AuthIntrospectionStandardApiRequestBody' from JSON`,
  );
}

/** @internal */
export const AuthIntrospectionStandardApiRequest$inboundSchema: z.ZodType<
  AuthIntrospectionStandardApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() =>
    AuthIntrospectionStandardApiRequestBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type AuthIntrospectionStandardApiRequest$Outbound = {
  serviceId: string;
  RequestBody: AuthIntrospectionStandardApiRequestBody$Outbound;
};

/** @internal */
export const AuthIntrospectionStandardApiRequest$outboundSchema: z.ZodType<
  AuthIntrospectionStandardApiRequest$Outbound,
  z.ZodTypeDef,
  AuthIntrospectionStandardApiRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() =>
    AuthIntrospectionStandardApiRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionStandardApiRequest$ {
  /** @deprecated use `AuthIntrospectionStandardApiRequest$inboundSchema` instead. */
  export const inboundSchema =
    AuthIntrospectionStandardApiRequest$inboundSchema;
  /** @deprecated use `AuthIntrospectionStandardApiRequest$outboundSchema` instead. */
  export const outboundSchema =
    AuthIntrospectionStandardApiRequest$outboundSchema;
  /** @deprecated use `AuthIntrospectionStandardApiRequest$Outbound` instead. */
  export type Outbound = AuthIntrospectionStandardApiRequest$Outbound;
}

export function authIntrospectionStandardApiRequestToJSON(
  authIntrospectionStandardApiRequest: AuthIntrospectionStandardApiRequest,
): string {
  return JSON.stringify(
    AuthIntrospectionStandardApiRequest$outboundSchema.parse(
      authIntrospectionStandardApiRequest,
    ),
  );
}

export function authIntrospectionStandardApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<AuthIntrospectionStandardApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AuthIntrospectionStandardApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthIntrospectionStandardApiRequest' from JSON`,
  );
}

/** @internal */
export const AuthIntrospectionStandardApiAction$inboundSchema: z.ZodNativeEnum<
  typeof AuthIntrospectionStandardApiAction
> = z.nativeEnum(AuthIntrospectionStandardApiAction);

/** @internal */
export const AuthIntrospectionStandardApiAction$outboundSchema: z.ZodNativeEnum<
  typeof AuthIntrospectionStandardApiAction
> = AuthIntrospectionStandardApiAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionStandardApiAction$ {
  /** @deprecated use `AuthIntrospectionStandardApiAction$inboundSchema` instead. */
  export const inboundSchema = AuthIntrospectionStandardApiAction$inboundSchema;
  /** @deprecated use `AuthIntrospectionStandardApiAction$outboundSchema` instead. */
  export const outboundSchema =
    AuthIntrospectionStandardApiAction$outboundSchema;
}

/** @internal */
export const AuthIntrospectionStandardApiResponse$inboundSchema: z.ZodType<
  AuthIntrospectionStandardApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthIntrospectionStandardApiAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
});

/** @internal */
export type AuthIntrospectionStandardApiResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
};

/** @internal */
export const AuthIntrospectionStandardApiResponse$outboundSchema: z.ZodType<
  AuthIntrospectionStandardApiResponse$Outbound,
  z.ZodTypeDef,
  AuthIntrospectionStandardApiResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthIntrospectionStandardApiAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionStandardApiResponse$ {
  /** @deprecated use `AuthIntrospectionStandardApiResponse$inboundSchema` instead. */
  export const inboundSchema =
    AuthIntrospectionStandardApiResponse$inboundSchema;
  /** @deprecated use `AuthIntrospectionStandardApiResponse$outboundSchema` instead. */
  export const outboundSchema =
    AuthIntrospectionStandardApiResponse$outboundSchema;
  /** @deprecated use `AuthIntrospectionStandardApiResponse$Outbound` instead. */
  export type Outbound = AuthIntrospectionStandardApiResponse$Outbound;
}

export function authIntrospectionStandardApiResponseToJSON(
  authIntrospectionStandardApiResponse: AuthIntrospectionStandardApiResponse,
): string {
  return JSON.stringify(
    AuthIntrospectionStandardApiResponse$outboundSchema.parse(
      authIntrospectionStandardApiResponse,
    ),
  );
}

export function authIntrospectionStandardApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<AuthIntrospectionStandardApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AuthIntrospectionStandardApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthIntrospectionStandardApiResponse' from JSON`,
  );
}
