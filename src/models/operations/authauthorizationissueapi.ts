/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type AuthAuthorizationIssueApiRequestBody = {
  /**
   * The ticket issued from Authlete `/auth/authorization` API.
   *
   * @remarks
   */
  ticket: string;
  /**
   * The subject (= a user account managed by the service) who has granted authorization to the client application.
   *
   * @remarks
   */
  subject: string;
  /**
   * The time when the authentication of the end-user occurred. Its value is the number of seconds from `1970-01-01`.
   *
   * @remarks
   */
  authTime?: number | undefined;
  /**
   * The Authentication Context Class Reference performed for the end-user authentication.
   */
  acr?: string | undefined;
  /**
   * The claims of the end-user (= pieces of information about the end-user) in JSON format.
   *
   * @remarks
   * See [OpenID Connect Core 1.0, 5.1. Standard Claims](https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims) for details about the format.
   */
  claims?: string | undefined;
  /**
   * Extra properties to associate with an access token and/or an authorization code.
   */
  properties?: Array<models.Property> | undefined;
  /**
   * Scopes to associate with an access token and/or an authorization code.
   *
   * @remarks
   * If a non-empty string array is given, it replaces the scopes specified by the original authorization request.
   */
  scopes?: Array<string> | undefined;
  /**
   * The value of the `sub` claim to embed in an ID token. If this request parameter is `null` or empty,
   *
   * @remarks
   * the value of the `subject` request parameter is used as the value of the `sub` claim.
   */
  sub?: string | undefined;
  /**
   * JSON that represents additional JWS header parameters for ID tokens that may be issued based on
   *
   * @remarks
   * the authorization request.
   */
  idtHeaderParams?: string | undefined;
  /**
   * Claim key-value pairs that are used to compute transformed claims.
   *
   * @remarks
   */
  claimsForTx?: string | undefined;
  /**
   * the claims that the user has consented for the client application
   *
   * @remarks
   * to know.
   */
  consentedClaims?: Array<string> | undefined;
  /**
   * The authorization details. This represents the value of the `authorization_details`
   *
   * @remarks
   * request parameter in the preceding device authorization request which is defined in
   * "OAuth 2.0 Rich Authorization Requests".
   */
  authorizationDetails?: models.AuthorizationDetails | undefined;
  /**
   * Additional claims that are added to the payload part of the JWT access token.
   *
   * @remarks
   */
  jwtAtClaims?: string | undefined;
  /**
   * The representation of an access token that may be issued as a result of the Authlete API call.
   *
   * @remarks
   */
  accessToken?: string | undefined;
};

export type AuthAuthorizationIssueApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: AuthAuthorizationIssueApiRequestBody;
};

/**
 * The next action that the authorization server implementation should take.
 */
export const AuthAuthorizationIssueApiAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Location: "LOCATION",
  Form: "FORM",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type AuthAuthorizationIssueApiAction = ClosedEnum<
  typeof AuthAuthorizationIssueApiAction
>;

/**
 * Successful operation
 */
export type AuthAuthorizationIssueApiResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: AuthAuthorizationIssueApiAction | undefined;
  /**
   * The content that the authorization server implementation is to return to the client application.
   *
   * @remarks
   * Its format varies depending on the value of `action` parameter.
   */
  responseContent?: string | undefined;
  /**
   * The newly issued access token. Note that an access token is issued from an authorization endpoint only
   *
   * @remarks
   * when `response_type` contains token.
   */
  accessToken?: string | undefined;
  /**
   * The datetime at which the newly issued access token will expire. The value is represented in milliseconds
   *
   * @remarks
   * since the Unix epoch (1970-01-01).
   */
  accessTokenExpiresAt?: number | undefined;
  /**
   * The duration of the newly issued access token in seconds.
   *
   * @remarks
   */
  accessTokenDuration?: number | undefined;
  /**
   * The newly issued ID token. Note that an ID token is issued from an authorization endpoint only
   *
   * @remarks
   * when `response_type` contains `id_token`.
   */
  idToken?: string | undefined;
  /**
   * The newly issued authorization code. Note that an authorization code is issued only
   *
   * @remarks
   * when `response_type` contains code.
   */
  authorizationCode?: string | undefined;
  /**
   * The newly issued access token in JWT format. If the service is not configured to issue JWT-based access tokens,
   *
   * @remarks
   * this property is always set to `null`.
   */
  jwtAccessToken?: string | undefined;
  /**
   * The information about the ticket.
   *
   * @remarks
   */
  ticketInfo?: string | undefined;
};

/** @internal */
export const AuthAuthorizationIssueApiRequestBody$inboundSchema: z.ZodType<
  AuthAuthorizationIssueApiRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  ticket: z.string(),
  subject: z.string(),
  authTime: z.number().int().optional(),
  acr: z.string().optional(),
  claims: z.string().optional(),
  properties: z.array(models.Property$inboundSchema).optional(),
  scopes: z.array(z.string()).optional(),
  sub: z.string().optional(),
  idtHeaderParams: z.string().optional(),
  claimsForTx: z.string().optional(),
  consentedClaims: z.array(z.string()).optional(),
  authorizationDetails: models.AuthorizationDetails$inboundSchema.optional(),
  jwtAtClaims: z.string().optional(),
  accessToken: z.string().optional(),
});

/** @internal */
export type AuthAuthorizationIssueApiRequestBody$Outbound = {
  ticket: string;
  subject: string;
  authTime?: number | undefined;
  acr?: string | undefined;
  claims?: string | undefined;
  properties?: Array<models.Property$Outbound> | undefined;
  scopes?: Array<string> | undefined;
  sub?: string | undefined;
  idtHeaderParams?: string | undefined;
  claimsForTx?: string | undefined;
  consentedClaims?: Array<string> | undefined;
  authorizationDetails?: models.AuthorizationDetails$Outbound | undefined;
  jwtAtClaims?: string | undefined;
  accessToken?: string | undefined;
};

/** @internal */
export const AuthAuthorizationIssueApiRequestBody$outboundSchema: z.ZodType<
  AuthAuthorizationIssueApiRequestBody$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationIssueApiRequestBody
> = z.object({
  ticket: z.string(),
  subject: z.string(),
  authTime: z.number().int().optional(),
  acr: z.string().optional(),
  claims: z.string().optional(),
  properties: z.array(models.Property$outboundSchema).optional(),
  scopes: z.array(z.string()).optional(),
  sub: z.string().optional(),
  idtHeaderParams: z.string().optional(),
  claimsForTx: z.string().optional(),
  consentedClaims: z.array(z.string()).optional(),
  authorizationDetails: models.AuthorizationDetails$outboundSchema.optional(),
  jwtAtClaims: z.string().optional(),
  accessToken: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationIssueApiRequestBody$ {
  /** @deprecated use `AuthAuthorizationIssueApiRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationIssueApiRequestBody$inboundSchema;
  /** @deprecated use `AuthAuthorizationIssueApiRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationIssueApiRequestBody$outboundSchema;
  /** @deprecated use `AuthAuthorizationIssueApiRequestBody$Outbound` instead. */
  export type Outbound = AuthAuthorizationIssueApiRequestBody$Outbound;
}

export function authAuthorizationIssueApiRequestBodyToJSON(
  authAuthorizationIssueApiRequestBody: AuthAuthorizationIssueApiRequestBody,
): string {
  return JSON.stringify(
    AuthAuthorizationIssueApiRequestBody$outboundSchema.parse(
      authAuthorizationIssueApiRequestBody,
    ),
  );
}

export function authAuthorizationIssueApiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<AuthAuthorizationIssueApiRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AuthAuthorizationIssueApiRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthAuthorizationIssueApiRequestBody' from JSON`,
  );
}

/** @internal */
export const AuthAuthorizationIssueApiRequest$inboundSchema: z.ZodType<
  AuthAuthorizationIssueApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() => AuthAuthorizationIssueApiRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type AuthAuthorizationIssueApiRequest$Outbound = {
  serviceId: string;
  RequestBody: AuthAuthorizationIssueApiRequestBody$Outbound;
};

/** @internal */
export const AuthAuthorizationIssueApiRequest$outboundSchema: z.ZodType<
  AuthAuthorizationIssueApiRequest$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationIssueApiRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() =>
    AuthAuthorizationIssueApiRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationIssueApiRequest$ {
  /** @deprecated use `AuthAuthorizationIssueApiRequest$inboundSchema` instead. */
  export const inboundSchema = AuthAuthorizationIssueApiRequest$inboundSchema;
  /** @deprecated use `AuthAuthorizationIssueApiRequest$outboundSchema` instead. */
  export const outboundSchema = AuthAuthorizationIssueApiRequest$outboundSchema;
  /** @deprecated use `AuthAuthorizationIssueApiRequest$Outbound` instead. */
  export type Outbound = AuthAuthorizationIssueApiRequest$Outbound;
}

export function authAuthorizationIssueApiRequestToJSON(
  authAuthorizationIssueApiRequest: AuthAuthorizationIssueApiRequest,
): string {
  return JSON.stringify(
    AuthAuthorizationIssueApiRequest$outboundSchema.parse(
      authAuthorizationIssueApiRequest,
    ),
  );
}

export function authAuthorizationIssueApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<AuthAuthorizationIssueApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthAuthorizationIssueApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthAuthorizationIssueApiRequest' from JSON`,
  );
}

/** @internal */
export const AuthAuthorizationIssueApiAction$inboundSchema: z.ZodNativeEnum<
  typeof AuthAuthorizationIssueApiAction
> = z.nativeEnum(AuthAuthorizationIssueApiAction);

/** @internal */
export const AuthAuthorizationIssueApiAction$outboundSchema: z.ZodNativeEnum<
  typeof AuthAuthorizationIssueApiAction
> = AuthAuthorizationIssueApiAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationIssueApiAction$ {
  /** @deprecated use `AuthAuthorizationIssueApiAction$inboundSchema` instead. */
  export const inboundSchema = AuthAuthorizationIssueApiAction$inboundSchema;
  /** @deprecated use `AuthAuthorizationIssueApiAction$outboundSchema` instead. */
  export const outboundSchema = AuthAuthorizationIssueApiAction$outboundSchema;
}

/** @internal */
export const AuthAuthorizationIssueApiResponse$inboundSchema: z.ZodType<
  AuthAuthorizationIssueApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthAuthorizationIssueApiAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
  accessToken: z.string().optional(),
  accessTokenExpiresAt: z.number().int().optional(),
  accessTokenDuration: z.number().int().optional(),
  idToken: z.string().optional(),
  authorizationCode: z.string().optional(),
  jwtAccessToken: z.string().optional(),
  ticketInfo: z.string().optional(),
});

/** @internal */
export type AuthAuthorizationIssueApiResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  accessToken?: string | undefined;
  accessTokenExpiresAt?: number | undefined;
  accessTokenDuration?: number | undefined;
  idToken?: string | undefined;
  authorizationCode?: string | undefined;
  jwtAccessToken?: string | undefined;
  ticketInfo?: string | undefined;
};

/** @internal */
export const AuthAuthorizationIssueApiResponse$outboundSchema: z.ZodType<
  AuthAuthorizationIssueApiResponse$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationIssueApiResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthAuthorizationIssueApiAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
  accessToken: z.string().optional(),
  accessTokenExpiresAt: z.number().int().optional(),
  accessTokenDuration: z.number().int().optional(),
  idToken: z.string().optional(),
  authorizationCode: z.string().optional(),
  jwtAccessToken: z.string().optional(),
  ticketInfo: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationIssueApiResponse$ {
  /** @deprecated use `AuthAuthorizationIssueApiResponse$inboundSchema` instead. */
  export const inboundSchema = AuthAuthorizationIssueApiResponse$inboundSchema;
  /** @deprecated use `AuthAuthorizationIssueApiResponse$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationIssueApiResponse$outboundSchema;
  /** @deprecated use `AuthAuthorizationIssueApiResponse$Outbound` instead. */
  export type Outbound = AuthAuthorizationIssueApiResponse$Outbound;
}

export function authAuthorizationIssueApiResponseToJSON(
  authAuthorizationIssueApiResponse: AuthAuthorizationIssueApiResponse,
): string {
  return JSON.stringify(
    AuthAuthorizationIssueApiResponse$outboundSchema.parse(
      authAuthorizationIssueApiResponse,
    ),
  );
}

export function authAuthorizationIssueApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<AuthAuthorizationIssueApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthAuthorizationIssueApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthAuthorizationIssueApiResponse' from JSON`,
  );
}
