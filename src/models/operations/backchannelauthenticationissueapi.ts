/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type BackchannelAuthenticationIssueApiRequestBody = {
  /**
   * The ticket issued from Authlete's `/backchannel/authentication` API.
   *
   * @remarks
   */
  ticket: string;
};

export type BackchannelAuthenticationIssueApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: BackchannelAuthenticationIssueApiRequestBody;
};

/**
 * The next action that the authorization server implementation should take.
 */
export const BackchannelAuthenticationIssueApiAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  InvalidTicket: "INVALID_TICKET",
  Ok: "OK",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type BackchannelAuthenticationIssueApiAction = ClosedEnum<
  typeof BackchannelAuthenticationIssueApiAction
>;

export type BackchannelAuthenticationIssueApiResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: BackchannelAuthenticationIssueApiAction | undefined;
  /**
   * The content that the authorization server implementation is to return to the client
   *
   * @remarks
   * application. Its format varies depending on the value of `action` parameter.
   */
  responseContent?: string | undefined;
  /**
   * The newly issued authentication request ID.
   *
   * @remarks
   */
  authReqId?: string | undefined;
  /**
   * The duration of the issued authentication request ID in seconds.
   *
   * @remarks
   */
  expiresIn?: number | undefined;
  /**
   * The minimum amount of time in seconds that the client must wait for between polling
   *
   * @remarks
   * requests to the token endpoint.
   */
  interval?: number | undefined;
};

/** @internal */
export const BackchannelAuthenticationIssueApiRequestBody$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationIssueApiRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    ticket: z.string(),
  });

/** @internal */
export type BackchannelAuthenticationIssueApiRequestBody$Outbound = {
  ticket: string;
};

/** @internal */
export const BackchannelAuthenticationIssueApiRequestBody$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationIssueApiRequestBody$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationIssueApiRequestBody
  > = z.object({
    ticket: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationIssueApiRequestBody$ {
  /** @deprecated use `BackchannelAuthenticationIssueApiRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationIssueApiRequestBody$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationIssueApiRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationIssueApiRequestBody$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationIssueApiRequestBody$Outbound` instead. */
  export type Outbound = BackchannelAuthenticationIssueApiRequestBody$Outbound;
}

export function backchannelAuthenticationIssueApiRequestBodyToJSON(
  backchannelAuthenticationIssueApiRequestBody:
    BackchannelAuthenticationIssueApiRequestBody,
): string {
  return JSON.stringify(
    BackchannelAuthenticationIssueApiRequestBody$outboundSchema.parse(
      backchannelAuthenticationIssueApiRequestBody,
    ),
  );
}

export function backchannelAuthenticationIssueApiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  BackchannelAuthenticationIssueApiRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationIssueApiRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BackchannelAuthenticationIssueApiRequestBody' from JSON`,
  );
}

/** @internal */
export const BackchannelAuthenticationIssueApiRequest$inboundSchema: z.ZodType<
  BackchannelAuthenticationIssueApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() =>
    BackchannelAuthenticationIssueApiRequestBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type BackchannelAuthenticationIssueApiRequest$Outbound = {
  serviceId: string;
  RequestBody: BackchannelAuthenticationIssueApiRequestBody$Outbound;
};

/** @internal */
export const BackchannelAuthenticationIssueApiRequest$outboundSchema: z.ZodType<
  BackchannelAuthenticationIssueApiRequest$Outbound,
  z.ZodTypeDef,
  BackchannelAuthenticationIssueApiRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() =>
    BackchannelAuthenticationIssueApiRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationIssueApiRequest$ {
  /** @deprecated use `BackchannelAuthenticationIssueApiRequest$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationIssueApiRequest$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationIssueApiRequest$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationIssueApiRequest$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationIssueApiRequest$Outbound` instead. */
  export type Outbound = BackchannelAuthenticationIssueApiRequest$Outbound;
}

export function backchannelAuthenticationIssueApiRequestToJSON(
  backchannelAuthenticationIssueApiRequest:
    BackchannelAuthenticationIssueApiRequest,
): string {
  return JSON.stringify(
    BackchannelAuthenticationIssueApiRequest$outboundSchema.parse(
      backchannelAuthenticationIssueApiRequest,
    ),
  );
}

export function backchannelAuthenticationIssueApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  BackchannelAuthenticationIssueApiRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationIssueApiRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BackchannelAuthenticationIssueApiRequest' from JSON`,
  );
}

/** @internal */
export const BackchannelAuthenticationIssueApiAction$inboundSchema:
  z.ZodNativeEnum<typeof BackchannelAuthenticationIssueApiAction> = z
    .nativeEnum(BackchannelAuthenticationIssueApiAction);

/** @internal */
export const BackchannelAuthenticationIssueApiAction$outboundSchema:
  z.ZodNativeEnum<typeof BackchannelAuthenticationIssueApiAction> =
    BackchannelAuthenticationIssueApiAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationIssueApiAction$ {
  /** @deprecated use `BackchannelAuthenticationIssueApiAction$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationIssueApiAction$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationIssueApiAction$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationIssueApiAction$outboundSchema;
}

/** @internal */
export const BackchannelAuthenticationIssueApiResponse$inboundSchema: z.ZodType<
  BackchannelAuthenticationIssueApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: BackchannelAuthenticationIssueApiAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
  authReqId: z.string().optional(),
  expiresIn: z.number().int().optional(),
  interval: z.number().int().optional(),
});

/** @internal */
export type BackchannelAuthenticationIssueApiResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  authReqId?: string | undefined;
  expiresIn?: number | undefined;
  interval?: number | undefined;
};

/** @internal */
export const BackchannelAuthenticationIssueApiResponse$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationIssueApiResponse$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationIssueApiResponse
  > = z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
    action: BackchannelAuthenticationIssueApiAction$outboundSchema.optional(),
    responseContent: z.string().optional(),
    authReqId: z.string().optional(),
    expiresIn: z.number().int().optional(),
    interval: z.number().int().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationIssueApiResponse$ {
  /** @deprecated use `BackchannelAuthenticationIssueApiResponse$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationIssueApiResponse$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationIssueApiResponse$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationIssueApiResponse$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationIssueApiResponse$Outbound` instead. */
  export type Outbound = BackchannelAuthenticationIssueApiResponse$Outbound;
}

export function backchannelAuthenticationIssueApiResponseToJSON(
  backchannelAuthenticationIssueApiResponse:
    BackchannelAuthenticationIssueApiResponse,
): string {
  return JSON.stringify(
    BackchannelAuthenticationIssueApiResponse$outboundSchema.parse(
      backchannelAuthenticationIssueApiResponse,
    ),
  );
}

export function backchannelAuthenticationIssueApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  BackchannelAuthenticationIssueApiResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationIssueApiResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BackchannelAuthenticationIssueApiResponse' from JSON`,
  );
}
