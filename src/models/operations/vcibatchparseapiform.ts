/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type VciBatchParseApiFormRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  apiServiceIdVciBatchParse: models.ApiServiceIdVciBatchParse;
};

/**
 * The next action that the batch credential endpoint should take.
 */
export const VciBatchParseApiFormAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Created: "CREATED",
  Unauthorized: "UNAUTHORIZED",
  Forbidden: "FORBIDDEN",
  Json: "JSON",
  Jwt: "JWT",
  Ok: "OK",
} as const;
/**
 * The next action that the batch credential endpoint should take.
 */
export type VciBatchParseApiFormAction = ClosedEnum<
  typeof VciBatchParseApiFormAction
>;

/**
 * An object containing schema data
 */
export type VciBatchParseApiFormResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the batch credential endpoint should take.
   */
  action?: VciBatchParseApiFormAction | undefined;
  /**
   * The content of the response to the request sender.
   */
  responseContent?: string | undefined;
  /**
   * Information about the credential requests in the batch credential
   *
   * @remarks
   * request.
   */
  info?: Array<models.CredentialRequestInfo> | undefined;
};

/** @internal */
export const VciBatchParseApiFormRequest$inboundSchema: z.ZodType<
  VciBatchParseApiFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  api_serviceId_vci_batch_parse: models.ApiServiceIdVciBatchParse$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "api_serviceId_vci_batch_parse": "apiServiceIdVciBatchParse",
  });
});

/** @internal */
export type VciBatchParseApiFormRequest$Outbound = {
  serviceId: string;
  api_serviceId_vci_batch_parse: models.ApiServiceIdVciBatchParse$Outbound;
};

/** @internal */
export const VciBatchParseApiFormRequest$outboundSchema: z.ZodType<
  VciBatchParseApiFormRequest$Outbound,
  z.ZodTypeDef,
  VciBatchParseApiFormRequest
> = z.object({
  serviceId: z.string(),
  apiServiceIdVciBatchParse: models.ApiServiceIdVciBatchParse$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    apiServiceIdVciBatchParse: "api_serviceId_vci_batch_parse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciBatchParseApiFormRequest$ {
  /** @deprecated use `VciBatchParseApiFormRequest$inboundSchema` instead. */
  export const inboundSchema = VciBatchParseApiFormRequest$inboundSchema;
  /** @deprecated use `VciBatchParseApiFormRequest$outboundSchema` instead. */
  export const outboundSchema = VciBatchParseApiFormRequest$outboundSchema;
  /** @deprecated use `VciBatchParseApiFormRequest$Outbound` instead. */
  export type Outbound = VciBatchParseApiFormRequest$Outbound;
}

export function vciBatchParseApiFormRequestToJSON(
  vciBatchParseApiFormRequest: VciBatchParseApiFormRequest,
): string {
  return JSON.stringify(
    VciBatchParseApiFormRequest$outboundSchema.parse(
      vciBatchParseApiFormRequest,
    ),
  );
}

export function vciBatchParseApiFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<VciBatchParseApiFormRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciBatchParseApiFormRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciBatchParseApiFormRequest' from JSON`,
  );
}

/** @internal */
export const VciBatchParseApiFormAction$inboundSchema: z.ZodNativeEnum<
  typeof VciBatchParseApiFormAction
> = z.nativeEnum(VciBatchParseApiFormAction);

/** @internal */
export const VciBatchParseApiFormAction$outboundSchema: z.ZodNativeEnum<
  typeof VciBatchParseApiFormAction
> = VciBatchParseApiFormAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciBatchParseApiFormAction$ {
  /** @deprecated use `VciBatchParseApiFormAction$inboundSchema` instead. */
  export const inboundSchema = VciBatchParseApiFormAction$inboundSchema;
  /** @deprecated use `VciBatchParseApiFormAction$outboundSchema` instead. */
  export const outboundSchema = VciBatchParseApiFormAction$outboundSchema;
}

/** @internal */
export const VciBatchParseApiFormResponse$inboundSchema: z.ZodType<
  VciBatchParseApiFormResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciBatchParseApiFormAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
  info: z.array(models.CredentialRequestInfo$inboundSchema).optional(),
});

/** @internal */
export type VciBatchParseApiFormResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  info?: Array<models.CredentialRequestInfo$Outbound> | undefined;
};

/** @internal */
export const VciBatchParseApiFormResponse$outboundSchema: z.ZodType<
  VciBatchParseApiFormResponse$Outbound,
  z.ZodTypeDef,
  VciBatchParseApiFormResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciBatchParseApiFormAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
  info: z.array(models.CredentialRequestInfo$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciBatchParseApiFormResponse$ {
  /** @deprecated use `VciBatchParseApiFormResponse$inboundSchema` instead. */
  export const inboundSchema = VciBatchParseApiFormResponse$inboundSchema;
  /** @deprecated use `VciBatchParseApiFormResponse$outboundSchema` instead. */
  export const outboundSchema = VciBatchParseApiFormResponse$outboundSchema;
  /** @deprecated use `VciBatchParseApiFormResponse$Outbound` instead. */
  export type Outbound = VciBatchParseApiFormResponse$Outbound;
}

export function vciBatchParseApiFormResponseToJSON(
  vciBatchParseApiFormResponse: VciBatchParseApiFormResponse,
): string {
  return JSON.stringify(
    VciBatchParseApiFormResponse$outboundSchema.parse(
      vciBatchParseApiFormResponse,
    ),
  );
}

export function vciBatchParseApiFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<VciBatchParseApiFormResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciBatchParseApiFormResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciBatchParseApiFormResponse' from JSON`,
  );
}
