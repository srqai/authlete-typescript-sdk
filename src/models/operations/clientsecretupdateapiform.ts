/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ClientSecretUpdateApiFormRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  /**
   * The client ID or the client ID alias of a client.
   *
   * @remarks
   */
  clientIdentifier: string;
  apiServiceIdClientSecretUpdateClientIdentifie:
    models.ApiServiceIdClientSecretUpdateClientIdentifie;
};

/**
 * An object containing schema data
 */
export type ClientSecretUpdateApiFormResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The new client secret.
   *
   * @remarks
   */
  newClientSecret?: string | undefined;
  /**
   * The old client secret.
   *
   * @remarks
   */
  oldClientSecret?: string | undefined;
};

/** @internal */
export const ClientSecretUpdateApiFormRequest$inboundSchema: z.ZodType<
  ClientSecretUpdateApiFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  clientIdentifier: z.string(),
  api_serviceId_client_secret_update_clientIdentifie:
    models.ApiServiceIdClientSecretUpdateClientIdentifie$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "api_serviceId_client_secret_update_clientIdentifie":
      "apiServiceIdClientSecretUpdateClientIdentifie",
  });
});

/** @internal */
export type ClientSecretUpdateApiFormRequest$Outbound = {
  serviceId: string;
  clientIdentifier: string;
  api_serviceId_client_secret_update_clientIdentifie:
    models.ApiServiceIdClientSecretUpdateClientIdentifie$Outbound;
};

/** @internal */
export const ClientSecretUpdateApiFormRequest$outboundSchema: z.ZodType<
  ClientSecretUpdateApiFormRequest$Outbound,
  z.ZodTypeDef,
  ClientSecretUpdateApiFormRequest
> = z.object({
  serviceId: z.string(),
  clientIdentifier: z.string(),
  apiServiceIdClientSecretUpdateClientIdentifie:
    models.ApiServiceIdClientSecretUpdateClientIdentifie$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    apiServiceIdClientSecretUpdateClientIdentifie:
      "api_serviceId_client_secret_update_clientIdentifie",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientSecretUpdateApiFormRequest$ {
  /** @deprecated use `ClientSecretUpdateApiFormRequest$inboundSchema` instead. */
  export const inboundSchema = ClientSecretUpdateApiFormRequest$inboundSchema;
  /** @deprecated use `ClientSecretUpdateApiFormRequest$outboundSchema` instead. */
  export const outboundSchema = ClientSecretUpdateApiFormRequest$outboundSchema;
  /** @deprecated use `ClientSecretUpdateApiFormRequest$Outbound` instead. */
  export type Outbound = ClientSecretUpdateApiFormRequest$Outbound;
}

export function clientSecretUpdateApiFormRequestToJSON(
  clientSecretUpdateApiFormRequest: ClientSecretUpdateApiFormRequest,
): string {
  return JSON.stringify(
    ClientSecretUpdateApiFormRequest$outboundSchema.parse(
      clientSecretUpdateApiFormRequest,
    ),
  );
}

export function clientSecretUpdateApiFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<ClientSecretUpdateApiFormRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientSecretUpdateApiFormRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientSecretUpdateApiFormRequest' from JSON`,
  );
}

/** @internal */
export const ClientSecretUpdateApiFormResponse$inboundSchema: z.ZodType<
  ClientSecretUpdateApiFormResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  newClientSecret: z.string().optional(),
  oldClientSecret: z.string().optional(),
});

/** @internal */
export type ClientSecretUpdateApiFormResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  newClientSecret?: string | undefined;
  oldClientSecret?: string | undefined;
};

/** @internal */
export const ClientSecretUpdateApiFormResponse$outboundSchema: z.ZodType<
  ClientSecretUpdateApiFormResponse$Outbound,
  z.ZodTypeDef,
  ClientSecretUpdateApiFormResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  newClientSecret: z.string().optional(),
  oldClientSecret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientSecretUpdateApiFormResponse$ {
  /** @deprecated use `ClientSecretUpdateApiFormResponse$inboundSchema` instead. */
  export const inboundSchema = ClientSecretUpdateApiFormResponse$inboundSchema;
  /** @deprecated use `ClientSecretUpdateApiFormResponse$outboundSchema` instead. */
  export const outboundSchema =
    ClientSecretUpdateApiFormResponse$outboundSchema;
  /** @deprecated use `ClientSecretUpdateApiFormResponse$Outbound` instead. */
  export type Outbound = ClientSecretUpdateApiFormResponse$Outbound;
}

export function clientSecretUpdateApiFormResponseToJSON(
  clientSecretUpdateApiFormResponse: ClientSecretUpdateApiFormResponse,
): string {
  return JSON.stringify(
    ClientSecretUpdateApiFormResponse$outboundSchema.parse(
      clientSecretUpdateApiFormResponse,
    ),
  );
}

export function clientSecretUpdateApiFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<ClientSecretUpdateApiFormResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientSecretUpdateApiFormResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientSecretUpdateApiFormResponse' from JSON`,
  );
}
