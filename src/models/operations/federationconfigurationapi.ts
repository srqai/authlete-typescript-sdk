/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type FederationConfigurationApiRequestBody = {};

export type FederationConfigurationApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody?: FederationConfigurationApiRequestBody | undefined;
};

/**
 * The next action that the authorization server implementation should take.
 */
export const FederationConfigurationApiAction = {
  Ok: "OK",
  NotFound: "NOT_FOUND",
  InternalServerError: "INTERNAL_SERVER_ERROR",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type FederationConfigurationApiAction = ClosedEnum<
  typeof FederationConfigurationApiAction
>;

export type FederationConfigurationApiResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: FederationConfigurationApiAction | undefined;
  /**
   * The content that the authorization server implementation is to return to the client application.
   *
   * @remarks
   * Its format varies depending on the value of `action` parameter.
   */
  responseContent?: string | undefined;
};

/** @internal */
export const FederationConfigurationApiRequestBody$inboundSchema: z.ZodType<
  FederationConfigurationApiRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type FederationConfigurationApiRequestBody$Outbound = {};

/** @internal */
export const FederationConfigurationApiRequestBody$outboundSchema: z.ZodType<
  FederationConfigurationApiRequestBody$Outbound,
  z.ZodTypeDef,
  FederationConfigurationApiRequestBody
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationConfigurationApiRequestBody$ {
  /** @deprecated use `FederationConfigurationApiRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    FederationConfigurationApiRequestBody$inboundSchema;
  /** @deprecated use `FederationConfigurationApiRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    FederationConfigurationApiRequestBody$outboundSchema;
  /** @deprecated use `FederationConfigurationApiRequestBody$Outbound` instead. */
  export type Outbound = FederationConfigurationApiRequestBody$Outbound;
}

export function federationConfigurationApiRequestBodyToJSON(
  federationConfigurationApiRequestBody: FederationConfigurationApiRequestBody,
): string {
  return JSON.stringify(
    FederationConfigurationApiRequestBody$outboundSchema.parse(
      federationConfigurationApiRequestBody,
    ),
  );
}

export function federationConfigurationApiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<FederationConfigurationApiRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FederationConfigurationApiRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FederationConfigurationApiRequestBody' from JSON`,
  );
}

/** @internal */
export const FederationConfigurationApiRequest$inboundSchema: z.ZodType<
  FederationConfigurationApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() => FederationConfigurationApiRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type FederationConfigurationApiRequest$Outbound = {
  serviceId: string;
  RequestBody?: FederationConfigurationApiRequestBody$Outbound | undefined;
};

/** @internal */
export const FederationConfigurationApiRequest$outboundSchema: z.ZodType<
  FederationConfigurationApiRequest$Outbound,
  z.ZodTypeDef,
  FederationConfigurationApiRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() =>
    FederationConfigurationApiRequestBody$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationConfigurationApiRequest$ {
  /** @deprecated use `FederationConfigurationApiRequest$inboundSchema` instead. */
  export const inboundSchema = FederationConfigurationApiRequest$inboundSchema;
  /** @deprecated use `FederationConfigurationApiRequest$outboundSchema` instead. */
  export const outboundSchema =
    FederationConfigurationApiRequest$outboundSchema;
  /** @deprecated use `FederationConfigurationApiRequest$Outbound` instead. */
  export type Outbound = FederationConfigurationApiRequest$Outbound;
}

export function federationConfigurationApiRequestToJSON(
  federationConfigurationApiRequest: FederationConfigurationApiRequest,
): string {
  return JSON.stringify(
    FederationConfigurationApiRequest$outboundSchema.parse(
      federationConfigurationApiRequest,
    ),
  );
}

export function federationConfigurationApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<FederationConfigurationApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FederationConfigurationApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FederationConfigurationApiRequest' from JSON`,
  );
}

/** @internal */
export const FederationConfigurationApiAction$inboundSchema: z.ZodNativeEnum<
  typeof FederationConfigurationApiAction
> = z.nativeEnum(FederationConfigurationApiAction);

/** @internal */
export const FederationConfigurationApiAction$outboundSchema: z.ZodNativeEnum<
  typeof FederationConfigurationApiAction
> = FederationConfigurationApiAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationConfigurationApiAction$ {
  /** @deprecated use `FederationConfigurationApiAction$inboundSchema` instead. */
  export const inboundSchema = FederationConfigurationApiAction$inboundSchema;
  /** @deprecated use `FederationConfigurationApiAction$outboundSchema` instead. */
  export const outboundSchema = FederationConfigurationApiAction$outboundSchema;
}

/** @internal */
export const FederationConfigurationApiResponse$inboundSchema: z.ZodType<
  FederationConfigurationApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: FederationConfigurationApiAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
});

/** @internal */
export type FederationConfigurationApiResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
};

/** @internal */
export const FederationConfigurationApiResponse$outboundSchema: z.ZodType<
  FederationConfigurationApiResponse$Outbound,
  z.ZodTypeDef,
  FederationConfigurationApiResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: FederationConfigurationApiAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationConfigurationApiResponse$ {
  /** @deprecated use `FederationConfigurationApiResponse$inboundSchema` instead. */
  export const inboundSchema = FederationConfigurationApiResponse$inboundSchema;
  /** @deprecated use `FederationConfigurationApiResponse$outboundSchema` instead. */
  export const outboundSchema =
    FederationConfigurationApiResponse$outboundSchema;
  /** @deprecated use `FederationConfigurationApiResponse$Outbound` instead. */
  export type Outbound = FederationConfigurationApiResponse$Outbound;
}

export function federationConfigurationApiResponseToJSON(
  federationConfigurationApiResponse: FederationConfigurationApiResponse,
): string {
  return JSON.stringify(
    FederationConfigurationApiResponse$outboundSchema.parse(
      federationConfigurationApiResponse,
    ),
  );
}

export function federationConfigurationApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<FederationConfigurationApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FederationConfigurationApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FederationConfigurationApiResponse' from JSON`,
  );
}
