/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type AuthTokenRevokeApiFormRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  apiServiceIdAuthTokenRevoke: models.ApiServiceIdAuthTokenRevoke;
};

/**
 * An object containing schema data
 */
export type AuthTokenRevokeApiFormResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The number of tokens revoked
   */
  count?: number | undefined;
};

/** @internal */
export const AuthTokenRevokeApiFormRequest$inboundSchema: z.ZodType<
  AuthTokenRevokeApiFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  api_serviceId_auth_token_revoke:
    models.ApiServiceIdAuthTokenRevoke$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "api_serviceId_auth_token_revoke": "apiServiceIdAuthTokenRevoke",
  });
});

/** @internal */
export type AuthTokenRevokeApiFormRequest$Outbound = {
  serviceId: string;
  api_serviceId_auth_token_revoke: models.ApiServiceIdAuthTokenRevoke$Outbound;
};

/** @internal */
export const AuthTokenRevokeApiFormRequest$outboundSchema: z.ZodType<
  AuthTokenRevokeApiFormRequest$Outbound,
  z.ZodTypeDef,
  AuthTokenRevokeApiFormRequest
> = z.object({
  serviceId: z.string(),
  apiServiceIdAuthTokenRevoke:
    models.ApiServiceIdAuthTokenRevoke$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    apiServiceIdAuthTokenRevoke: "api_serviceId_auth_token_revoke",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenRevokeApiFormRequest$ {
  /** @deprecated use `AuthTokenRevokeApiFormRequest$inboundSchema` instead. */
  export const inboundSchema = AuthTokenRevokeApiFormRequest$inboundSchema;
  /** @deprecated use `AuthTokenRevokeApiFormRequest$outboundSchema` instead. */
  export const outboundSchema = AuthTokenRevokeApiFormRequest$outboundSchema;
  /** @deprecated use `AuthTokenRevokeApiFormRequest$Outbound` instead. */
  export type Outbound = AuthTokenRevokeApiFormRequest$Outbound;
}

export function authTokenRevokeApiFormRequestToJSON(
  authTokenRevokeApiFormRequest: AuthTokenRevokeApiFormRequest,
): string {
  return JSON.stringify(
    AuthTokenRevokeApiFormRequest$outboundSchema.parse(
      authTokenRevokeApiFormRequest,
    ),
  );
}

export function authTokenRevokeApiFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenRevokeApiFormRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenRevokeApiFormRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenRevokeApiFormRequest' from JSON`,
  );
}

/** @internal */
export const AuthTokenRevokeApiFormResponse$inboundSchema: z.ZodType<
  AuthTokenRevokeApiFormResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  count: z.number().int().optional(),
});

/** @internal */
export type AuthTokenRevokeApiFormResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  count?: number | undefined;
};

/** @internal */
export const AuthTokenRevokeApiFormResponse$outboundSchema: z.ZodType<
  AuthTokenRevokeApiFormResponse$Outbound,
  z.ZodTypeDef,
  AuthTokenRevokeApiFormResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  count: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenRevokeApiFormResponse$ {
  /** @deprecated use `AuthTokenRevokeApiFormResponse$inboundSchema` instead. */
  export const inboundSchema = AuthTokenRevokeApiFormResponse$inboundSchema;
  /** @deprecated use `AuthTokenRevokeApiFormResponse$outboundSchema` instead. */
  export const outboundSchema = AuthTokenRevokeApiFormResponse$outboundSchema;
  /** @deprecated use `AuthTokenRevokeApiFormResponse$Outbound` instead. */
  export type Outbound = AuthTokenRevokeApiFormResponse$Outbound;
}

export function authTokenRevokeApiFormResponseToJSON(
  authTokenRevokeApiFormResponse: AuthTokenRevokeApiFormResponse,
): string {
  return JSON.stringify(
    AuthTokenRevokeApiFormResponse$outboundSchema.parse(
      authTokenRevokeApiFormResponse,
    ),
  );
}

export function authTokenRevokeApiFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenRevokeApiFormResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenRevokeApiFormResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenRevokeApiFormResponse' from JSON`,
  );
}
