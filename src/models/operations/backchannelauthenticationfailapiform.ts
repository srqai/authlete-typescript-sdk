/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type BackchannelAuthenticationFailApiFormRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  apilBraceserviceIdRBraceBackchannelAuthenticationFail:
    models.APILBraceserviceIdRBraceBackchannelAuthenticationFail;
};

/**
 * The next action that the authorization server implementation should take.
 */
export const BackchannelAuthenticationFailApiFormAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Forbidden: "FORBIDDEN",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type BackchannelAuthenticationFailApiFormAction = ClosedEnum<
  typeof BackchannelAuthenticationFailApiFormAction
>;

export type BackchannelAuthenticationFailApiFormResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: BackchannelAuthenticationFailApiFormAction | undefined;
  /**
   * The content that the authorization server implementation is to return to the client
   *
   * @remarks
   * application. Its format varies depending on the value of `action` parameter.
   */
  responseContent?: string | undefined;
};

/** @internal */
export const BackchannelAuthenticationFailApiFormRequest$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationFailApiFormRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    serviceId: z.string(),
    APILBraceserviceIdRBraceBackchannelAuthenticationFail:
      models
        .APILBraceserviceIdRBraceBackchannelAuthenticationFail$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "APILBraceserviceIdRBraceBackchannelAuthenticationFail":
        "apilBraceserviceIdRBraceBackchannelAuthenticationFail",
    });
  });

/** @internal */
export type BackchannelAuthenticationFailApiFormRequest$Outbound = {
  serviceId: string;
  APILBraceserviceIdRBraceBackchannelAuthenticationFail:
    models.APILBraceserviceIdRBraceBackchannelAuthenticationFail$Outbound;
};

/** @internal */
export const BackchannelAuthenticationFailApiFormRequest$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationFailApiFormRequest$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationFailApiFormRequest
  > = z.object({
    serviceId: z.string(),
    apilBraceserviceIdRBraceBackchannelAuthenticationFail:
      models
        .APILBraceserviceIdRBraceBackchannelAuthenticationFail$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      apilBraceserviceIdRBraceBackchannelAuthenticationFail:
        "APILBraceserviceIdRBraceBackchannelAuthenticationFail",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationFailApiFormRequest$ {
  /** @deprecated use `BackchannelAuthenticationFailApiFormRequest$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationFailApiFormRequest$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationFailApiFormRequest$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationFailApiFormRequest$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationFailApiFormRequest$Outbound` instead. */
  export type Outbound = BackchannelAuthenticationFailApiFormRequest$Outbound;
}

export function backchannelAuthenticationFailApiFormRequestToJSON(
  backchannelAuthenticationFailApiFormRequest:
    BackchannelAuthenticationFailApiFormRequest,
): string {
  return JSON.stringify(
    BackchannelAuthenticationFailApiFormRequest$outboundSchema.parse(
      backchannelAuthenticationFailApiFormRequest,
    ),
  );
}

export function backchannelAuthenticationFailApiFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  BackchannelAuthenticationFailApiFormRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationFailApiFormRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BackchannelAuthenticationFailApiFormRequest' from JSON`,
  );
}

/** @internal */
export const BackchannelAuthenticationFailApiFormAction$inboundSchema:
  z.ZodNativeEnum<typeof BackchannelAuthenticationFailApiFormAction> = z
    .nativeEnum(BackchannelAuthenticationFailApiFormAction);

/** @internal */
export const BackchannelAuthenticationFailApiFormAction$outboundSchema:
  z.ZodNativeEnum<typeof BackchannelAuthenticationFailApiFormAction> =
    BackchannelAuthenticationFailApiFormAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationFailApiFormAction$ {
  /** @deprecated use `BackchannelAuthenticationFailApiFormAction$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationFailApiFormAction$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationFailApiFormAction$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationFailApiFormAction$outboundSchema;
}

/** @internal */
export const BackchannelAuthenticationFailApiFormResponse$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationFailApiFormResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
    action: BackchannelAuthenticationFailApiFormAction$inboundSchema.optional(),
    responseContent: z.string().optional(),
  });

/** @internal */
export type BackchannelAuthenticationFailApiFormResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
};

/** @internal */
export const BackchannelAuthenticationFailApiFormResponse$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationFailApiFormResponse$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationFailApiFormResponse
  > = z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
    action: BackchannelAuthenticationFailApiFormAction$outboundSchema
      .optional(),
    responseContent: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationFailApiFormResponse$ {
  /** @deprecated use `BackchannelAuthenticationFailApiFormResponse$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationFailApiFormResponse$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationFailApiFormResponse$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationFailApiFormResponse$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationFailApiFormResponse$Outbound` instead. */
  export type Outbound = BackchannelAuthenticationFailApiFormResponse$Outbound;
}

export function backchannelAuthenticationFailApiFormResponseToJSON(
  backchannelAuthenticationFailApiFormResponse:
    BackchannelAuthenticationFailApiFormResponse,
): string {
  return JSON.stringify(
    BackchannelAuthenticationFailApiFormResponse$outboundSchema.parse(
      backchannelAuthenticationFailApiFormResponse,
    ),
  );
}

export function backchannelAuthenticationFailApiFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  BackchannelAuthenticationFailApiFormResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationFailApiFormResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BackchannelAuthenticationFailApiFormResponse' from JSON`,
  );
}
