/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The reason of the failure of the token request.
 *
 * @remarks
 */
export const AuthTokenFailApiReason = {
  Unknown: "UNKNOWN",
  InvalidResourceOwnerCredentials: "INVALID_RESOURCE_OWNER_CREDENTIALS",
  InvalidTarget: "INVALID_TARGET",
} as const;
/**
 * The reason of the failure of the token request.
 *
 * @remarks
 */
export type AuthTokenFailApiReason = ClosedEnum<typeof AuthTokenFailApiReason>;

export type AuthTokenFailApiRequestBody = {
  /**
   * The ticket issued from Authlete `/auth/token` API.
   *
   * @remarks
   */
  ticket: string;
  /**
   * The reason of the failure of the token request.
   *
   * @remarks
   */
  reason: AuthTokenFailApiReason;
};

export type AuthTokenFailApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: AuthTokenFailApiRequestBody;
};

/**
 * The next action that the authorization server implementation should take.
 */
export const AuthTokenFailApiAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type AuthTokenFailApiAction = ClosedEnum<typeof AuthTokenFailApiAction>;

/**
 * Successful operation
 */
export type AuthTokenFailApiResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: AuthTokenFailApiAction | undefined;
  /**
   * The content that the authorization server implementation is to return to the client application.
   *
   * @remarks
   * Its format varies depending on the value of `action` parameter. See description for details.
   */
  responseContent?: string | undefined;
};

/** @internal */
export const AuthTokenFailApiReason$inboundSchema: z.ZodNativeEnum<
  typeof AuthTokenFailApiReason
> = z.nativeEnum(AuthTokenFailApiReason);

/** @internal */
export const AuthTokenFailApiReason$outboundSchema: z.ZodNativeEnum<
  typeof AuthTokenFailApiReason
> = AuthTokenFailApiReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenFailApiReason$ {
  /** @deprecated use `AuthTokenFailApiReason$inboundSchema` instead. */
  export const inboundSchema = AuthTokenFailApiReason$inboundSchema;
  /** @deprecated use `AuthTokenFailApiReason$outboundSchema` instead. */
  export const outboundSchema = AuthTokenFailApiReason$outboundSchema;
}

/** @internal */
export const AuthTokenFailApiRequestBody$inboundSchema: z.ZodType<
  AuthTokenFailApiRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  ticket: z.string(),
  reason: AuthTokenFailApiReason$inboundSchema,
});

/** @internal */
export type AuthTokenFailApiRequestBody$Outbound = {
  ticket: string;
  reason: string;
};

/** @internal */
export const AuthTokenFailApiRequestBody$outboundSchema: z.ZodType<
  AuthTokenFailApiRequestBody$Outbound,
  z.ZodTypeDef,
  AuthTokenFailApiRequestBody
> = z.object({
  ticket: z.string(),
  reason: AuthTokenFailApiReason$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenFailApiRequestBody$ {
  /** @deprecated use `AuthTokenFailApiRequestBody$inboundSchema` instead. */
  export const inboundSchema = AuthTokenFailApiRequestBody$inboundSchema;
  /** @deprecated use `AuthTokenFailApiRequestBody$outboundSchema` instead. */
  export const outboundSchema = AuthTokenFailApiRequestBody$outboundSchema;
  /** @deprecated use `AuthTokenFailApiRequestBody$Outbound` instead. */
  export type Outbound = AuthTokenFailApiRequestBody$Outbound;
}

export function authTokenFailApiRequestBodyToJSON(
  authTokenFailApiRequestBody: AuthTokenFailApiRequestBody,
): string {
  return JSON.stringify(
    AuthTokenFailApiRequestBody$outboundSchema.parse(
      authTokenFailApiRequestBody,
    ),
  );
}

export function authTokenFailApiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenFailApiRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenFailApiRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenFailApiRequestBody' from JSON`,
  );
}

/** @internal */
export const AuthTokenFailApiRequest$inboundSchema: z.ZodType<
  AuthTokenFailApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() => AuthTokenFailApiRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type AuthTokenFailApiRequest$Outbound = {
  serviceId: string;
  RequestBody: AuthTokenFailApiRequestBody$Outbound;
};

/** @internal */
export const AuthTokenFailApiRequest$outboundSchema: z.ZodType<
  AuthTokenFailApiRequest$Outbound,
  z.ZodTypeDef,
  AuthTokenFailApiRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() => AuthTokenFailApiRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenFailApiRequest$ {
  /** @deprecated use `AuthTokenFailApiRequest$inboundSchema` instead. */
  export const inboundSchema = AuthTokenFailApiRequest$inboundSchema;
  /** @deprecated use `AuthTokenFailApiRequest$outboundSchema` instead. */
  export const outboundSchema = AuthTokenFailApiRequest$outboundSchema;
  /** @deprecated use `AuthTokenFailApiRequest$Outbound` instead. */
  export type Outbound = AuthTokenFailApiRequest$Outbound;
}

export function authTokenFailApiRequestToJSON(
  authTokenFailApiRequest: AuthTokenFailApiRequest,
): string {
  return JSON.stringify(
    AuthTokenFailApiRequest$outboundSchema.parse(authTokenFailApiRequest),
  );
}

export function authTokenFailApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenFailApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenFailApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenFailApiRequest' from JSON`,
  );
}

/** @internal */
export const AuthTokenFailApiAction$inboundSchema: z.ZodNativeEnum<
  typeof AuthTokenFailApiAction
> = z.nativeEnum(AuthTokenFailApiAction);

/** @internal */
export const AuthTokenFailApiAction$outboundSchema: z.ZodNativeEnum<
  typeof AuthTokenFailApiAction
> = AuthTokenFailApiAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenFailApiAction$ {
  /** @deprecated use `AuthTokenFailApiAction$inboundSchema` instead. */
  export const inboundSchema = AuthTokenFailApiAction$inboundSchema;
  /** @deprecated use `AuthTokenFailApiAction$outboundSchema` instead. */
  export const outboundSchema = AuthTokenFailApiAction$outboundSchema;
}

/** @internal */
export const AuthTokenFailApiResponse$inboundSchema: z.ZodType<
  AuthTokenFailApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthTokenFailApiAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
});

/** @internal */
export type AuthTokenFailApiResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
};

/** @internal */
export const AuthTokenFailApiResponse$outboundSchema: z.ZodType<
  AuthTokenFailApiResponse$Outbound,
  z.ZodTypeDef,
  AuthTokenFailApiResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthTokenFailApiAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenFailApiResponse$ {
  /** @deprecated use `AuthTokenFailApiResponse$inboundSchema` instead. */
  export const inboundSchema = AuthTokenFailApiResponse$inboundSchema;
  /** @deprecated use `AuthTokenFailApiResponse$outboundSchema` instead. */
  export const outboundSchema = AuthTokenFailApiResponse$outboundSchema;
  /** @deprecated use `AuthTokenFailApiResponse$Outbound` instead. */
  export type Outbound = AuthTokenFailApiResponse$Outbound;
}

export function authTokenFailApiResponseToJSON(
  authTokenFailApiResponse: AuthTokenFailApiResponse,
): string {
  return JSON.stringify(
    AuthTokenFailApiResponse$outboundSchema.parse(authTokenFailApiResponse),
  );
}

export function authTokenFailApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenFailApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenFailApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenFailApiResponse' from JSON`,
  );
}
