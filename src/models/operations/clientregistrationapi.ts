/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ClientRegistrationApiRequestBody = {
  /**
   * Client metadata in JSON format that complies with [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591)
   *
   * @remarks
   * (OAuth 2.0 Dynamic Client Registration Protocol).
   */
  json: string;
  /**
   * The client registration access token. Used only for GET, UPDATE, and DELETE requests.
   *
   * @remarks
   */
  token?: string | undefined;
  /**
   * The client's identifier. Used for GET, UPDATE, and DELETE requests
   *
   * @remarks
   */
  clientId?: string | undefined;
};

export type ClientRegistrationApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: ClientRegistrationApiRequestBody;
};

/**
 * The next action that the authorization server implementation should take.
 *
 * @remarks
 */
export const ClientRegistrationApiAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Created: "CREATED",
} as const;
/**
 * The next action that the authorization server implementation should take.
 *
 * @remarks
 */
export type ClientRegistrationApiAction = ClosedEnum<
  typeof ClientRegistrationApiAction
>;

/**
 * Successful operation
 */
export type ClientRegistrationApiResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   *
   * @remarks
   */
  action?: ClientRegistrationApiAction | undefined;
  /**
   * The content that the authorization server implementation is to return to the client application.
   *
   * @remarks
   * Its format varies depending on the value of `action` parameter.
   */
  responseContent?: string | undefined;
  client?: models.Client | undefined;
};

/** @internal */
export const ClientRegistrationApiRequestBody$inboundSchema: z.ZodType<
  ClientRegistrationApiRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  json: z.string(),
  token: z.string().optional(),
  clientId: z.string().optional(),
});

/** @internal */
export type ClientRegistrationApiRequestBody$Outbound = {
  json: string;
  token?: string | undefined;
  clientId?: string | undefined;
};

/** @internal */
export const ClientRegistrationApiRequestBody$outboundSchema: z.ZodType<
  ClientRegistrationApiRequestBody$Outbound,
  z.ZodTypeDef,
  ClientRegistrationApiRequestBody
> = z.object({
  json: z.string(),
  token: z.string().optional(),
  clientId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationApiRequestBody$ {
  /** @deprecated use `ClientRegistrationApiRequestBody$inboundSchema` instead. */
  export const inboundSchema = ClientRegistrationApiRequestBody$inboundSchema;
  /** @deprecated use `ClientRegistrationApiRequestBody$outboundSchema` instead. */
  export const outboundSchema = ClientRegistrationApiRequestBody$outboundSchema;
  /** @deprecated use `ClientRegistrationApiRequestBody$Outbound` instead. */
  export type Outbound = ClientRegistrationApiRequestBody$Outbound;
}

export function clientRegistrationApiRequestBodyToJSON(
  clientRegistrationApiRequestBody: ClientRegistrationApiRequestBody,
): string {
  return JSON.stringify(
    ClientRegistrationApiRequestBody$outboundSchema.parse(
      clientRegistrationApiRequestBody,
    ),
  );
}

export function clientRegistrationApiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<ClientRegistrationApiRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientRegistrationApiRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientRegistrationApiRequestBody' from JSON`,
  );
}

/** @internal */
export const ClientRegistrationApiRequest$inboundSchema: z.ZodType<
  ClientRegistrationApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() => ClientRegistrationApiRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type ClientRegistrationApiRequest$Outbound = {
  serviceId: string;
  RequestBody: ClientRegistrationApiRequestBody$Outbound;
};

/** @internal */
export const ClientRegistrationApiRequest$outboundSchema: z.ZodType<
  ClientRegistrationApiRequest$Outbound,
  z.ZodTypeDef,
  ClientRegistrationApiRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() => ClientRegistrationApiRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationApiRequest$ {
  /** @deprecated use `ClientRegistrationApiRequest$inboundSchema` instead. */
  export const inboundSchema = ClientRegistrationApiRequest$inboundSchema;
  /** @deprecated use `ClientRegistrationApiRequest$outboundSchema` instead. */
  export const outboundSchema = ClientRegistrationApiRequest$outboundSchema;
  /** @deprecated use `ClientRegistrationApiRequest$Outbound` instead. */
  export type Outbound = ClientRegistrationApiRequest$Outbound;
}

export function clientRegistrationApiRequestToJSON(
  clientRegistrationApiRequest: ClientRegistrationApiRequest,
): string {
  return JSON.stringify(
    ClientRegistrationApiRequest$outboundSchema.parse(
      clientRegistrationApiRequest,
    ),
  );
}

export function clientRegistrationApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<ClientRegistrationApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientRegistrationApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientRegistrationApiRequest' from JSON`,
  );
}

/** @internal */
export const ClientRegistrationApiAction$inboundSchema: z.ZodNativeEnum<
  typeof ClientRegistrationApiAction
> = z.nativeEnum(ClientRegistrationApiAction);

/** @internal */
export const ClientRegistrationApiAction$outboundSchema: z.ZodNativeEnum<
  typeof ClientRegistrationApiAction
> = ClientRegistrationApiAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationApiAction$ {
  /** @deprecated use `ClientRegistrationApiAction$inboundSchema` instead. */
  export const inboundSchema = ClientRegistrationApiAction$inboundSchema;
  /** @deprecated use `ClientRegistrationApiAction$outboundSchema` instead. */
  export const outboundSchema = ClientRegistrationApiAction$outboundSchema;
}

/** @internal */
export const ClientRegistrationApiResponse$inboundSchema: z.ZodType<
  ClientRegistrationApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: ClientRegistrationApiAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
  client: models.Client$inboundSchema.optional(),
});

/** @internal */
export type ClientRegistrationApiResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  client?: models.Client$Outbound | undefined;
};

/** @internal */
export const ClientRegistrationApiResponse$outboundSchema: z.ZodType<
  ClientRegistrationApiResponse$Outbound,
  z.ZodTypeDef,
  ClientRegistrationApiResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: ClientRegistrationApiAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
  client: models.Client$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationApiResponse$ {
  /** @deprecated use `ClientRegistrationApiResponse$inboundSchema` instead. */
  export const inboundSchema = ClientRegistrationApiResponse$inboundSchema;
  /** @deprecated use `ClientRegistrationApiResponse$outboundSchema` instead. */
  export const outboundSchema = ClientRegistrationApiResponse$outboundSchema;
  /** @deprecated use `ClientRegistrationApiResponse$Outbound` instead. */
  export type Outbound = ClientRegistrationApiResponse$Outbound;
}

export function clientRegistrationApiResponseToJSON(
  clientRegistrationApiResponse: ClientRegistrationApiResponse,
): string {
  return JSON.stringify(
    ClientRegistrationApiResponse$outboundSchema.parse(
      clientRegistrationApiResponse,
    ),
  );
}

export function clientRegistrationApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<ClientRegistrationApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientRegistrationApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientRegistrationApiResponse' from JSON`,
  );
}
