/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type AuthAuthorizationIssueApiFormRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  apilBraceserviceIdRBraceAuthAuthorizationIssue:
    models.APILBraceserviceIdRBraceAuthAuthorizationIssue;
};

/**
 * The next action that the authorization server implementation should take.
 */
export const AuthAuthorizationIssueApiFormAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Location: "LOCATION",
  Form: "FORM",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type AuthAuthorizationIssueApiFormAction = ClosedEnum<
  typeof AuthAuthorizationIssueApiFormAction
>;

export type AuthAuthorizationIssueApiFormResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: AuthAuthorizationIssueApiFormAction | undefined;
  /**
   * The content that the authorization server implementation is to return to the client application.
   *
   * @remarks
   * Its format varies depending on the value of `action` parameter.
   */
  responseContent?: string | undefined;
  /**
   * The newly issued access token. Note that an access token is issued from an authorization endpoint only
   *
   * @remarks
   * when `response_type` contains token.
   */
  accessToken?: string | undefined;
  /**
   * The datetime at which the newly issued access token will expire. The value is represented in milliseconds
   *
   * @remarks
   * since the Unix epoch (1970-01-01).
   */
  accessTokenExpiresAt?: number | undefined;
  /**
   * The duration of the newly issued access token in seconds.
   *
   * @remarks
   */
  accessTokenDuration?: number | undefined;
  /**
   * The newly issued ID token. Note that an ID token is issued from an authorization endpoint only
   *
   * @remarks
   * when `response_type` contains `id_token`.
   */
  idToken?: string | undefined;
  /**
   * The newly issued authorization code. Note that an authorization code is issued only
   *
   * @remarks
   * when `response_type` contains code.
   */
  authorizationCode?: string | undefined;
  /**
   * The newly issued access token in JWT format. If the service is not configured to issue JWT-based access tokens,
   *
   * @remarks
   * this property is always set to `null`.
   */
  jwtAccessToken?: string | undefined;
  /**
   * The information about the ticket.
   *
   * @remarks
   */
  ticketInfo?: string | undefined;
};

/** @internal */
export const AuthAuthorizationIssueApiFormRequest$inboundSchema: z.ZodType<
  AuthAuthorizationIssueApiFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  APILBraceserviceIdRBraceAuthAuthorizationIssue:
    models.APILBraceserviceIdRBraceAuthAuthorizationIssue$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "APILBraceserviceIdRBraceAuthAuthorizationIssue":
      "apilBraceserviceIdRBraceAuthAuthorizationIssue",
  });
});

/** @internal */
export type AuthAuthorizationIssueApiFormRequest$Outbound = {
  serviceId: string;
  APILBraceserviceIdRBraceAuthAuthorizationIssue:
    models.APILBraceserviceIdRBraceAuthAuthorizationIssue$Outbound;
};

/** @internal */
export const AuthAuthorizationIssueApiFormRequest$outboundSchema: z.ZodType<
  AuthAuthorizationIssueApiFormRequest$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationIssueApiFormRequest
> = z.object({
  serviceId: z.string(),
  apilBraceserviceIdRBraceAuthAuthorizationIssue:
    models.APILBraceserviceIdRBraceAuthAuthorizationIssue$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    apilBraceserviceIdRBraceAuthAuthorizationIssue:
      "APILBraceserviceIdRBraceAuthAuthorizationIssue",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationIssueApiFormRequest$ {
  /** @deprecated use `AuthAuthorizationIssueApiFormRequest$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationIssueApiFormRequest$inboundSchema;
  /** @deprecated use `AuthAuthorizationIssueApiFormRequest$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationIssueApiFormRequest$outboundSchema;
  /** @deprecated use `AuthAuthorizationIssueApiFormRequest$Outbound` instead. */
  export type Outbound = AuthAuthorizationIssueApiFormRequest$Outbound;
}

export function authAuthorizationIssueApiFormRequestToJSON(
  authAuthorizationIssueApiFormRequest: AuthAuthorizationIssueApiFormRequest,
): string {
  return JSON.stringify(
    AuthAuthorizationIssueApiFormRequest$outboundSchema.parse(
      authAuthorizationIssueApiFormRequest,
    ),
  );
}

export function authAuthorizationIssueApiFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<AuthAuthorizationIssueApiFormRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AuthAuthorizationIssueApiFormRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthAuthorizationIssueApiFormRequest' from JSON`,
  );
}

/** @internal */
export const AuthAuthorizationIssueApiFormAction$inboundSchema: z.ZodNativeEnum<
  typeof AuthAuthorizationIssueApiFormAction
> = z.nativeEnum(AuthAuthorizationIssueApiFormAction);

/** @internal */
export const AuthAuthorizationIssueApiFormAction$outboundSchema:
  z.ZodNativeEnum<typeof AuthAuthorizationIssueApiFormAction> =
    AuthAuthorizationIssueApiFormAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationIssueApiFormAction$ {
  /** @deprecated use `AuthAuthorizationIssueApiFormAction$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationIssueApiFormAction$inboundSchema;
  /** @deprecated use `AuthAuthorizationIssueApiFormAction$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationIssueApiFormAction$outboundSchema;
}

/** @internal */
export const AuthAuthorizationIssueApiFormResponse$inboundSchema: z.ZodType<
  AuthAuthorizationIssueApiFormResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthAuthorizationIssueApiFormAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
  accessToken: z.string().optional(),
  accessTokenExpiresAt: z.number().int().optional(),
  accessTokenDuration: z.number().int().optional(),
  idToken: z.string().optional(),
  authorizationCode: z.string().optional(),
  jwtAccessToken: z.string().optional(),
  ticketInfo: z.string().optional(),
});

/** @internal */
export type AuthAuthorizationIssueApiFormResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  accessToken?: string | undefined;
  accessTokenExpiresAt?: number | undefined;
  accessTokenDuration?: number | undefined;
  idToken?: string | undefined;
  authorizationCode?: string | undefined;
  jwtAccessToken?: string | undefined;
  ticketInfo?: string | undefined;
};

/** @internal */
export const AuthAuthorizationIssueApiFormResponse$outboundSchema: z.ZodType<
  AuthAuthorizationIssueApiFormResponse$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationIssueApiFormResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthAuthorizationIssueApiFormAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
  accessToken: z.string().optional(),
  accessTokenExpiresAt: z.number().int().optional(),
  accessTokenDuration: z.number().int().optional(),
  idToken: z.string().optional(),
  authorizationCode: z.string().optional(),
  jwtAccessToken: z.string().optional(),
  ticketInfo: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationIssueApiFormResponse$ {
  /** @deprecated use `AuthAuthorizationIssueApiFormResponse$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationIssueApiFormResponse$inboundSchema;
  /** @deprecated use `AuthAuthorizationIssueApiFormResponse$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationIssueApiFormResponse$outboundSchema;
  /** @deprecated use `AuthAuthorizationIssueApiFormResponse$Outbound` instead. */
  export type Outbound = AuthAuthorizationIssueApiFormResponse$Outbound;
}

export function authAuthorizationIssueApiFormResponseToJSON(
  authAuthorizationIssueApiFormResponse: AuthAuthorizationIssueApiFormResponse,
): string {
  return JSON.stringify(
    AuthAuthorizationIssueApiFormResponse$outboundSchema.parse(
      authAuthorizationIssueApiFormResponse,
    ),
  );
}

export function authAuthorizationIssueApiFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<AuthAuthorizationIssueApiFormResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AuthAuthorizationIssueApiFormResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthAuthorizationIssueApiFormResponse' from JSON`,
  );
}
