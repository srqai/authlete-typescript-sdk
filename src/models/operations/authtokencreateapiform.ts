/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type AuthTokenCreateApiFormRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  apilBraceserviceIdRBraceAuthTokenCreate:
    models.APILBraceserviceIdRBraceAuthTokenCreate;
};

/**
 * The next action that the authorization server implementation should take.
 */
export const AuthTokenCreateApiFormAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Forbidden: "FORBIDDEN",
  Ok: "OK",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type AuthTokenCreateApiFormAction = ClosedEnum<
  typeof AuthTokenCreateApiFormAction
>;

export type AuthTokenCreateApiFormResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: AuthTokenCreateApiFormAction | undefined;
  /**
   * The newly issued access token.
   */
  accessToken?: string | undefined;
  /**
   * The ID of the client application associated with the access token.
   *
   * @remarks
   */
  clientId?: number | undefined;
  /**
   * The time at which the access token expires.
   *
   * @remarks
   */
  expiresAt?: number | undefined;
  /**
   * The duration of the newly issued access token in seconds.
   *
   * @remarks
   */
  expiresIn?: number | undefined;
  /**
   * The grant type for the newly issued access token.
   *
   * @remarks
   */
  grantType?: string | undefined;
  /**
   * The extra properties associated with the access token.
   *
   * @remarks
   */
  properties?: Array<models.Property> | undefined;
  /**
   * The newly issued refresh token.
   *
   * @remarks
   */
  refreshToken?: string | undefined;
  /**
   * Scopes which are associated with the access token.
   *
   * @remarks
   */
  scopes?: Array<string> | undefined;
  /**
   * The subject (= unique identifier) of the user associated with the newly issued access
   *
   * @remarks
   * token.
   */
  subject?: string | undefined;
  /**
   * The token type of the access token.
   *
   * @remarks
   */
  tokenType?: string | undefined;
  /**
   * If the authorization server is configured to issue JWT-based access tokens (= if `Service.accessTokenSignAlg`
   *
   * @remarks
   * is set to a `non-null` value), a JWT-based access token is issued along with the original
   * random-string one.
   */
  jwtAccessToken?: string | undefined;
  /**
   * The authorization details. This represents the value of the `authorization_details`
   *
   * @remarks
   * request parameter in the preceding device authorization request which is defined in
   * "OAuth 2.0 Rich Authorization Requests".
   */
  authorizationDetails?: models.AuthorizationDetails | undefined;
  /**
   * the flag which indicates whether the access token is for an external
   *
   * @remarks
   * attachment.
   */
  forExternalAttachment?: boolean | undefined;
  /**
   * Set the unique token identifier.
   *
   * @remarks
   */
  tokenId?: string | undefined;
  /**
   * The scopes associated with the refresh token. May be null.
   *
   * @remarks
   */
  refreshTokenScopes?: Array<string> | undefined;
};

/** @internal */
export const AuthTokenCreateApiFormRequest$inboundSchema: z.ZodType<
  AuthTokenCreateApiFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  APILBraceserviceIdRBraceAuthTokenCreate:
    models.APILBraceserviceIdRBraceAuthTokenCreate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "APILBraceserviceIdRBraceAuthTokenCreate":
      "apilBraceserviceIdRBraceAuthTokenCreate",
  });
});

/** @internal */
export type AuthTokenCreateApiFormRequest$Outbound = {
  serviceId: string;
  APILBraceserviceIdRBraceAuthTokenCreate:
    models.APILBraceserviceIdRBraceAuthTokenCreate$Outbound;
};

/** @internal */
export const AuthTokenCreateApiFormRequest$outboundSchema: z.ZodType<
  AuthTokenCreateApiFormRequest$Outbound,
  z.ZodTypeDef,
  AuthTokenCreateApiFormRequest
> = z.object({
  serviceId: z.string(),
  apilBraceserviceIdRBraceAuthTokenCreate:
    models.APILBraceserviceIdRBraceAuthTokenCreate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    apilBraceserviceIdRBraceAuthTokenCreate:
      "APILBraceserviceIdRBraceAuthTokenCreate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenCreateApiFormRequest$ {
  /** @deprecated use `AuthTokenCreateApiFormRequest$inboundSchema` instead. */
  export const inboundSchema = AuthTokenCreateApiFormRequest$inboundSchema;
  /** @deprecated use `AuthTokenCreateApiFormRequest$outboundSchema` instead. */
  export const outboundSchema = AuthTokenCreateApiFormRequest$outboundSchema;
  /** @deprecated use `AuthTokenCreateApiFormRequest$Outbound` instead. */
  export type Outbound = AuthTokenCreateApiFormRequest$Outbound;
}

export function authTokenCreateApiFormRequestToJSON(
  authTokenCreateApiFormRequest: AuthTokenCreateApiFormRequest,
): string {
  return JSON.stringify(
    AuthTokenCreateApiFormRequest$outboundSchema.parse(
      authTokenCreateApiFormRequest,
    ),
  );
}

export function authTokenCreateApiFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenCreateApiFormRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenCreateApiFormRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenCreateApiFormRequest' from JSON`,
  );
}

/** @internal */
export const AuthTokenCreateApiFormAction$inboundSchema: z.ZodNativeEnum<
  typeof AuthTokenCreateApiFormAction
> = z.nativeEnum(AuthTokenCreateApiFormAction);

/** @internal */
export const AuthTokenCreateApiFormAction$outboundSchema: z.ZodNativeEnum<
  typeof AuthTokenCreateApiFormAction
> = AuthTokenCreateApiFormAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenCreateApiFormAction$ {
  /** @deprecated use `AuthTokenCreateApiFormAction$inboundSchema` instead. */
  export const inboundSchema = AuthTokenCreateApiFormAction$inboundSchema;
  /** @deprecated use `AuthTokenCreateApiFormAction$outboundSchema` instead. */
  export const outboundSchema = AuthTokenCreateApiFormAction$outboundSchema;
}

/** @internal */
export const AuthTokenCreateApiFormResponse$inboundSchema: z.ZodType<
  AuthTokenCreateApiFormResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthTokenCreateApiFormAction$inboundSchema.optional(),
  accessToken: z.string().optional(),
  clientId: z.number().int().optional(),
  expiresAt: z.number().int().optional(),
  expiresIn: z.number().int().optional(),
  grantType: z.string().optional(),
  properties: z.array(models.Property$inboundSchema).optional(),
  refreshToken: z.string().optional(),
  scopes: z.array(z.string()).optional(),
  subject: z.string().optional(),
  tokenType: z.string().optional(),
  jwtAccessToken: z.string().optional(),
  authorizationDetails: models.AuthorizationDetails$inboundSchema.optional(),
  forExternalAttachment: z.boolean().optional(),
  tokenId: z.string().optional(),
  refreshTokenScopes: z.array(z.string()).optional(),
});

/** @internal */
export type AuthTokenCreateApiFormResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  accessToken?: string | undefined;
  clientId?: number | undefined;
  expiresAt?: number | undefined;
  expiresIn?: number | undefined;
  grantType?: string | undefined;
  properties?: Array<models.Property$Outbound> | undefined;
  refreshToken?: string | undefined;
  scopes?: Array<string> | undefined;
  subject?: string | undefined;
  tokenType?: string | undefined;
  jwtAccessToken?: string | undefined;
  authorizationDetails?: models.AuthorizationDetails$Outbound | undefined;
  forExternalAttachment?: boolean | undefined;
  tokenId?: string | undefined;
  refreshTokenScopes?: Array<string> | undefined;
};

/** @internal */
export const AuthTokenCreateApiFormResponse$outboundSchema: z.ZodType<
  AuthTokenCreateApiFormResponse$Outbound,
  z.ZodTypeDef,
  AuthTokenCreateApiFormResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthTokenCreateApiFormAction$outboundSchema.optional(),
  accessToken: z.string().optional(),
  clientId: z.number().int().optional(),
  expiresAt: z.number().int().optional(),
  expiresIn: z.number().int().optional(),
  grantType: z.string().optional(),
  properties: z.array(models.Property$outboundSchema).optional(),
  refreshToken: z.string().optional(),
  scopes: z.array(z.string()).optional(),
  subject: z.string().optional(),
  tokenType: z.string().optional(),
  jwtAccessToken: z.string().optional(),
  authorizationDetails: models.AuthorizationDetails$outboundSchema.optional(),
  forExternalAttachment: z.boolean().optional(),
  tokenId: z.string().optional(),
  refreshTokenScopes: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenCreateApiFormResponse$ {
  /** @deprecated use `AuthTokenCreateApiFormResponse$inboundSchema` instead. */
  export const inboundSchema = AuthTokenCreateApiFormResponse$inboundSchema;
  /** @deprecated use `AuthTokenCreateApiFormResponse$outboundSchema` instead. */
  export const outboundSchema = AuthTokenCreateApiFormResponse$outboundSchema;
  /** @deprecated use `AuthTokenCreateApiFormResponse$Outbound` instead. */
  export type Outbound = AuthTokenCreateApiFormResponse$Outbound;
}

export function authTokenCreateApiFormResponseToJSON(
  authTokenCreateApiFormResponse: AuthTokenCreateApiFormResponse,
): string {
  return JSON.stringify(
    AuthTokenCreateApiFormResponse$outboundSchema.parse(
      authTokenCreateApiFormResponse,
    ),
  );
}

export function authTokenCreateApiFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenCreateApiFormResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenCreateApiFormResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenCreateApiFormResponse' from JSON`,
  );
}
