/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ClientGetListApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  /**
   * The developer of client applications. The default value is null. If this parameter is not set
   *
   * @remarks
   * to `null`, client application of the specified developer are returned. Otherwise, all client
   * applications that belong to the service are returned.
   */
  developer?: string | undefined;
  /**
   * Start index (inclusive) of the result set. The default value is 0. Must not be a negative number.
   */
  start?: number | undefined;
  /**
   * End index (exclusive) of the result set. The default value is 5. Must not be a negative number.
   */
  end?: number | undefined;
};

/**
 * Successful operation
 */
export type ClientGetListApiResponse = {
  /**
   * Start index (inclusive) of the result set of the query.
   *
   * @remarks
   */
  start?: number | undefined;
  /**
   * End index (exclusive) of the result set of the query.
   *
   * @remarks
   */
  end?: number | undefined;
  /**
   * Total number of clients that belong to the service. This doesn't mean the number of clients
   *
   * @remarks
   * contained in the response.
   */
  totalCount?: number | undefined;
  /**
   * An array of clients.
   *
   * @remarks
   */
  clients?: Array<models.Client> | undefined;
};

/** @internal */
export const ClientGetListApiRequest$inboundSchema: z.ZodType<
  ClientGetListApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  developer: z.string().optional(),
  start: z.number().int().optional(),
  end: z.number().int().optional(),
});

/** @internal */
export type ClientGetListApiRequest$Outbound = {
  serviceId: string;
  developer?: string | undefined;
  start?: number | undefined;
  end?: number | undefined;
};

/** @internal */
export const ClientGetListApiRequest$outboundSchema: z.ZodType<
  ClientGetListApiRequest$Outbound,
  z.ZodTypeDef,
  ClientGetListApiRequest
> = z.object({
  serviceId: z.string(),
  developer: z.string().optional(),
  start: z.number().int().optional(),
  end: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetListApiRequest$ {
  /** @deprecated use `ClientGetListApiRequest$inboundSchema` instead. */
  export const inboundSchema = ClientGetListApiRequest$inboundSchema;
  /** @deprecated use `ClientGetListApiRequest$outboundSchema` instead. */
  export const outboundSchema = ClientGetListApiRequest$outboundSchema;
  /** @deprecated use `ClientGetListApiRequest$Outbound` instead. */
  export type Outbound = ClientGetListApiRequest$Outbound;
}

export function clientGetListApiRequestToJSON(
  clientGetListApiRequest: ClientGetListApiRequest,
): string {
  return JSON.stringify(
    ClientGetListApiRequest$outboundSchema.parse(clientGetListApiRequest),
  );
}

export function clientGetListApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<ClientGetListApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientGetListApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientGetListApiRequest' from JSON`,
  );
}

/** @internal */
export const ClientGetListApiResponse$inboundSchema: z.ZodType<
  ClientGetListApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  start: z.number().int().optional(),
  end: z.number().int().optional(),
  totalCount: z.number().int().optional(),
  clients: z.array(models.Client$inboundSchema).optional(),
});

/** @internal */
export type ClientGetListApiResponse$Outbound = {
  start?: number | undefined;
  end?: number | undefined;
  totalCount?: number | undefined;
  clients?: Array<models.Client$Outbound> | undefined;
};

/** @internal */
export const ClientGetListApiResponse$outboundSchema: z.ZodType<
  ClientGetListApiResponse$Outbound,
  z.ZodTypeDef,
  ClientGetListApiResponse
> = z.object({
  start: z.number().int().optional(),
  end: z.number().int().optional(),
  totalCount: z.number().int().optional(),
  clients: z.array(models.Client$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetListApiResponse$ {
  /** @deprecated use `ClientGetListApiResponse$inboundSchema` instead. */
  export const inboundSchema = ClientGetListApiResponse$inboundSchema;
  /** @deprecated use `ClientGetListApiResponse$outboundSchema` instead. */
  export const outboundSchema = ClientGetListApiResponse$outboundSchema;
  /** @deprecated use `ClientGetListApiResponse$Outbound` instead. */
  export type Outbound = ClientGetListApiResponse$Outbound;
}

export function clientGetListApiResponseToJSON(
  clientGetListApiResponse: ClientGetListApiResponse,
): string {
  return JSON.stringify(
    ClientGetListApiResponse$outboundSchema.parse(clientGetListApiResponse),
  );
}

export function clientGetListApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<ClientGetListApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientGetListApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientGetListApiResponse' from JSON`,
  );
}
