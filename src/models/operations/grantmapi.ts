/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The grant management action of the device authorization request.
 *
 * @remarks
 *
 * The `grant_management_action` request parameter is defined in
 * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).
 */
export const GmAction = {
  Create: "CREATE",
  Query: "QUERY",
  Replace: "REPLACE",
  Revoke: "REVOKE",
  Merge: "MERGE",
} as const;
/**
 * The grant management action of the device authorization request.
 *
 * @remarks
 *
 * The `grant_management_action` request parameter is defined in
 * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).
 */
export type GmAction = ClosedEnum<typeof GmAction>;

/**
 * An object containing schema data
 */
export type GrantMApiRequestBody = {
  /**
   * An access token to introspect.
   */
  accessToken?: string | undefined;
  /**
   * A string array listing names of scopes which the caller (= a protected resource endpoint of the
   *
   * @remarks
   * service) requires. When the content type of the request from the service is `application/x-www-form-urlencoded`,
   * the format of `scopes` is a space-separated list of scope names.
   *
   * If this parameter is a non-empty array and if it contains a scope which is not covered by the
   * access token,`action=FORBIDDEN` with `error=insufficient_scope` is returned from Authlete.
   */
  scopes?: Array<string> | undefined;
  /**
   * A subject (= a user account managed by the service) whom the caller (= a protected resource
   *
   * @remarks
   * endpoint of the service) requires.
   *
   * If this parameter is not `null` and if the value does not match the subject who is associated
   * with the access token, `action=FORBIDDEN` with `error=invalid_request` is returned from Authlete.
   */
  subject?: string | undefined;
  /**
   * Client certificate in PEM format, used to validate binding against access tokens using the TLS
   *
   * @remarks
   * client certificate confirmation method.
   */
  clientCertificate?: string | undefined;
  /**
   * `DPoP` header presented by the client during the request to the resource server.
   *
   * @remarks
   *
   * The header contains a signed JWT which includes the public key that is paired with the private
   * key used to sign the JWT. See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application
   * Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop) for details.
   */
  dpop?: string | undefined;
  /**
   * HTTP method of the request from the client to the protected resource endpoint. This field is
   *
   * @remarks
   * used to validate the `DPoP` header.
   *
   * See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
   * for details.
   */
  htm?: string | undefined;
  /**
   * URL of the protected resource endpoint. This field is used to validate the `DPoP` header.
   *
   * @remarks
   *
   * See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
   * for details.
   */
  htu?: string | undefined;
  /**
   * The resources specified by the `resource` request parameters in the token request. See "Resource Indicators for OAuth 2.0" for details.
   *
   * @remarks
   */
  resources?: Array<string> | undefined;
  /**
   * The grant management action of the device authorization request.
   *
   * @remarks
   *
   * The `grant_management_action` request parameter is defined in
   * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).
   */
  gmAction?: GmAction | undefined;
  /**
   * The value of the `grant_id` request parameter of the device authorization request.
   *
   * @remarks
   *
   * The `grant_id` request parameter is defined in
   * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
   * , which is supported by Authlete 2.3 and newer versions.
   */
  grantId?: string | undefined;
};

export type GrantMApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: GrantMApiRequestBody;
};

/**
 * The next action that the authorization server implementation should take.
 */
export const GrantMApiAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Created: "CREATED",
  Unauthorized: "UNAUTHORIZED",
  Forbidden: "FORBIDDEN",
  Json: "JSON",
  Jwt: "JWT",
  Ok: "OK",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type GrantMApiAction = ClosedEnum<typeof GrantMApiAction>;

/**
 * An object containing schema data
 */
export type GrantMApiResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: GrantMApiAction | undefined;
  /**
   * The content that the authorization server implementation is to return to the client application.
   *
   * @remarks
   * Its format varies depending on the value of `action` parameter.
   */
  responseContent?: string | undefined;
  /**
   * Get the expected nonce value for DPoP proof JWT, which should be used
   *
   * @remarks
   * as the value of the `DPoP-Nonce` HTTP header.
   */
  dpopNonce?: string | undefined;
};

/** @internal */
export const GmAction$inboundSchema: z.ZodNativeEnum<typeof GmAction> = z
  .nativeEnum(GmAction);

/** @internal */
export const GmAction$outboundSchema: z.ZodNativeEnum<typeof GmAction> =
  GmAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GmAction$ {
  /** @deprecated use `GmAction$inboundSchema` instead. */
  export const inboundSchema = GmAction$inboundSchema;
  /** @deprecated use `GmAction$outboundSchema` instead. */
  export const outboundSchema = GmAction$outboundSchema;
}

/** @internal */
export const GrantMApiRequestBody$inboundSchema: z.ZodType<
  GrantMApiRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessToken: z.string().optional(),
  scopes: z.array(z.string()).optional(),
  subject: z.string().optional(),
  clientCertificate: z.string().optional(),
  dpop: z.string().optional(),
  htm: z.string().optional(),
  htu: z.string().optional(),
  resources: z.array(z.string()).optional(),
  gmAction: GmAction$inboundSchema.optional(),
  grantId: z.string().optional(),
});

/** @internal */
export type GrantMApiRequestBody$Outbound = {
  accessToken?: string | undefined;
  scopes?: Array<string> | undefined;
  subject?: string | undefined;
  clientCertificate?: string | undefined;
  dpop?: string | undefined;
  htm?: string | undefined;
  htu?: string | undefined;
  resources?: Array<string> | undefined;
  gmAction?: string | undefined;
  grantId?: string | undefined;
};

/** @internal */
export const GrantMApiRequestBody$outboundSchema: z.ZodType<
  GrantMApiRequestBody$Outbound,
  z.ZodTypeDef,
  GrantMApiRequestBody
> = z.object({
  accessToken: z.string().optional(),
  scopes: z.array(z.string()).optional(),
  subject: z.string().optional(),
  clientCertificate: z.string().optional(),
  dpop: z.string().optional(),
  htm: z.string().optional(),
  htu: z.string().optional(),
  resources: z.array(z.string()).optional(),
  gmAction: GmAction$outboundSchema.optional(),
  grantId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GrantMApiRequestBody$ {
  /** @deprecated use `GrantMApiRequestBody$inboundSchema` instead. */
  export const inboundSchema = GrantMApiRequestBody$inboundSchema;
  /** @deprecated use `GrantMApiRequestBody$outboundSchema` instead. */
  export const outboundSchema = GrantMApiRequestBody$outboundSchema;
  /** @deprecated use `GrantMApiRequestBody$Outbound` instead. */
  export type Outbound = GrantMApiRequestBody$Outbound;
}

export function grantMApiRequestBodyToJSON(
  grantMApiRequestBody: GrantMApiRequestBody,
): string {
  return JSON.stringify(
    GrantMApiRequestBody$outboundSchema.parse(grantMApiRequestBody),
  );
}

export function grantMApiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<GrantMApiRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GrantMApiRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GrantMApiRequestBody' from JSON`,
  );
}

/** @internal */
export const GrantMApiRequest$inboundSchema: z.ZodType<
  GrantMApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() => GrantMApiRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type GrantMApiRequest$Outbound = {
  serviceId: string;
  RequestBody: GrantMApiRequestBody$Outbound;
};

/** @internal */
export const GrantMApiRequest$outboundSchema: z.ZodType<
  GrantMApiRequest$Outbound,
  z.ZodTypeDef,
  GrantMApiRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() => GrantMApiRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GrantMApiRequest$ {
  /** @deprecated use `GrantMApiRequest$inboundSchema` instead. */
  export const inboundSchema = GrantMApiRequest$inboundSchema;
  /** @deprecated use `GrantMApiRequest$outboundSchema` instead. */
  export const outboundSchema = GrantMApiRequest$outboundSchema;
  /** @deprecated use `GrantMApiRequest$Outbound` instead. */
  export type Outbound = GrantMApiRequest$Outbound;
}

export function grantMApiRequestToJSON(
  grantMApiRequest: GrantMApiRequest,
): string {
  return JSON.stringify(
    GrantMApiRequest$outboundSchema.parse(grantMApiRequest),
  );
}

export function grantMApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<GrantMApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GrantMApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GrantMApiRequest' from JSON`,
  );
}

/** @internal */
export const GrantMApiAction$inboundSchema: z.ZodNativeEnum<
  typeof GrantMApiAction
> = z.nativeEnum(GrantMApiAction);

/** @internal */
export const GrantMApiAction$outboundSchema: z.ZodNativeEnum<
  typeof GrantMApiAction
> = GrantMApiAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GrantMApiAction$ {
  /** @deprecated use `GrantMApiAction$inboundSchema` instead. */
  export const inboundSchema = GrantMApiAction$inboundSchema;
  /** @deprecated use `GrantMApiAction$outboundSchema` instead. */
  export const outboundSchema = GrantMApiAction$outboundSchema;
}

/** @internal */
export const GrantMApiResponse$inboundSchema: z.ZodType<
  GrantMApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: GrantMApiAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
  dpopNonce: z.string().optional(),
});

/** @internal */
export type GrantMApiResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  dpopNonce?: string | undefined;
};

/** @internal */
export const GrantMApiResponse$outboundSchema: z.ZodType<
  GrantMApiResponse$Outbound,
  z.ZodTypeDef,
  GrantMApiResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: GrantMApiAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
  dpopNonce: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GrantMApiResponse$ {
  /** @deprecated use `GrantMApiResponse$inboundSchema` instead. */
  export const inboundSchema = GrantMApiResponse$inboundSchema;
  /** @deprecated use `GrantMApiResponse$outboundSchema` instead. */
  export const outboundSchema = GrantMApiResponse$outboundSchema;
  /** @deprecated use `GrantMApiResponse$Outbound` instead. */
  export type Outbound = GrantMApiResponse$Outbound;
}

export function grantMApiResponseToJSON(
  grantMApiResponse: GrantMApiResponse,
): string {
  return JSON.stringify(
    GrantMApiResponse$outboundSchema.parse(grantMApiResponse),
  );
}

export function grantMApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<GrantMApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GrantMApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GrantMApiResponse' from JSON`,
  );
}
