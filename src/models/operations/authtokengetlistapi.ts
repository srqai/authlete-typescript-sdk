/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type AuthTokenGetListApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  /**
   * Client Identifier (client ID or client ID alias).
   *
   * @remarks
   */
  clientIdentifier?: string | undefined;
  /**
   * Unique user ID.
   *
   * @remarks
   */
  subject?: string | undefined;
  /**
   * Start index of search results (inclusive). The default value is 0.
   */
  start?: number | undefined;
  /**
   * End index of search results (exclusive). The default value is 5.
   *
   * @remarks
   */
  end?: number | undefined;
};

export type AuthTokenGetListApiClient = {
  /**
   * The sequential number of the client. The value of this property is assigned by Authlete.
   *
   * @remarks
   */
  number?: number | undefined;
  /**
   * The name of the client application. This property corresponds to `client_name` in
   *
   * @remarks
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  clientName?: string | undefined;
  /**
   * Client names with language tags. If the client application has different names for different
   *
   * @remarks
   * languages, this property can be used to register the names.
   */
  clientNames?: Array<models.TaggedValue> | undefined;
  /**
   * The description about the client application.
   */
  description?: string | undefined;
  /**
   * Descriptions about the client application with language tags. If the client application has different
   *
   * @remarks
   * descriptions for different languages, this property can be used to register the descriptions.
   */
  descriptions?: Array<models.TaggedValue> | undefined;
  /**
   * The client identifier used in Authlete API calls. The value of this property is assigned by Authlete.
   */
  clientId?: number | undefined;
  /**
   * The value of the client's `client_id` property used in OAuth and OpenID Connect calls. By
   *
   * @remarks
   * default, this is a string version of the `clientId` property.
   */
  clientIdAlias?: string | undefined;
  /**
   * Deprecated. Always set to `true`.
   */
  clientIdAliasEnabled?: boolean | undefined;
  /**
   * The client type, either `CONFIDENTIAL` or `PUBLIC`. See [RFC 6749, 2.1. Client Types](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1)
   *
   * @remarks
   * for details.
   */
  clientType?: models.ClientTypeProperties | undefined;
};

/**
 * Successful operation
 */
export type AuthTokenGetListApiResponse = {
  /**
   * Start index of search results (inclusive).
   *
   * @remarks
   */
  start?: number | undefined;
  /**
   * End index of search results (exclusive).
   *
   * @remarks
   */
  end?: number | undefined;
  /**
   * Unique ID of a client developer.
   *
   * @remarks
   */
  totalCount?: number | undefined;
  client?: AuthTokenGetListApiClient | undefined;
  /**
   * Unique user ID of an end-user.
   *
   * @remarks
   */
  subject?: string | undefined;
  /**
   * An array of access tokens.
   *
   * @remarks
   */
  accessTokens?: Array<models.AccessToken> | undefined;
};

/** @internal */
export const AuthTokenGetListApiRequest$inboundSchema: z.ZodType<
  AuthTokenGetListApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  clientIdentifier: z.string().optional(),
  subject: z.string().optional(),
  start: z.number().int().optional(),
  end: z.number().int().optional(),
});

/** @internal */
export type AuthTokenGetListApiRequest$Outbound = {
  serviceId: string;
  clientIdentifier?: string | undefined;
  subject?: string | undefined;
  start?: number | undefined;
  end?: number | undefined;
};

/** @internal */
export const AuthTokenGetListApiRequest$outboundSchema: z.ZodType<
  AuthTokenGetListApiRequest$Outbound,
  z.ZodTypeDef,
  AuthTokenGetListApiRequest
> = z.object({
  serviceId: z.string(),
  clientIdentifier: z.string().optional(),
  subject: z.string().optional(),
  start: z.number().int().optional(),
  end: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenGetListApiRequest$ {
  /** @deprecated use `AuthTokenGetListApiRequest$inboundSchema` instead. */
  export const inboundSchema = AuthTokenGetListApiRequest$inboundSchema;
  /** @deprecated use `AuthTokenGetListApiRequest$outboundSchema` instead. */
  export const outboundSchema = AuthTokenGetListApiRequest$outboundSchema;
  /** @deprecated use `AuthTokenGetListApiRequest$Outbound` instead. */
  export type Outbound = AuthTokenGetListApiRequest$Outbound;
}

export function authTokenGetListApiRequestToJSON(
  authTokenGetListApiRequest: AuthTokenGetListApiRequest,
): string {
  return JSON.stringify(
    AuthTokenGetListApiRequest$outboundSchema.parse(authTokenGetListApiRequest),
  );
}

export function authTokenGetListApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenGetListApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenGetListApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenGetListApiRequest' from JSON`,
  );
}

/** @internal */
export const AuthTokenGetListApiClient$inboundSchema: z.ZodType<
  AuthTokenGetListApiClient,
  z.ZodTypeDef,
  unknown
> = z.object({
  number: z.number().int().optional(),
  clientName: z.string().optional(),
  clientNames: z.array(models.TaggedValue$inboundSchema).optional(),
  description: z.string().optional(),
  descriptions: z.array(models.TaggedValue$inboundSchema).optional(),
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasEnabled: z.boolean().optional(),
  clientType: models.ClientTypeProperties$inboundSchema.optional(),
});

/** @internal */
export type AuthTokenGetListApiClient$Outbound = {
  number?: number | undefined;
  clientName?: string | undefined;
  clientNames?: Array<models.TaggedValue$Outbound> | undefined;
  description?: string | undefined;
  descriptions?: Array<models.TaggedValue$Outbound> | undefined;
  clientId?: number | undefined;
  clientIdAlias?: string | undefined;
  clientIdAliasEnabled?: boolean | undefined;
  clientType?: string | undefined;
};

/** @internal */
export const AuthTokenGetListApiClient$outboundSchema: z.ZodType<
  AuthTokenGetListApiClient$Outbound,
  z.ZodTypeDef,
  AuthTokenGetListApiClient
> = z.object({
  number: z.number().int().optional(),
  clientName: z.string().optional(),
  clientNames: z.array(models.TaggedValue$outboundSchema).optional(),
  description: z.string().optional(),
  descriptions: z.array(models.TaggedValue$outboundSchema).optional(),
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasEnabled: z.boolean().optional(),
  clientType: models.ClientTypeProperties$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenGetListApiClient$ {
  /** @deprecated use `AuthTokenGetListApiClient$inboundSchema` instead. */
  export const inboundSchema = AuthTokenGetListApiClient$inboundSchema;
  /** @deprecated use `AuthTokenGetListApiClient$outboundSchema` instead. */
  export const outboundSchema = AuthTokenGetListApiClient$outboundSchema;
  /** @deprecated use `AuthTokenGetListApiClient$Outbound` instead. */
  export type Outbound = AuthTokenGetListApiClient$Outbound;
}

export function authTokenGetListApiClientToJSON(
  authTokenGetListApiClient: AuthTokenGetListApiClient,
): string {
  return JSON.stringify(
    AuthTokenGetListApiClient$outboundSchema.parse(authTokenGetListApiClient),
  );
}

export function authTokenGetListApiClientFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenGetListApiClient, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenGetListApiClient$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenGetListApiClient' from JSON`,
  );
}

/** @internal */
export const AuthTokenGetListApiResponse$inboundSchema: z.ZodType<
  AuthTokenGetListApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  start: z.number().int().optional(),
  end: z.number().int().optional(),
  totalCount: z.number().int().optional(),
  client: z.lazy(() => AuthTokenGetListApiClient$inboundSchema).optional(),
  subject: z.string().optional(),
  accessTokens: z.array(models.AccessToken$inboundSchema).optional(),
});

/** @internal */
export type AuthTokenGetListApiResponse$Outbound = {
  start?: number | undefined;
  end?: number | undefined;
  totalCount?: number | undefined;
  client?: AuthTokenGetListApiClient$Outbound | undefined;
  subject?: string | undefined;
  accessTokens?: Array<models.AccessToken$Outbound> | undefined;
};

/** @internal */
export const AuthTokenGetListApiResponse$outboundSchema: z.ZodType<
  AuthTokenGetListApiResponse$Outbound,
  z.ZodTypeDef,
  AuthTokenGetListApiResponse
> = z.object({
  start: z.number().int().optional(),
  end: z.number().int().optional(),
  totalCount: z.number().int().optional(),
  client: z.lazy(() => AuthTokenGetListApiClient$outboundSchema).optional(),
  subject: z.string().optional(),
  accessTokens: z.array(models.AccessToken$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenGetListApiResponse$ {
  /** @deprecated use `AuthTokenGetListApiResponse$inboundSchema` instead. */
  export const inboundSchema = AuthTokenGetListApiResponse$inboundSchema;
  /** @deprecated use `AuthTokenGetListApiResponse$outboundSchema` instead. */
  export const outboundSchema = AuthTokenGetListApiResponse$outboundSchema;
  /** @deprecated use `AuthTokenGetListApiResponse$Outbound` instead. */
  export type Outbound = AuthTokenGetListApiResponse$Outbound;
}

export function authTokenGetListApiResponseToJSON(
  authTokenGetListApiResponse: AuthTokenGetListApiResponse,
): string {
  return JSON.stringify(
    AuthTokenGetListApiResponse$outboundSchema.parse(
      authTokenGetListApiResponse,
    ),
  );
}

export function authTokenGetListApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenGetListApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenGetListApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenGetListApiResponse' from JSON`,
  );
}
