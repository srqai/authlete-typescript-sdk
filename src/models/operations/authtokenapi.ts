/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type AuthTokenApiRequestBody = {
  /**
   * OAuth 2.0 token request parameters which are the request parameters that the OAuth 2.0 token endpoint of the authorization server
   *
   * @remarks
   * implementation received from the client application.
   *
   * The value of parameters is the entire entity body (which is formatted in `application/x-www-form-urlencoded`) of the request from
   * the client application.
   */
  parameters: string;
  /**
   * The client ID extracted from `Authorization` header of the token request from the client application.
   *
   * @remarks
   *
   * If the token endpoint of the authorization server implementation supports basic authentication as
   * a means of client authentication, and the request from the client application contained its client ID
   * in `Authorization` header, the value should be extracted and set to this parameter.
   */
  clientId?: string | undefined;
  /**
   * The client secret extracted from `Authorization` header of the token request from the client application.
   *
   * @remarks
   *
   * If the token endpoint of the authorization server implementation supports basic authentication as a means of
   * client authentication, and the request from the client application contained its client secret in `Authorization` header,
   * the value should be extracted and set to this parameter.
   */
  clientSecret?: string | undefined;
  /**
   * The client certificate from the MTLS of the token request from the client application.
   */
  clientCertificate?: string | undefined;
  /**
   * The certificate path presented by the client during client authentication. These certificates are strings in PEM format.
   *
   * @remarks
   */
  clientCertificatePath?: string | undefined;
  /**
   * Extra properties to associate with an access token. See [Extra Properties](https://www.authlete.com/developers/definitive_guide/extra_properties/)
   *
   * @remarks
   * for details.
   */
  properties?: string | undefined;
  /**
   * `DPoP` header presented by the client during the request to the token endpoint.
   *
   * @remarks
   *
   * The header contains a signed JWT which includes the public key that is paired with the private key used to sign the JWT.
   * See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
   * for details.
   */
  dpop?: string | undefined;
  /**
   * HTTP method of the token request. This field is used to validate the `DPoP` header.
   *
   * @remarks
   *
   * In normal cases, the value is `POST`. When this parameter is omitted, `POST` is used as the default value.
   * See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
   * for details.
   */
  htm?: string | undefined;
  /**
   * URL of the token endpoint. This field is used to validate the `DPoP` header.
   *
   * @remarks
   *
   * If this parameter is omitted, the `tokenEndpoint` property of the Service is used as the default value.
   * See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
   * for details.
   */
  htu?: string | undefined;
  /**
   * The representation of an access token that may be issued as a result of the Authlete API call.
   *
   * @remarks
   */
  accessToken?: string | undefined;
  /**
   * Additional claims that are added to the payload part of the JWT access token.
   *
   * @remarks
   */
  jwtAtClaims?: string | undefined;
};

export type AuthTokenApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: AuthTokenApiRequestBody;
};

/**
 * The next action that the authorization server implementation should take.
 */
export const AuthTokenApiAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  InvalidClient: "INVALID_CLIENT",
  BadRequest: "BAD_REQUEST",
  Password: "PASSWORD",
  Ok: "OK",
  TokenExchange: "TOKEN_EXCHANGE",
  JwtBearer: "JWT_BEARER",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type AuthTokenApiAction = ClosedEnum<typeof AuthTokenApiAction>;

/**
 * The grant type of the access token when the access token was created.
 *
 * @remarks
 */
export const AuthTokenApiActorTokenType = {
  UrnIetfParamsOauthTokenTypeJwt: "urn:ietf:params:oauth:token-type:jwt",
  UrnIetfParamsOauthTokenTypeAccessToken:
    "urn:ietf:params:oauth:token-type:access_token",
  UrnIetfParamsOauthTokenTypeRefreshToken:
    "urn:ietf:params:oauth:token-type:refresh_token",
  UrnIetfParamsOauthTokenTypeIdToken:
    "urn:ietf:params:oauth:token-type:id_token",
  UrnIetfParamsOauthTokenTypeSaml1: "urn:ietf:params:oauth:token-type:saml1",
  UrnIetfParamsOauthTokenTypeSaml2: "urn:ietf:params:oauth:token-type:saml2",
  DeviceCode: "DEVICE_CODE",
  TokenExchange: "TOKEN_EXCHANGE",
  JwtBearer: "JWT_BEARER",
} as const;
/**
 * The grant type of the access token when the access token was created.
 *
 * @remarks
 */
export type AuthTokenApiActorTokenType = ClosedEnum<
  typeof AuthTokenApiActorTokenType
>;

export type AuthTokenApiActorTokenInfo = {
  /**
   * The client id.
   */
  clientId?: number | undefined;
  /**
   * The alias of the client.
   */
  clientIdAlias?: string | undefined;
  /**
   * Flag specifying if the alias was used to identify the client
   */
  clientIdAliasUsed?: boolean | undefined;
  /**
   * the resource owner unique id
   */
  subject?: string | undefined;
  /**
   * The scopes granted on the token
   */
  scopes?: Array<string> | undefined;
  /**
   * time which the token expires.
   */
  expiresAt?: number | undefined;
  /**
   * Extra properties associated with the token
   */
  properties?: Array<models.Property> | undefined;
  /**
   * The array of the resources of the token.
   */
  resources?: Array<string> | undefined;
  authorizationDetails?: models.AuthorizationDetailsElement | undefined;
  /**
   * The entity ID of the client.
   *
   * @remarks
   */
  clientEntityId?: string | undefined;
  /**
   * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
   *
   * @remarks
   */
  clientEntityIdUsed?: boolean | undefined;
};

export type AuthTokenApiResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: AuthTokenApiAction | undefined;
  /**
   * The content that the authorization server implementation is to return to the client application.
   *
   * @remarks
   * Its format varies depending on the value of `action` parameter.
   */
  responseContent?: string | undefined;
  /**
   * The value of `username` request parameter in the token request.
   *
   * @remarks
   * The client application must specify username when it uses [Resource Owner Password Grant](https://datatracker.ietf.org/doc/html/rfc6749#section-4.3).
   * In other words, when the value of `grant_type` request parameter is `password`, `username` request parameter must come along.
   *
   * This parameter has a value only if the value of `grant_type` request parameter is `password` and the token request is valid.
   */
  username?: string | undefined;
  /**
   * The value of `password` request parameter in the token request.
   *
   * @remarks
   * The client application must specify password when it uses [Resource Owner Password Grant](https://datatracker.ietf.org/doc/html/rfc6749#section-4.3).
   * In other words, when the value of `grant_type` request parameter is `password`, `password` request parameter must come along.
   *
   * This parameter has a value only if the value of `grant_type` request parameter is `password` and the token request is valid.
   */
  password?: string | undefined;
  /**
   * The ticket which is necessary to call Authlete's `/auth/token/fail` API or `/auth/token/issue` API.
   *
   * @remarks
   *
   * This parameter has a value only if the value of `grant_type` request parameter is `password` and the token request is valid.
   */
  ticket?: string | undefined;
  /**
   * The newly issued access token.
   */
  accessToken?: string | undefined;
  /**
   * The datetime at which the newly issued access token will expire.
   *
   * @remarks
   * The value is represented in milliseconds since the Unix epoch (1970-01-01).
   */
  accessTokenExpiresAt?: number | undefined;
  /**
   * The duration of the newly issued access token in seconds.
   */
  accessTokenDuration?: number | undefined;
  /**
   * The newly issued refresh token.
   */
  refreshToken?: string | undefined;
  /**
   * The datetime at which the newly issued refresh token will expire.
   *
   * @remarks
   * The value is represented in milliseconds since the Unix epoch (1970-01-01).
   */
  refreshTokenExpiresAt?: number | undefined;
  /**
   * The duration of the newly issued refresh token in seconds.
   */
  refreshTokenDuration?: number | undefined;
  /**
   * The newly issued ID token. Note that an ID token is issued from a token endpoint only when the `response_type` request parameter
   *
   * @remarks
   * of the authorization request to an authorization endpoint has contained `code` and the `scope` request parameter has contained `openid`.
   */
  idToken?: string | undefined;
  /**
   * The grant type of the token request.
   */
  grantType?: string | undefined;
  /**
   * The client ID.
   */
  clientId?: number | undefined;
  /**
   * The client ID alias when the token request was made. If the client did not have an alias, this parameter is `null`.
   *
   * @remarks
   * Also, if the token request was invalid and it failed to identify a client, this parameter is `null`.
   */
  clientIdAlias?: string | undefined;
  /**
   * The flag which indicates whether the client ID alias was used when the token request was made.
   *
   * @remarks
   * `true` if the client ID alias was used when the token request was made.
   */
  clientIdAliasUsed?: boolean | undefined;
  /**
   * The subject (= resource owner's ID) of the access token.
   *
   * @remarks
   * Even if an access token has been issued by the call of `/api/auth/token` API, this parameter is `null` if the flow of the token request was
   * [Client Credentials Flow](https://datatracker.ietf.org/doc/html/rfc6749#section-4.4) (`grant_type=client_credentials`) because it means the access token
   * is not associated with any specific end-user.
   */
  subject?: string | undefined;
  /**
   * The scopes covered by the access token.
   */
  scopes?: Array<string> | undefined;
  /**
   * The extra properties associated with the access token.
   *
   * @remarks
   * This parameter is `null` when no extra property is associated with the issued access token.
   */
  properties?: Array<models.Property> | undefined;
  /**
   * The newly issued access token in JWT format. If the authorization server is configured
   *
   * @remarks
   * to issue JWT-based access tokens (= if the service's `accessTokenSignAlg` value is a
   * non-null value), a JWT-based access token is issued along with the original random-string
   * one.
   */
  jwtAccessToken?: string | undefined;
  /**
   * The resources specified by the `resource` request parameters in the token request.
   *
   * @remarks
   * See "Resource Indicators for OAuth 2.0" for details.
   */
  resources?: Array<string> | undefined;
  /**
   * The target resources of the access token being issued. See "Resource Indicators for OAuth 2.0" for details.
   *
   * @remarks
   */
  accessTokenResources?: Array<string> | undefined;
  /**
   * The authorization details. This represents the value of the `authorization_details`
   *
   * @remarks
   * request parameter in the preceding device authorization request which is defined in
   * "OAuth 2.0 Rich Authorization Requests".
   */
  authorizationDetails?: models.AuthorizationDetails | undefined;
  /**
   * The attributes of this service that the client application belongs to.
   *
   * @remarks
   */
  serviceAttributes?: Array<models.Pair> | undefined;
  /**
   * The attributes of the client.
   *
   * @remarks
   */
  clientAttributes?: Array<models.Pair> | undefined;
  /**
   * The client authentication method that was performed at the token endpoint.
   *
   * @remarks
   */
  clientAuthMethod?: string | undefined;
  /**
   * the value of the `grant_id` request parameter of the device authorization request.
   *
   * @remarks
   *
   * The `grant_id` request parameter is defined in
   * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
   * , which is supported by Authlete 2.3 and newer versions.
   */
  grantId?: string | undefined;
  /**
   * The audiences on the token exchange request
   *
   * @remarks
   */
  audiences?: Array<string> | undefined;
  requestedTokenType?:
    | models.APILBraceserviceIdRBraceAuthToken200PropertiesActorTokenType
    | undefined;
  subjectToken?: string | undefined;
  subjectTokenType?:
    | models.APILBraceserviceIdRBraceAuthToken200PropertiesActorTokenType
    | undefined;
  subjectTokenInfo?:
    | models.APILBraceserviceIdRBraceAuthToken200PropertiesActorTokenInfo
    | undefined;
  actorToken?: string | undefined;
  /**
   * The grant type of the access token when the access token was created.
   *
   * @remarks
   */
  actorTokenType?: AuthTokenApiActorTokenType | undefined;
  actorTokenInfo?: AuthTokenApiActorTokenInfo | undefined;
  /**
   * For RFC 7523 JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants
   *
   * @remarks
   */
  assertion?: string | undefined;
  /**
   * Indicate whether the previous refresh token that had been kept in the database for a short time was used
   *
   * @remarks
   */
  previousRefreshTokenUsed?: boolean | undefined;
  /**
   * The entity ID of the client.
   *
   * @remarks
   */
  clientEntityId?: string | undefined;
  /**
   * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
   *
   * @remarks
   */
  clientEntityIdUsed?: boolean | undefined;
  /**
   * Duration of the `c_nonce` in seconds.
   *
   * @remarks
   */
  cnonceDuration?: number | undefined;
  /**
   * Get the expected nonce value for DPoP proof JWT, which should be used
   *
   * @remarks
   * as the value of the `DPoP-Nonce` HTTP header.
   */
  dpopNonce?: string | undefined;
  /**
   * Get the `c_nonce`.
   *
   * @remarks
   */
  cnonce?: string | undefined;
  /**
   * Get the time at which the `c_nonce` expires in milliseconds since
   *
   * @remarks
   * the Unix epoch (1970-01-01).
   */
  cnonceExpiresAt?: number | undefined;
  /**
   * Get the names of the claims that the authorization request (which resulted
   *
   * @remarks
   * in generation of the access token) requested to be embedded in ID tokens.
   */
  requestedIdTokenClaims?: Array<string> | undefined;
  /**
   * Scopes associated with the refresh token.
   *
   * @remarks
   */
  refreshTokenScopes?: Array<string> | undefined;
};

/** @internal */
export const AuthTokenApiRequestBody$inboundSchema: z.ZodType<
  AuthTokenApiRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  parameters: z.string(),
  clientId: z.string().optional(),
  clientSecret: z.string().optional(),
  clientCertificate: z.string().optional(),
  clientCertificatePath: z.string().optional(),
  properties: z.string().optional(),
  dpop: z.string().optional(),
  htm: z.string().optional(),
  htu: z.string().optional(),
  accessToken: z.string().optional(),
  jwtAtClaims: z.string().optional(),
});

/** @internal */
export type AuthTokenApiRequestBody$Outbound = {
  parameters: string;
  clientId?: string | undefined;
  clientSecret?: string | undefined;
  clientCertificate?: string | undefined;
  clientCertificatePath?: string | undefined;
  properties?: string | undefined;
  dpop?: string | undefined;
  htm?: string | undefined;
  htu?: string | undefined;
  accessToken?: string | undefined;
  jwtAtClaims?: string | undefined;
};

/** @internal */
export const AuthTokenApiRequestBody$outboundSchema: z.ZodType<
  AuthTokenApiRequestBody$Outbound,
  z.ZodTypeDef,
  AuthTokenApiRequestBody
> = z.object({
  parameters: z.string(),
  clientId: z.string().optional(),
  clientSecret: z.string().optional(),
  clientCertificate: z.string().optional(),
  clientCertificatePath: z.string().optional(),
  properties: z.string().optional(),
  dpop: z.string().optional(),
  htm: z.string().optional(),
  htu: z.string().optional(),
  accessToken: z.string().optional(),
  jwtAtClaims: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenApiRequestBody$ {
  /** @deprecated use `AuthTokenApiRequestBody$inboundSchema` instead. */
  export const inboundSchema = AuthTokenApiRequestBody$inboundSchema;
  /** @deprecated use `AuthTokenApiRequestBody$outboundSchema` instead. */
  export const outboundSchema = AuthTokenApiRequestBody$outboundSchema;
  /** @deprecated use `AuthTokenApiRequestBody$Outbound` instead. */
  export type Outbound = AuthTokenApiRequestBody$Outbound;
}

export function authTokenApiRequestBodyToJSON(
  authTokenApiRequestBody: AuthTokenApiRequestBody,
): string {
  return JSON.stringify(
    AuthTokenApiRequestBody$outboundSchema.parse(authTokenApiRequestBody),
  );
}

export function authTokenApiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenApiRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenApiRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenApiRequestBody' from JSON`,
  );
}

/** @internal */
export const AuthTokenApiRequest$inboundSchema: z.ZodType<
  AuthTokenApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() => AuthTokenApiRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type AuthTokenApiRequest$Outbound = {
  serviceId: string;
  RequestBody: AuthTokenApiRequestBody$Outbound;
};

/** @internal */
export const AuthTokenApiRequest$outboundSchema: z.ZodType<
  AuthTokenApiRequest$Outbound,
  z.ZodTypeDef,
  AuthTokenApiRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() => AuthTokenApiRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenApiRequest$ {
  /** @deprecated use `AuthTokenApiRequest$inboundSchema` instead. */
  export const inboundSchema = AuthTokenApiRequest$inboundSchema;
  /** @deprecated use `AuthTokenApiRequest$outboundSchema` instead. */
  export const outboundSchema = AuthTokenApiRequest$outboundSchema;
  /** @deprecated use `AuthTokenApiRequest$Outbound` instead. */
  export type Outbound = AuthTokenApiRequest$Outbound;
}

export function authTokenApiRequestToJSON(
  authTokenApiRequest: AuthTokenApiRequest,
): string {
  return JSON.stringify(
    AuthTokenApiRequest$outboundSchema.parse(authTokenApiRequest),
  );
}

export function authTokenApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenApiRequest' from JSON`,
  );
}

/** @internal */
export const AuthTokenApiAction$inboundSchema: z.ZodNativeEnum<
  typeof AuthTokenApiAction
> = z.nativeEnum(AuthTokenApiAction);

/** @internal */
export const AuthTokenApiAction$outboundSchema: z.ZodNativeEnum<
  typeof AuthTokenApiAction
> = AuthTokenApiAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenApiAction$ {
  /** @deprecated use `AuthTokenApiAction$inboundSchema` instead. */
  export const inboundSchema = AuthTokenApiAction$inboundSchema;
  /** @deprecated use `AuthTokenApiAction$outboundSchema` instead. */
  export const outboundSchema = AuthTokenApiAction$outboundSchema;
}

/** @internal */
export const AuthTokenApiActorTokenType$inboundSchema: z.ZodNativeEnum<
  typeof AuthTokenApiActorTokenType
> = z.nativeEnum(AuthTokenApiActorTokenType);

/** @internal */
export const AuthTokenApiActorTokenType$outboundSchema: z.ZodNativeEnum<
  typeof AuthTokenApiActorTokenType
> = AuthTokenApiActorTokenType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenApiActorTokenType$ {
  /** @deprecated use `AuthTokenApiActorTokenType$inboundSchema` instead. */
  export const inboundSchema = AuthTokenApiActorTokenType$inboundSchema;
  /** @deprecated use `AuthTokenApiActorTokenType$outboundSchema` instead. */
  export const outboundSchema = AuthTokenApiActorTokenType$outboundSchema;
}

/** @internal */
export const AuthTokenApiActorTokenInfo$inboundSchema: z.ZodType<
  AuthTokenApiActorTokenInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  subject: z.string().optional(),
  scopes: z.array(z.string()).optional(),
  expiresAt: z.number().int().optional(),
  properties: z.array(models.Property$inboundSchema).optional(),
  resources: z.array(z.string()).optional(),
  authorizationDetails: models.AuthorizationDetailsElement$inboundSchema
    .optional(),
  clientEntityId: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
});

/** @internal */
export type AuthTokenApiActorTokenInfo$Outbound = {
  clientId?: number | undefined;
  clientIdAlias?: string | undefined;
  clientIdAliasUsed?: boolean | undefined;
  subject?: string | undefined;
  scopes?: Array<string> | undefined;
  expiresAt?: number | undefined;
  properties?: Array<models.Property$Outbound> | undefined;
  resources?: Array<string> | undefined;
  authorizationDetails?:
    | models.AuthorizationDetailsElement$Outbound
    | undefined;
  clientEntityId?: string | undefined;
  clientEntityIdUsed?: boolean | undefined;
};

/** @internal */
export const AuthTokenApiActorTokenInfo$outboundSchema: z.ZodType<
  AuthTokenApiActorTokenInfo$Outbound,
  z.ZodTypeDef,
  AuthTokenApiActorTokenInfo
> = z.object({
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  subject: z.string().optional(),
  scopes: z.array(z.string()).optional(),
  expiresAt: z.number().int().optional(),
  properties: z.array(models.Property$outboundSchema).optional(),
  resources: z.array(z.string()).optional(),
  authorizationDetails: models.AuthorizationDetailsElement$outboundSchema
    .optional(),
  clientEntityId: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenApiActorTokenInfo$ {
  /** @deprecated use `AuthTokenApiActorTokenInfo$inboundSchema` instead. */
  export const inboundSchema = AuthTokenApiActorTokenInfo$inboundSchema;
  /** @deprecated use `AuthTokenApiActorTokenInfo$outboundSchema` instead. */
  export const outboundSchema = AuthTokenApiActorTokenInfo$outboundSchema;
  /** @deprecated use `AuthTokenApiActorTokenInfo$Outbound` instead. */
  export type Outbound = AuthTokenApiActorTokenInfo$Outbound;
}

export function authTokenApiActorTokenInfoToJSON(
  authTokenApiActorTokenInfo: AuthTokenApiActorTokenInfo,
): string {
  return JSON.stringify(
    AuthTokenApiActorTokenInfo$outboundSchema.parse(authTokenApiActorTokenInfo),
  );
}

export function authTokenApiActorTokenInfoFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenApiActorTokenInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenApiActorTokenInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenApiActorTokenInfo' from JSON`,
  );
}

/** @internal */
export const AuthTokenApiResponse$inboundSchema: z.ZodType<
  AuthTokenApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthTokenApiAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
  username: z.string().optional(),
  password: z.string().optional(),
  ticket: z.string().optional(),
  accessToken: z.string().optional(),
  accessTokenExpiresAt: z.number().int().optional(),
  accessTokenDuration: z.number().int().optional(),
  refreshToken: z.string().optional(),
  refreshTokenExpiresAt: z.number().int().optional(),
  refreshTokenDuration: z.number().int().optional(),
  idToken: z.string().optional(),
  grantType: z.string().optional(),
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  subject: z.string().optional(),
  scopes: z.array(z.string()).optional(),
  properties: z.array(models.Property$inboundSchema).optional(),
  jwtAccessToken: z.string().optional(),
  resources: z.array(z.string()).optional(),
  accessTokenResources: z.array(z.string()).optional(),
  authorizationDetails: models.AuthorizationDetails$inboundSchema.optional(),
  serviceAttributes: z.array(models.Pair$inboundSchema).optional(),
  clientAttributes: z.array(models.Pair$inboundSchema).optional(),
  clientAuthMethod: z.string().optional(),
  grantId: z.string().optional(),
  audiences: z.array(z.string()).optional(),
  requestedTokenType: models
    .APILBraceserviceIdRBraceAuthToken200PropertiesActorTokenType$inboundSchema
    .optional(),
  subjectToken: z.string().optional(),
  subjectTokenType: models
    .APILBraceserviceIdRBraceAuthToken200PropertiesActorTokenType$inboundSchema
    .optional(),
  subjectTokenInfo: models
    .APILBraceserviceIdRBraceAuthToken200PropertiesActorTokenInfo$inboundSchema
    .optional(),
  actorToken: z.string().optional(),
  actorTokenType: AuthTokenApiActorTokenType$inboundSchema.optional(),
  actorTokenInfo: z.lazy(() => AuthTokenApiActorTokenInfo$inboundSchema)
    .optional(),
  assertion: z.string().optional(),
  previousRefreshTokenUsed: z.boolean().optional(),
  clientEntityId: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
  cnonceDuration: z.number().int().optional(),
  dpopNonce: z.string().optional(),
  cnonce: z.string().optional(),
  cnonceExpiresAt: z.number().int().optional(),
  requestedIdTokenClaims: z.array(z.string()).optional(),
  refreshTokenScopes: z.array(z.string()).optional(),
});

/** @internal */
export type AuthTokenApiResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  username?: string | undefined;
  password?: string | undefined;
  ticket?: string | undefined;
  accessToken?: string | undefined;
  accessTokenExpiresAt?: number | undefined;
  accessTokenDuration?: number | undefined;
  refreshToken?: string | undefined;
  refreshTokenExpiresAt?: number | undefined;
  refreshTokenDuration?: number | undefined;
  idToken?: string | undefined;
  grantType?: string | undefined;
  clientId?: number | undefined;
  clientIdAlias?: string | undefined;
  clientIdAliasUsed?: boolean | undefined;
  subject?: string | undefined;
  scopes?: Array<string> | undefined;
  properties?: Array<models.Property$Outbound> | undefined;
  jwtAccessToken?: string | undefined;
  resources?: Array<string> | undefined;
  accessTokenResources?: Array<string> | undefined;
  authorizationDetails?: models.AuthorizationDetails$Outbound | undefined;
  serviceAttributes?: Array<models.Pair$Outbound> | undefined;
  clientAttributes?: Array<models.Pair$Outbound> | undefined;
  clientAuthMethod?: string | undefined;
  grantId?: string | undefined;
  audiences?: Array<string> | undefined;
  requestedTokenType?:
    | models.APILBraceserviceIdRBraceAuthToken200PropertiesActorTokenType$Outbound
    | undefined;
  subjectToken?: string | undefined;
  subjectTokenType?:
    | models.APILBraceserviceIdRBraceAuthToken200PropertiesActorTokenType$Outbound
    | undefined;
  subjectTokenInfo?:
    | models.APILBraceserviceIdRBraceAuthToken200PropertiesActorTokenInfo$Outbound
    | undefined;
  actorToken?: string | undefined;
  actorTokenType?: string | undefined;
  actorTokenInfo?: AuthTokenApiActorTokenInfo$Outbound | undefined;
  assertion?: string | undefined;
  previousRefreshTokenUsed?: boolean | undefined;
  clientEntityId?: string | undefined;
  clientEntityIdUsed?: boolean | undefined;
  cnonceDuration?: number | undefined;
  dpopNonce?: string | undefined;
  cnonce?: string | undefined;
  cnonceExpiresAt?: number | undefined;
  requestedIdTokenClaims?: Array<string> | undefined;
  refreshTokenScopes?: Array<string> | undefined;
};

/** @internal */
export const AuthTokenApiResponse$outboundSchema: z.ZodType<
  AuthTokenApiResponse$Outbound,
  z.ZodTypeDef,
  AuthTokenApiResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthTokenApiAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
  username: z.string().optional(),
  password: z.string().optional(),
  ticket: z.string().optional(),
  accessToken: z.string().optional(),
  accessTokenExpiresAt: z.number().int().optional(),
  accessTokenDuration: z.number().int().optional(),
  refreshToken: z.string().optional(),
  refreshTokenExpiresAt: z.number().int().optional(),
  refreshTokenDuration: z.number().int().optional(),
  idToken: z.string().optional(),
  grantType: z.string().optional(),
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  subject: z.string().optional(),
  scopes: z.array(z.string()).optional(),
  properties: z.array(models.Property$outboundSchema).optional(),
  jwtAccessToken: z.string().optional(),
  resources: z.array(z.string()).optional(),
  accessTokenResources: z.array(z.string()).optional(),
  authorizationDetails: models.AuthorizationDetails$outboundSchema.optional(),
  serviceAttributes: z.array(models.Pair$outboundSchema).optional(),
  clientAttributes: z.array(models.Pair$outboundSchema).optional(),
  clientAuthMethod: z.string().optional(),
  grantId: z.string().optional(),
  audiences: z.array(z.string()).optional(),
  requestedTokenType: models
    .APILBraceserviceIdRBraceAuthToken200PropertiesActorTokenType$outboundSchema
    .optional(),
  subjectToken: z.string().optional(),
  subjectTokenType: models
    .APILBraceserviceIdRBraceAuthToken200PropertiesActorTokenType$outboundSchema
    .optional(),
  subjectTokenInfo: models
    .APILBraceserviceIdRBraceAuthToken200PropertiesActorTokenInfo$outboundSchema
    .optional(),
  actorToken: z.string().optional(),
  actorTokenType: AuthTokenApiActorTokenType$outboundSchema.optional(),
  actorTokenInfo: z.lazy(() => AuthTokenApiActorTokenInfo$outboundSchema)
    .optional(),
  assertion: z.string().optional(),
  previousRefreshTokenUsed: z.boolean().optional(),
  clientEntityId: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
  cnonceDuration: z.number().int().optional(),
  dpopNonce: z.string().optional(),
  cnonce: z.string().optional(),
  cnonceExpiresAt: z.number().int().optional(),
  requestedIdTokenClaims: z.array(z.string()).optional(),
  refreshTokenScopes: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenApiResponse$ {
  /** @deprecated use `AuthTokenApiResponse$inboundSchema` instead. */
  export const inboundSchema = AuthTokenApiResponse$inboundSchema;
  /** @deprecated use `AuthTokenApiResponse$outboundSchema` instead. */
  export const outboundSchema = AuthTokenApiResponse$outboundSchema;
  /** @deprecated use `AuthTokenApiResponse$Outbound` instead. */
  export type Outbound = AuthTokenApiResponse$Outbound;
}

export function authTokenApiResponseToJSON(
  authTokenApiResponse: AuthTokenApiResponse,
): string {
  return JSON.stringify(
    AuthTokenApiResponse$outboundSchema.parse(authTokenApiResponse),
  );
}

export function authTokenApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenApiResponse' from JSON`,
  );
}
