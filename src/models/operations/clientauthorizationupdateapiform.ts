/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ClientAuthorizationUpdateApiFormRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  /**
   * A client ID.
   *
   * @remarks
   */
  clientId: string;
  apilBraceserviceIdRBraceClientAuthorizationUpdateLBraceclientIdRBrace?:
    | models.APILBraceserviceIdRBraceClientAuthorizationUpdateLBraceclientIdRBrace
    | undefined;
};

export type ClientAuthorizationUpdateApiFormResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

/** @internal */
export const ClientAuthorizationUpdateApiFormRequest$inboundSchema: z.ZodType<
  ClientAuthorizationUpdateApiFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  clientId: z.string(),
  APILBraceserviceIdRBraceClientAuthorizationUpdateLBraceclientIdRBrace: models
    .APILBraceserviceIdRBraceClientAuthorizationUpdateLBraceclientIdRBrace$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "APILBraceserviceIdRBraceClientAuthorizationUpdateLBraceclientIdRBrace":
      "apilBraceserviceIdRBraceClientAuthorizationUpdateLBraceclientIdRBrace",
  });
});

/** @internal */
export type ClientAuthorizationUpdateApiFormRequest$Outbound = {
  serviceId: string;
  clientId: string;
  APILBraceserviceIdRBraceClientAuthorizationUpdateLBraceclientIdRBrace?:
    | models.APILBraceserviceIdRBraceClientAuthorizationUpdateLBraceclientIdRBrace$Outbound
    | undefined;
};

/** @internal */
export const ClientAuthorizationUpdateApiFormRequest$outboundSchema: z.ZodType<
  ClientAuthorizationUpdateApiFormRequest$Outbound,
  z.ZodTypeDef,
  ClientAuthorizationUpdateApiFormRequest
> = z.object({
  serviceId: z.string(),
  clientId: z.string(),
  apilBraceserviceIdRBraceClientAuthorizationUpdateLBraceclientIdRBrace: models
    .APILBraceserviceIdRBraceClientAuthorizationUpdateLBraceclientIdRBrace$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    apilBraceserviceIdRBraceClientAuthorizationUpdateLBraceclientIdRBrace:
      "APILBraceserviceIdRBraceClientAuthorizationUpdateLBraceclientIdRBrace",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientAuthorizationUpdateApiFormRequest$ {
  /** @deprecated use `ClientAuthorizationUpdateApiFormRequest$inboundSchema` instead. */
  export const inboundSchema =
    ClientAuthorizationUpdateApiFormRequest$inboundSchema;
  /** @deprecated use `ClientAuthorizationUpdateApiFormRequest$outboundSchema` instead. */
  export const outboundSchema =
    ClientAuthorizationUpdateApiFormRequest$outboundSchema;
  /** @deprecated use `ClientAuthorizationUpdateApiFormRequest$Outbound` instead. */
  export type Outbound = ClientAuthorizationUpdateApiFormRequest$Outbound;
}

export function clientAuthorizationUpdateApiFormRequestToJSON(
  clientAuthorizationUpdateApiFormRequest:
    ClientAuthorizationUpdateApiFormRequest,
): string {
  return JSON.stringify(
    ClientAuthorizationUpdateApiFormRequest$outboundSchema.parse(
      clientAuthorizationUpdateApiFormRequest,
    ),
  );
}

export function clientAuthorizationUpdateApiFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  ClientAuthorizationUpdateApiFormRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ClientAuthorizationUpdateApiFormRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ClientAuthorizationUpdateApiFormRequest' from JSON`,
  );
}

/** @internal */
export const ClientAuthorizationUpdateApiFormResponse$inboundSchema: z.ZodType<
  ClientAuthorizationUpdateApiFormResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
});

/** @internal */
export type ClientAuthorizationUpdateApiFormResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const ClientAuthorizationUpdateApiFormResponse$outboundSchema: z.ZodType<
  ClientAuthorizationUpdateApiFormResponse$Outbound,
  z.ZodTypeDef,
  ClientAuthorizationUpdateApiFormResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientAuthorizationUpdateApiFormResponse$ {
  /** @deprecated use `ClientAuthorizationUpdateApiFormResponse$inboundSchema` instead. */
  export const inboundSchema =
    ClientAuthorizationUpdateApiFormResponse$inboundSchema;
  /** @deprecated use `ClientAuthorizationUpdateApiFormResponse$outboundSchema` instead. */
  export const outboundSchema =
    ClientAuthorizationUpdateApiFormResponse$outboundSchema;
  /** @deprecated use `ClientAuthorizationUpdateApiFormResponse$Outbound` instead. */
  export type Outbound = ClientAuthorizationUpdateApiFormResponse$Outbound;
}

export function clientAuthorizationUpdateApiFormResponseToJSON(
  clientAuthorizationUpdateApiFormResponse:
    ClientAuthorizationUpdateApiFormResponse,
): string {
  return JSON.stringify(
    ClientAuthorizationUpdateApiFormResponse$outboundSchema.parse(
      clientAuthorizationUpdateApiFormResponse,
    ),
  );
}

export function clientAuthorizationUpdateApiFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  ClientAuthorizationUpdateApiFormResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ClientAuthorizationUpdateApiFormResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ClientAuthorizationUpdateApiFormResponse' from JSON`,
  );
}
