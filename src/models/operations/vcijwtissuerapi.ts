/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type VciJwtissuerApiRequestBody = {
  /**
   * The flag indicating whether the metadata is written in the pretty
   *
   * @remarks
   * format or not.
   */
  pretty: boolean;
};

export type VciJwtissuerApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: VciJwtissuerApiRequestBody;
};

/**
 * The next action that the implementation of the JWT issuer metadata
 *
 * @remarks
 * endpoint (`/.well-known/jwt-issuer`) should take after getting
 * a response from Authlete's `/vci/jwtissuer` API.
 */
export const VciJwtissuerApiAction = {
  Ok: "OK",
  NotFound: "NOT_FOUND",
  InternalServerError: "INTERNAL_SERVER_ERROR",
} as const;
/**
 * The next action that the implementation of the JWT issuer metadata
 *
 * @remarks
 * endpoint (`/.well-known/jwt-issuer`) should take after getting
 * a response from Authlete's `/vci/jwtissuer` API.
 */
export type VciJwtissuerApiAction = ClosedEnum<typeof VciJwtissuerApiAction>;

/**
 * Successful operation
 */
export type VciJwtissuerApiResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the implementation of the JWT issuer metadata
   *
   * @remarks
   * endpoint (`/.well-known/jwt-issuer`) should take after getting
   * a response from Authlete's `/vci/jwtissuer` API.
   */
  action?: VciJwtissuerApiAction | undefined;
  /**
   * Get the content that the implementation of the credential issuer
   *
   * @remarks
   * metadata endpoint should use when it constructs a response.
   */
  responseContent?: string | undefined;
};

/** @internal */
export const VciJwtissuerApiRequestBody$inboundSchema: z.ZodType<
  VciJwtissuerApiRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  pretty: z.boolean(),
});

/** @internal */
export type VciJwtissuerApiRequestBody$Outbound = {
  pretty: boolean;
};

/** @internal */
export const VciJwtissuerApiRequestBody$outboundSchema: z.ZodType<
  VciJwtissuerApiRequestBody$Outbound,
  z.ZodTypeDef,
  VciJwtissuerApiRequestBody
> = z.object({
  pretty: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciJwtissuerApiRequestBody$ {
  /** @deprecated use `VciJwtissuerApiRequestBody$inboundSchema` instead. */
  export const inboundSchema = VciJwtissuerApiRequestBody$inboundSchema;
  /** @deprecated use `VciJwtissuerApiRequestBody$outboundSchema` instead. */
  export const outboundSchema = VciJwtissuerApiRequestBody$outboundSchema;
  /** @deprecated use `VciJwtissuerApiRequestBody$Outbound` instead. */
  export type Outbound = VciJwtissuerApiRequestBody$Outbound;
}

export function vciJwtissuerApiRequestBodyToJSON(
  vciJwtissuerApiRequestBody: VciJwtissuerApiRequestBody,
): string {
  return JSON.stringify(
    VciJwtissuerApiRequestBody$outboundSchema.parse(vciJwtissuerApiRequestBody),
  );
}

export function vciJwtissuerApiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<VciJwtissuerApiRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciJwtissuerApiRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciJwtissuerApiRequestBody' from JSON`,
  );
}

/** @internal */
export const VciJwtissuerApiRequest$inboundSchema: z.ZodType<
  VciJwtissuerApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() => VciJwtissuerApiRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type VciJwtissuerApiRequest$Outbound = {
  serviceId: string;
  RequestBody: VciJwtissuerApiRequestBody$Outbound;
};

/** @internal */
export const VciJwtissuerApiRequest$outboundSchema: z.ZodType<
  VciJwtissuerApiRequest$Outbound,
  z.ZodTypeDef,
  VciJwtissuerApiRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() => VciJwtissuerApiRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciJwtissuerApiRequest$ {
  /** @deprecated use `VciJwtissuerApiRequest$inboundSchema` instead. */
  export const inboundSchema = VciJwtissuerApiRequest$inboundSchema;
  /** @deprecated use `VciJwtissuerApiRequest$outboundSchema` instead. */
  export const outboundSchema = VciJwtissuerApiRequest$outboundSchema;
  /** @deprecated use `VciJwtissuerApiRequest$Outbound` instead. */
  export type Outbound = VciJwtissuerApiRequest$Outbound;
}

export function vciJwtissuerApiRequestToJSON(
  vciJwtissuerApiRequest: VciJwtissuerApiRequest,
): string {
  return JSON.stringify(
    VciJwtissuerApiRequest$outboundSchema.parse(vciJwtissuerApiRequest),
  );
}

export function vciJwtissuerApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<VciJwtissuerApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciJwtissuerApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciJwtissuerApiRequest' from JSON`,
  );
}

/** @internal */
export const VciJwtissuerApiAction$inboundSchema: z.ZodNativeEnum<
  typeof VciJwtissuerApiAction
> = z.nativeEnum(VciJwtissuerApiAction);

/** @internal */
export const VciJwtissuerApiAction$outboundSchema: z.ZodNativeEnum<
  typeof VciJwtissuerApiAction
> = VciJwtissuerApiAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciJwtissuerApiAction$ {
  /** @deprecated use `VciJwtissuerApiAction$inboundSchema` instead. */
  export const inboundSchema = VciJwtissuerApiAction$inboundSchema;
  /** @deprecated use `VciJwtissuerApiAction$outboundSchema` instead. */
  export const outboundSchema = VciJwtissuerApiAction$outboundSchema;
}

/** @internal */
export const VciJwtissuerApiResponse$inboundSchema: z.ZodType<
  VciJwtissuerApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciJwtissuerApiAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
});

/** @internal */
export type VciJwtissuerApiResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
};

/** @internal */
export const VciJwtissuerApiResponse$outboundSchema: z.ZodType<
  VciJwtissuerApiResponse$Outbound,
  z.ZodTypeDef,
  VciJwtissuerApiResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciJwtissuerApiAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciJwtissuerApiResponse$ {
  /** @deprecated use `VciJwtissuerApiResponse$inboundSchema` instead. */
  export const inboundSchema = VciJwtissuerApiResponse$inboundSchema;
  /** @deprecated use `VciJwtissuerApiResponse$outboundSchema` instead. */
  export const outboundSchema = VciJwtissuerApiResponse$outboundSchema;
  /** @deprecated use `VciJwtissuerApiResponse$Outbound` instead. */
  export type Outbound = VciJwtissuerApiResponse$Outbound;
}

export function vciJwtissuerApiResponseToJSON(
  vciJwtissuerApiResponse: VciJwtissuerApiResponse,
): string {
  return JSON.stringify(
    VciJwtissuerApiResponse$outboundSchema.parse(vciJwtissuerApiResponse),
  );
}

export function vciJwtissuerApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<VciJwtissuerApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciJwtissuerApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciJwtissuerApiResponse' from JSON`,
  );
}
