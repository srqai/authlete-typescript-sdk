/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ClientRegistrationApiFormRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  clientRegistrationRequest: models.ClientRegistrationRequest;
};

/**
 * The next action that the authorization server implementation should take.
 *
 * @remarks
 */
export const ClientRegistrationApiFormAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Created: "CREATED",
} as const;
/**
 * The next action that the authorization server implementation should take.
 *
 * @remarks
 */
export type ClientRegistrationApiFormAction = ClosedEnum<
  typeof ClientRegistrationApiFormAction
>;

/**
 * Successful operation
 */
export type ClientRegistrationApiFormResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   *
   * @remarks
   */
  action?: ClientRegistrationApiFormAction | undefined;
  /**
   * The content that the authorization server implementation is to return to the client application.
   *
   * @remarks
   * Its format varies depending on the value of `action` parameter.
   */
  responseContent?: string | undefined;
  client?: models.Client | undefined;
};

/** @internal */
export const ClientRegistrationApiFormRequest$inboundSchema: z.ZodType<
  ClientRegistrationApiFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  ClientRegistrationRequest: models.ClientRegistrationRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "ClientRegistrationRequest": "clientRegistrationRequest",
  });
});

/** @internal */
export type ClientRegistrationApiFormRequest$Outbound = {
  serviceId: string;
  ClientRegistrationRequest: models.ClientRegistrationRequest$Outbound;
};

/** @internal */
export const ClientRegistrationApiFormRequest$outboundSchema: z.ZodType<
  ClientRegistrationApiFormRequest$Outbound,
  z.ZodTypeDef,
  ClientRegistrationApiFormRequest
> = z.object({
  serviceId: z.string(),
  clientRegistrationRequest: models.ClientRegistrationRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    clientRegistrationRequest: "ClientRegistrationRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationApiFormRequest$ {
  /** @deprecated use `ClientRegistrationApiFormRequest$inboundSchema` instead. */
  export const inboundSchema = ClientRegistrationApiFormRequest$inboundSchema;
  /** @deprecated use `ClientRegistrationApiFormRequest$outboundSchema` instead. */
  export const outboundSchema = ClientRegistrationApiFormRequest$outboundSchema;
  /** @deprecated use `ClientRegistrationApiFormRequest$Outbound` instead. */
  export type Outbound = ClientRegistrationApiFormRequest$Outbound;
}

export function clientRegistrationApiFormRequestToJSON(
  clientRegistrationApiFormRequest: ClientRegistrationApiFormRequest,
): string {
  return JSON.stringify(
    ClientRegistrationApiFormRequest$outboundSchema.parse(
      clientRegistrationApiFormRequest,
    ),
  );
}

export function clientRegistrationApiFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<ClientRegistrationApiFormRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientRegistrationApiFormRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientRegistrationApiFormRequest' from JSON`,
  );
}

/** @internal */
export const ClientRegistrationApiFormAction$inboundSchema: z.ZodNativeEnum<
  typeof ClientRegistrationApiFormAction
> = z.nativeEnum(ClientRegistrationApiFormAction);

/** @internal */
export const ClientRegistrationApiFormAction$outboundSchema: z.ZodNativeEnum<
  typeof ClientRegistrationApiFormAction
> = ClientRegistrationApiFormAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationApiFormAction$ {
  /** @deprecated use `ClientRegistrationApiFormAction$inboundSchema` instead. */
  export const inboundSchema = ClientRegistrationApiFormAction$inboundSchema;
  /** @deprecated use `ClientRegistrationApiFormAction$outboundSchema` instead. */
  export const outboundSchema = ClientRegistrationApiFormAction$outboundSchema;
}

/** @internal */
export const ClientRegistrationApiFormResponse$inboundSchema: z.ZodType<
  ClientRegistrationApiFormResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: ClientRegistrationApiFormAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
  client: models.Client$inboundSchema.optional(),
});

/** @internal */
export type ClientRegistrationApiFormResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  client?: models.Client$Outbound | undefined;
};

/** @internal */
export const ClientRegistrationApiFormResponse$outboundSchema: z.ZodType<
  ClientRegistrationApiFormResponse$Outbound,
  z.ZodTypeDef,
  ClientRegistrationApiFormResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: ClientRegistrationApiFormAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
  client: models.Client$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationApiFormResponse$ {
  /** @deprecated use `ClientRegistrationApiFormResponse$inboundSchema` instead. */
  export const inboundSchema = ClientRegistrationApiFormResponse$inboundSchema;
  /** @deprecated use `ClientRegistrationApiFormResponse$outboundSchema` instead. */
  export const outboundSchema =
    ClientRegistrationApiFormResponse$outboundSchema;
  /** @deprecated use `ClientRegistrationApiFormResponse$Outbound` instead. */
  export type Outbound = ClientRegistrationApiFormResponse$Outbound;
}

export function clientRegistrationApiFormResponseToJSON(
  clientRegistrationApiFormResponse: ClientRegistrationApiFormResponse,
): string {
  return JSON.stringify(
    ClientRegistrationApiFormResponse$outboundSchema.parse(
      clientRegistrationApiFormResponse,
    ),
  );
}

export function clientRegistrationApiFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<ClientRegistrationApiFormResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientRegistrationApiFormResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientRegistrationApiFormResponse' from JSON`,
  );
}
