/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type AuthTokenIssueApiRequestBody = {
  /**
   * The ticket issued from Authlete `/auth/token` API.
   *
   * @remarks
   */
  ticket: string;
  /**
   * The subject (= unique identifier) of the authenticated user.
   *
   * @remarks
   */
  subject: string;
  /**
   * Extra properties to associate with a newly created access token. Note that properties parameter is accepted only
   *
   * @remarks
   * when `Content-Type` of the request is `application/json`, so don't use `application/x-www-form-urlencoded`
   * if you want to specify properties.
   */
  properties?: Array<models.Property> | undefined;
  /**
   * Additional claims that are added to the payload part of the JWT access token.
   *
   * @remarks
   */
  jwtAtClaims?: string | undefined;
  /**
   * The representation of an access token that may be issued as a result of the Authlete API call.
   *
   * @remarks
   */
  accessToken?: string | undefined;
};

export type AuthTokenIssueApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: AuthTokenIssueApiRequestBody;
};

/**
 * The next action that the authorization server implementation should take.
 */
export const AuthTokenIssueApiAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  Ok: "OK",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type AuthTokenIssueApiAction = ClosedEnum<
  typeof AuthTokenIssueApiAction
>;

export type AuthTokenIssueApiResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: AuthTokenIssueApiAction | undefined;
  /**
   * The content that the authorization server implementation is to return to the client application.
   *
   * @remarks
   * Its format is JSON.
   */
  responseContent?: string | undefined;
  /**
   * The newly issued access token. This parameter is a non-null value only when the value of `action` parameter is `OK`.
   */
  accessToken?: string | undefined;
  /**
   * The datetime at which the newly issued access token will expire.
   *
   * @remarks
   * The value is represented in milliseconds since the Unix epoch (1970-01-01).
   */
  accessTokenExpiresAt?: number | undefined;
  /**
   * The duration of the newly issued access token in seconds.
   */
  accessTokenDuration?: number | undefined;
  /**
   * The refresh token. This parameter is a non-null value only when `action` is `OK` and the service supports the refresh token flow.
   *
   * @remarks
   * If `refreshTokenKept` is set to `false`, a new refresh token is issued and the old refresh token used in the refresh token flow
   * is invalidated. On the contrary, if `refreshTokenKept` is set to `true`, the refresh token itself is not refreshed.
   */
  refreshToken?: string | undefined;
  /**
   * The datetime at which the newly issued refresh token will expire.
   *
   * @remarks
   * The value is represented in milliseconds since the Unix epoch (1970-01-01).
   */
  refreshTokenExpiresAt?: number | undefined;
  /**
   * The duration of the newly issued refresh token in seconds.
   */
  refreshTokenDuration?: number | undefined;
  /**
   * The client ID.
   */
  clientId?: number | undefined;
  /**
   * The client ID alias. If the client did not have an alias, this parameter is `null`.
   *
   * @remarks
   */
  clientIdAlias?: string | undefined;
  /**
   * The flag which indicates whether the client ID alias was used when the token request was made.
   *
   * @remarks
   * `true` if the client ID alias was used when the token request was made.
   */
  clientIdAliasUsed?: boolean | undefined;
  /**
   * The subject (= resource owner's ID) of the access token.
   *
   * @remarks
   * Even if an access token has been issued by calling `/api/auth/token` API, this parameter is `null` if the flow of the token request was
   * [Client Credentials Flow](https://datatracker.ietf.org/doc/html/rfc6749#section-4.4) (`grant_type=client_credentials`) because it means
   * the access token is not associated with any specific end-user.
   */
  subject?: string | undefined;
  /**
   * The scopes covered by the access token.
   */
  scopes?: Array<string> | undefined;
  /**
   * The extra properties associated with the access token.
   *
   * @remarks
   * This parameter is `null` when no extra property is associated with the issued access token.
   */
  properties?: Array<models.Property> | undefined;
  /**
   * The newly issued access token in JWT format. If the authorization server is configured to issue JWT-based access tokens
   *
   * @remarks
   * (= if the service's `accessTokenSignAlg` value is a non-null value), a JWT-based access token is issued along with the
   * original random-string one.
   */
  jwtAccessToken?: string | undefined;
  /**
   * The target resources of the access token being issued. See "Resource Indicators for OAuth 2.0" for details.
   *
   * @remarks
   */
  accessTokenResources?: Array<string> | undefined;
  /**
   * The authorization details. This represents the value of the `authorization_details`
   *
   * @remarks
   * request parameter in the preceding device authorization request which is defined in
   * "OAuth 2.0 Rich Authorization Requests".
   */
  authorizationDetails?: models.AuthorizationDetails | undefined;
  /**
   * The attributes of this service that the client application belongs to.
   *
   * @remarks
   */
  serviceAttributes?: Array<models.Pair> | undefined;
  /**
   * The attributes of the client.
   *
   * @remarks
   */
  clientAttributes?: Array<models.Pair> | undefined;
  /**
   * The entity ID of the client.
   *
   * @remarks
   */
  clientEntityId?: string | undefined;
  /**
   * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
   *
   * @remarks
   */
  clientEntityIdUsed?: boolean | undefined;
  /**
   * The scopes associated with the refresh token. May be null.
   *
   * @remarks
   */
  refreshTokenScopes?: Array<string> | undefined;
};

/** @internal */
export const AuthTokenIssueApiRequestBody$inboundSchema: z.ZodType<
  AuthTokenIssueApiRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  ticket: z.string(),
  subject: z.string(),
  properties: z.array(models.Property$inboundSchema).optional(),
  jwtAtClaims: z.string().optional(),
  accessToken: z.string().optional(),
});

/** @internal */
export type AuthTokenIssueApiRequestBody$Outbound = {
  ticket: string;
  subject: string;
  properties?: Array<models.Property$Outbound> | undefined;
  jwtAtClaims?: string | undefined;
  accessToken?: string | undefined;
};

/** @internal */
export const AuthTokenIssueApiRequestBody$outboundSchema: z.ZodType<
  AuthTokenIssueApiRequestBody$Outbound,
  z.ZodTypeDef,
  AuthTokenIssueApiRequestBody
> = z.object({
  ticket: z.string(),
  subject: z.string(),
  properties: z.array(models.Property$outboundSchema).optional(),
  jwtAtClaims: z.string().optional(),
  accessToken: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenIssueApiRequestBody$ {
  /** @deprecated use `AuthTokenIssueApiRequestBody$inboundSchema` instead. */
  export const inboundSchema = AuthTokenIssueApiRequestBody$inboundSchema;
  /** @deprecated use `AuthTokenIssueApiRequestBody$outboundSchema` instead. */
  export const outboundSchema = AuthTokenIssueApiRequestBody$outboundSchema;
  /** @deprecated use `AuthTokenIssueApiRequestBody$Outbound` instead. */
  export type Outbound = AuthTokenIssueApiRequestBody$Outbound;
}

export function authTokenIssueApiRequestBodyToJSON(
  authTokenIssueApiRequestBody: AuthTokenIssueApiRequestBody,
): string {
  return JSON.stringify(
    AuthTokenIssueApiRequestBody$outboundSchema.parse(
      authTokenIssueApiRequestBody,
    ),
  );
}

export function authTokenIssueApiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenIssueApiRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenIssueApiRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenIssueApiRequestBody' from JSON`,
  );
}

/** @internal */
export const AuthTokenIssueApiRequest$inboundSchema: z.ZodType<
  AuthTokenIssueApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() => AuthTokenIssueApiRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type AuthTokenIssueApiRequest$Outbound = {
  serviceId: string;
  RequestBody: AuthTokenIssueApiRequestBody$Outbound;
};

/** @internal */
export const AuthTokenIssueApiRequest$outboundSchema: z.ZodType<
  AuthTokenIssueApiRequest$Outbound,
  z.ZodTypeDef,
  AuthTokenIssueApiRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() => AuthTokenIssueApiRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenIssueApiRequest$ {
  /** @deprecated use `AuthTokenIssueApiRequest$inboundSchema` instead. */
  export const inboundSchema = AuthTokenIssueApiRequest$inboundSchema;
  /** @deprecated use `AuthTokenIssueApiRequest$outboundSchema` instead. */
  export const outboundSchema = AuthTokenIssueApiRequest$outboundSchema;
  /** @deprecated use `AuthTokenIssueApiRequest$Outbound` instead. */
  export type Outbound = AuthTokenIssueApiRequest$Outbound;
}

export function authTokenIssueApiRequestToJSON(
  authTokenIssueApiRequest: AuthTokenIssueApiRequest,
): string {
  return JSON.stringify(
    AuthTokenIssueApiRequest$outboundSchema.parse(authTokenIssueApiRequest),
  );
}

export function authTokenIssueApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenIssueApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenIssueApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenIssueApiRequest' from JSON`,
  );
}

/** @internal */
export const AuthTokenIssueApiAction$inboundSchema: z.ZodNativeEnum<
  typeof AuthTokenIssueApiAction
> = z.nativeEnum(AuthTokenIssueApiAction);

/** @internal */
export const AuthTokenIssueApiAction$outboundSchema: z.ZodNativeEnum<
  typeof AuthTokenIssueApiAction
> = AuthTokenIssueApiAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenIssueApiAction$ {
  /** @deprecated use `AuthTokenIssueApiAction$inboundSchema` instead. */
  export const inboundSchema = AuthTokenIssueApiAction$inboundSchema;
  /** @deprecated use `AuthTokenIssueApiAction$outboundSchema` instead. */
  export const outboundSchema = AuthTokenIssueApiAction$outboundSchema;
}

/** @internal */
export const AuthTokenIssueApiResponse$inboundSchema: z.ZodType<
  AuthTokenIssueApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthTokenIssueApiAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
  accessToken: z.string().optional(),
  accessTokenExpiresAt: z.number().int().optional(),
  accessTokenDuration: z.number().int().optional(),
  refreshToken: z.string().optional(),
  refreshTokenExpiresAt: z.number().int().optional(),
  refreshTokenDuration: z.number().int().optional(),
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  subject: z.string().optional(),
  scopes: z.array(z.string()).optional(),
  properties: z.array(models.Property$inboundSchema).optional(),
  jwtAccessToken: z.string().optional(),
  accessTokenResources: z.array(z.string()).optional(),
  authorizationDetails: models.AuthorizationDetails$inboundSchema.optional(),
  serviceAttributes: z.array(models.Pair$inboundSchema).optional(),
  clientAttributes: z.array(models.Pair$inboundSchema).optional(),
  clientEntityId: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
  refreshTokenScopes: z.array(z.string()).optional(),
});

/** @internal */
export type AuthTokenIssueApiResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  accessToken?: string | undefined;
  accessTokenExpiresAt?: number | undefined;
  accessTokenDuration?: number | undefined;
  refreshToken?: string | undefined;
  refreshTokenExpiresAt?: number | undefined;
  refreshTokenDuration?: number | undefined;
  clientId?: number | undefined;
  clientIdAlias?: string | undefined;
  clientIdAliasUsed?: boolean | undefined;
  subject?: string | undefined;
  scopes?: Array<string> | undefined;
  properties?: Array<models.Property$Outbound> | undefined;
  jwtAccessToken?: string | undefined;
  accessTokenResources?: Array<string> | undefined;
  authorizationDetails?: models.AuthorizationDetails$Outbound | undefined;
  serviceAttributes?: Array<models.Pair$Outbound> | undefined;
  clientAttributes?: Array<models.Pair$Outbound> | undefined;
  clientEntityId?: string | undefined;
  clientEntityIdUsed?: boolean | undefined;
  refreshTokenScopes?: Array<string> | undefined;
};

/** @internal */
export const AuthTokenIssueApiResponse$outboundSchema: z.ZodType<
  AuthTokenIssueApiResponse$Outbound,
  z.ZodTypeDef,
  AuthTokenIssueApiResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthTokenIssueApiAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
  accessToken: z.string().optional(),
  accessTokenExpiresAt: z.number().int().optional(),
  accessTokenDuration: z.number().int().optional(),
  refreshToken: z.string().optional(),
  refreshTokenExpiresAt: z.number().int().optional(),
  refreshTokenDuration: z.number().int().optional(),
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  subject: z.string().optional(),
  scopes: z.array(z.string()).optional(),
  properties: z.array(models.Property$outboundSchema).optional(),
  jwtAccessToken: z.string().optional(),
  accessTokenResources: z.array(z.string()).optional(),
  authorizationDetails: models.AuthorizationDetails$outboundSchema.optional(),
  serviceAttributes: z.array(models.Pair$outboundSchema).optional(),
  clientAttributes: z.array(models.Pair$outboundSchema).optional(),
  clientEntityId: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
  refreshTokenScopes: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenIssueApiResponse$ {
  /** @deprecated use `AuthTokenIssueApiResponse$inboundSchema` instead. */
  export const inboundSchema = AuthTokenIssueApiResponse$inboundSchema;
  /** @deprecated use `AuthTokenIssueApiResponse$outboundSchema` instead. */
  export const outboundSchema = AuthTokenIssueApiResponse$outboundSchema;
  /** @deprecated use `AuthTokenIssueApiResponse$Outbound` instead. */
  export type Outbound = AuthTokenIssueApiResponse$Outbound;
}

export function authTokenIssueApiResponseToJSON(
  authTokenIssueApiResponse: AuthTokenIssueApiResponse,
): string {
  return JSON.stringify(
    AuthTokenIssueApiResponse$outboundSchema.parse(authTokenIssueApiResponse),
  );
}

export function authTokenIssueApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenIssueApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenIssueApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenIssueApiResponse' from JSON`,
  );
}
