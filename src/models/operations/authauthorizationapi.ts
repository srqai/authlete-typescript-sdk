/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

/**
 * An object containing schema data
 */
export type AuthAuthorizationApiRequestBody = {
  /**
   * OAuth 2.0 authorization request parameters which are the request parameters that the OAuth 2.0 authorization endpoint of
   *
   * @remarks
   * the authorization server implementation received from the client application.
   *
   * The value of parameters is either (1) the entire query string when the HTTP method of the request from the client application is `GET`
   * or (2) the entire entity body (which is formatted in `application/x-www-form-urlencoded`) when the HTTP method of the request from
   * the client application is `POST`.
   */
  parameters: string;
};

export type AuthAuthorizationApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: AuthAuthorizationApiRequestBody;
};

/**
 * The next action that the authorization server implementation should take.
 */
export const AuthAuthorizationApiAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Created: "CREATED",
  Unauthorized: "UNAUTHORIZED",
  Forbidden: "FORBIDDEN",
  Json: "JSON",
  Jwt: "JWT",
  Ok: "OK",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type AuthAuthorizationApiAction = ClosedEnum<
  typeof AuthAuthorizationApiAction
>;

/**
 * An object containing client data
 */
export type AuthAuthorizationApiClient = {
  /**
   * The sequential number of the client. The value of this property is assigned by Authlete.
   *
   * @remarks
   */
  number?: number | undefined;
  /**
   * The name of the client application. This property corresponds to `client_name` in
   *
   * @remarks
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  clientName?: string | undefined;
  /**
   * Client names with language tags. If the client application has different names for different
   *
   * @remarks
   * languages, this property can be used to register the names.
   */
  clientNames?: Array<models.TaggedValue> | undefined;
  /**
   * The description about the client application.
   */
  description?: string | undefined;
  /**
   * Descriptions about the client application with language tags. If the client application has different
   *
   * @remarks
   * descriptions for different languages, this property can be used to register the descriptions.
   */
  descriptions?: Array<models.TaggedValue> | undefined;
  /**
   * The client identifier used in Authlete API calls. The value of this property is assigned by Authlete.
   */
  clientId?: number | undefined;
  /**
   * The value of the client's `client_id` property used in OAuth and OpenID Connect calls. By
   *
   * @remarks
   * default, this is a string version of the `clientId` property.
   */
  clientIdAlias?: string | undefined;
  /**
   * Deprecated. Always set to `true`.
   */
  clientIdAliasEnabled?: boolean | undefined;
  /**
   * The client type, either `CONFIDENTIAL` or `PUBLIC`. See [RFC 6749, 2.1. Client Types](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1)
   *
   * @remarks
   * for details.
   */
  clientType?: models.ClientTypeProperties | undefined;
  /**
   * The URL pointing to the logo image of the client application.
   *
   * @remarks
   *
   * This property corresponds to `logo_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.
   * Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  logoUri?: string | undefined;
  /**
   * Logo image URLs with language tags. If the client application has different logo images for
   *
   * @remarks
   * different languages, this property can be used to register URLs of the images.
   */
  logoUris?: Array<models.TaggedValue> | undefined;
  /**
   * The URL pointing to the "Terms Of Service" page.
   *
   * @remarks
   *
   * This property corresponds to `tos_uri` in
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  tosUri?: string | undefined;
  /**
   * URLs of "Terms Of Service" pages with language tags.
   *
   * @remarks
   *
   * If the client application has different "Terms Of Service" pages for different languages,
   * this property can be used to register the URLs.
   */
  tosUris?: Array<models.TaggedValue> | undefined;
  /**
   * The URL pointing to the page which describes the policy as to how end-user's profile data is used.
   *
   * @remarks
   *
   * This property corresponds to `policy_uri` in
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  policyUri?: string | undefined;
  /**
   * URLs of policy pages with language tags.
   *
   * @remarks
   * If the client application has different policy pages for different languages, this property can be used to register the URLs.
   */
  policyUris?: Array<models.TaggedValue> | undefined;
};

/**
 * An object containing items data
 */
export type AuthAuthorizationApiScope = {
  /**
   * Space-delimited scopes.
   *
   * @remarks
   */
  scope?: string | undefined;
  /**
   * List of resource indicators.
   *
   * @remarks
   */
  resource?: Array<string> | undefined;
};

/**
 * An object containing grant data
 */
export type AuthAuthorizationApiGrant = {
  /**
   * An array of scopes items
   */
  scopes?: Array<AuthAuthorizationApiScope> | undefined;
  /**
   * The claims associated with the Grant.
   *
   * @remarks
   */
  claims?: Array<string> | undefined;
  /**
   * The authorization details. This represents the value of the `authorization_details`
   *
   * @remarks
   * request parameter in the preceding device authorization request which is defined in
   * "OAuth 2.0 Rich Authorization Requests".
   */
  authorizationDetails?: models.AuthorizationDetails | undefined;
};

/**
 * An object containing schema data
 */
export type AuthAuthorizationApiResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: AuthAuthorizationApiAction | undefined;
  /**
   * An object containing client data
   */
  client?: AuthAuthorizationApiClient | undefined;
  /**
   * The display mode which the client application requests by `display` request parameter.
   *
   * @remarks
   * When the authorization request does not have `display` request parameter, `PAGE` is set as the default value.
   *
   * It is ensured that the value of `display` is one of the supported display modes which are specified
   * by `supportedDisplays` configuration parameter of the service. If the display mode specified by the
   * authorization request is not supported, an error is raised.
   *
   * Values for this property correspond to the values listed in
   * "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), display".
   */
  display?: models.Display | undefined;
  /**
   * The maximum authentication age. This value comes from `max_age` request parameter, or `defaultMaxAge` configuration parameter
   *
   * @remarks
   * of the client application when the authorization request does not contain `max_age` request parameter.
   *
   * See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), max_age"
   * for `max_age` request parameter, and see "[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata), default_max_age"
   * for `defaultMaxAge` configuration parameter.
   */
  maxAge?: number | undefined;
  /**
   * An object containing service data
   */
  service?: models.Service | undefined;
  /**
   * The scopes that the client application requests. This value comes from `scope` request parameter.
   *
   * @remarks
   * If the request does not contain `scope` parameter, this parameter is a list of scopes which are registered as default.
   * If the authorization request does not have `scope` request parameter and the service has not registered any default scope,
   * the value of this parameter is `null`.
   *
   * It is ensured that scopes listed by this parameters are contained in the list of supported scopes which are specified
   * by `supportedScopes` configuration parameter of the service. Unsupported scopes in the authorization request do not cause
   * an error and are just ignored.
   *
   * OpenID Connect defines some scope names which need to be treated specially. The table below lists the special scope names.
   *
   * | Name | Description |
   * | --- | --- |
   * | `openid` | This scope must be contained in `scope` request parameter to promote an OAuth 2.0 authorization request to an OpenID Connect request. It is described in "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), scope". |
   * | `profile` | This scope is used to request some claims to be embedded in the ID token. The claims are `name`, `family_name`, `given_name`, `middle_name`, `nickname`, `preferred_username`, `profile`, `picture`, `website`, `gender`, `birthdate`, `zoneinfo`, `locale`, and `updated_at`. It is described in [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims). |
   * | `email` | This scope is used to request some claims to be embedded in the ID token. The claims are `email` and `email_verified`. It is described in [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims). |
   * | `address` |  This scope is used to request `address` claim to be embedded in the ID token. It is described in [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims).<br><br> The format of `address` claim is not a simple string. It is described in [OpenID Connect Core 1.0, 5.1.1. Address Claim](https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim).  |
   * | `phone` | This scope is used to request some claims to be embedded in the ID token. The claims are `phone_number` and `phone_number_verified`. It is described in [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims).  |
   * | `offline_access` | The following is an excerpt about this scope from [OpenID Connect Core 1.0, 11. Offline Access](https://openid.net/specs/openid-connect-core-1_0.html#OfflineAccess). <blockquote>This scope value requests that an OAuth 2.0 Refresh Token be issued that can be used to obtain an Access Token that grants access to the end-user's userinfo endpoint even when the end-user is not present (not logged in).</blockquote>  |
   *
   * Note that, if `response_type` request parameter does not contain code, `offline_acccess` scope is removed from this list even
   * when scope request parameter contains `offline_access`. This behavior is a requirement written in
   * [OpenID Connect Core 1.0, 11. Offline Access](https://openid.net/specs/openid-connect-core-1_0.html#OfflineAccess).
   */
  scopes?: Array<models.Scope> | undefined;
  /**
   * The locales that the client application presented as candidates to be used for UI.
   *
   * @remarks
   * This value comes from `ui_locales` request parameter. The format of `ui_locales` is a space-separated list of language tag values
   * defined in [RFC5646](https://datatracker.ietf.org/doc/html/rfc5646).
   * See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), ui_locales" for details.
   *
   * It is ensured that locales listed by this parameters are contained in the list of supported UI locales which are specified
   * by `supportedUiLocales` configuration parameter of the service. Unsupported UI locales in the authorization request do not
   * cause an error and are just ignored.
   */
  uiLocales?: Array<string> | undefined;
  /**
   * End-user's preferred languages and scripts for claims. This value comes from `claims_locales` request parameter.
   *
   * @remarks
   * The format of `claims_locales` is a space-separated list of language tag values defined in [RFC5646](https://datatracker.ietf.org/doc/html/rfc5646).
   * See "[OpenID Connect Core 1.0, 5.2. Claims Languages and Scripts](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts)" for details.
   *
   * It is ensured that locales listed by this parameters are contained in the list of supported claim locales
   * which are specified by `supportedClaimsLocales` configuration parameter of the service.
   * Unsupported claim locales in the authorization request do not cause an error and are just ignored.
   */
  claimsLocales?: Array<string> | undefined;
  /**
   * The list of claims that the client application requests to be embedded in the ID token.
   *
   * @remarks
   * The value comes from (1) `id_token` in `claims` request parameter [1] and/or (2) special scopes (`profile`, `email`, `address` and `phone`)
   * which are expanded to claims.
   *
   * See [OpenID Connect Core 1.0, 5.5. Requesting Claims using the "claims" Request Parameter](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsParameter)
   * for `claims` request parameter, and see [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims)
   * for the special scopes.
   */
  claims?: Array<string> | undefined;
  /**
   * This boolean value indicates whether the authentication of the end-user must be one of the ACRs (Authentication Context Class References) listed in `acrs` parameter.
   *
   * @remarks
   * This parameter becomes `true` only when (1) the authorization request contains `claims` request parameter and (2) `acr` claim is in it, and (3) `essential` property of
   * the `acr` claim is `true`. See [OpenID Connect Core 1.0, 5.5.1.1. Requesting the "acr" Claim](https://openid.net/specs/openid-connect-core-1_0.html#acrSemantics) for details.
   */
  acrEssential?: boolean | undefined;
  /**
   * `true` if the value of the `client_id` request parameter included in the authorization request is the client ID alias.
   *
   * @remarks
   * `false` if the value is the original numeric client ID.
   */
  clientIdAliasUsed?: boolean | undefined;
  /**
   * The list of ACRs (Authentication Context Class References) one of which the client application requests to be satisfied for the authentication of the end-user.
   *
   * @remarks
   * This value comes from `acr_values` request parameter or `defaultAcrs` configuration parameter of the client application.
   *
   * See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), acr_values" for `acr_values`
   * request parameter, and see "[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata),
   * default_acr_values" for `defaultAcrs` configuration parameter.
   */
  acrs?: Array<string> | undefined;
  /**
   * The subject (= unique user ID managed by the authorization server implementation) that the client application expects to grant authorization.
   *
   * @remarks
   * The value comes from `sub` claim in `claims` request parameter.
   */
  subject?: string | undefined;
  /**
   * A hint about the login identifier of the end-user. The value comes from `login_hint` request parameter.
   */
  loginHint?: string | undefined;
  /**
   * The list of values of prompt request parameter. See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), prompt" for prompt request parameter.
   */
  prompts?: Array<models.Prompt> | undefined;
  /**
   * The prompt that the UI displayed to the end-user must satisfy as the minimum level. This value comes from `prompt` request parameter.
   *
   * @remarks
   *
   * When the authorization request does not contain `prompt` request parameter, `CONSENT` is used as the default value.
   *
   * See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), prompt" for `prompt` request parameter.
   */
  lowestPrompt?: models.Prompt | undefined;
  /**
   * The payload part of the request object. The value of this proprty is `null` if the authorization request does not include a request object.
   *
   * @remarks
   */
  requestObjectPayload?: string | undefined;
  /**
   * The value of the `id_token` property in the claims request parameter or in the claims property in a request object.
   *
   * @remarks
   *
   * A client application may request certain claims be embedded in an ID token or in a response from the userInfo endpoint.
   * There are several ways. Including the `claims` request parameter and including the `claims` property in a request object are such examples.
   * In both the cases, the value of the `claims` parameter/property is JSON. Its format is described in [5.5. Requesting Claims using the "claims"
   * Request Parameter](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsParameter).
   *
   * The following is an excerpt from the specification.
   * You can find `userinfo` and `id_token` are top-level properties.
   *
   * ```json
   * {
   *   "userinfo":
   *   {
   *     "given_name": { "essential": true },
   *     "nickname": null,
   *     "email": { "essential": true },
   *     "email_verified": { "essential": true },
   *     "picture": null,
   *     "http://example.info/claims/groups": null
   *   },
   *   "id_token":
   *   {
   *     "auth_time": { "essential": true },
   *     "acr": { "values": [ "urn:mace:incommon:iap:silver" ] }
   *   }
   * }
   * ```
   *
   * This value of this property is the value of the `id_token` property in JSON format.
   * For example, if the JSON above is included in an authorization request, this property holds JSON equivalent to the following.
   *
   * ```json
   * {
   *   "auth_time": { "essential": true },
   *   "acr": { "values": [ "urn:mace:incommon:iap:silver" ] }
   * }
   * ```
   *
   * Note that if a request object is given and it contains the `claims` property and if the `claims` request parameter is also given,
   * this property holds the former value.
   */
  idTokenClaims?: string | undefined;
  /**
   * The value of the `userinfo` property in the `claims` request parameter or in the `claims` property in a request object.
   *
   * @remarks
   *
   * A client application may request certain claims be embedded in an ID token or in a response from the userInfo endpoint.
   * There are several ways. Including the `claims` request parameter and including the `claims` property in a request object are such examples.
   * In both the cases, the value of the `claims` parameter/property is JSON. Its format is described in [5.5. Requesting Claims using the "claims"
   * Request Parameter](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsParameter).
   *
   * The following is an excerpt from the specification. You can find `userinfo` and `id_token` are top-level properties.
   *
   * ```json
   * {
   *   "userinfo":
   *   {
   *     "given_name": { "essential": true },
   *     "nickname": null,
   *     "email": { "essential": true },
   *     "email_verified": { "essential": true },
   *     "picture": null,
   *     "http://example.info/claims/groups": null
   *   },
   *   "id_token":
   *   {
   *     "auth_time": { "essential": true },
   *     "acr": { "values": [ "urn:mace:incommon:iap:silver" ] }
   *   }
   * }
   * ````
   *
   * The value of this property is the value of the `userinfo` property in JSON format.
   * For example, if the JSON above is included in an authorization request, this property holds JSON equivalent to the following.
   *
   * ```json
   * {
   *   "given_name": { "essential": true },
   *   "nickname": null,
   *   "email": { "essential": true },
   *   "email_verified": { "essential": true },
   *   "picture": null,
   *   "http://example.info/claims/groups": null
   * }
   * ```
   *
   * Note that if a request object is given and it contains the `claims` property and if the `claims` request parameter is also given,
   * the value of this property holds the former value.
   */
  userInfoClaims?: string | undefined;
  /**
   * The resources specified by the `resource` request parameters or by the `resource` property in the request object.
   *
   * @remarks
   * If both are given, the values in the request object should be set. See "Resource Indicators for OAuth 2.0" for details.
   */
  resources?: Array<string> | undefined;
  /**
   * The authorization details. This represents the value of the `authorization_details`
   *
   * @remarks
   * request parameter in the preceding device authorization request which is defined in
   * "OAuth 2.0 Rich Authorization Requests".
   */
  authorizationDetails?: models.AuthorizationDetails | undefined;
  /**
   * The `purpose` request parameter is defined in [9. Transaction-specific Purpose](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#name-transaction-specific-purpos)
   *
   * @remarks
   * of [OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html) as follows:
   *
   * > purpose: OPTIONAL. String describing the purpose for obtaining certain user data from the OP. The purpose MUST NOT be shorter than 3 characters and MUST NOT be longer than 300 characters.
   * If these rules are violated, the authentication request MUST fail and the OP returns an error invalid_request to the RP.
   */
  purpose?: string | undefined;
  /**
   * The content that the authorization server implementation is to return to the client application.
   *
   * @remarks
   * Its format varies depending on the value of `action` parameter.
   */
  responseContent?: string | undefined;
  /**
   * A ticket issued by Authlete to the service implementation. This is needed when the service
   *
   * @remarks
   * implementation calls either `/auth/authorization/fail` API or `/auth/authorization/issue`
   * API.
   */
  ticket?: string | undefined;
  /**
   * The dynamic scopes which the client application requested by the scope request parameter.
   *
   * @remarks
   */
  dynamicScopes?: Array<models.DynamicScope> | undefined;
  /**
   * The grant management action of the device authorization request.
   *
   * @remarks
   *
   * The `grant_management_action` request parameter is defined in
   * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).
   */
  gmAction?: models.ApiServiceIdGmpropertiesgmAction | undefined;
  /**
   * the value of the `grant_id` request parameter of the device authorization request.
   *
   * @remarks
   *
   * The `grant_id` request parameter is defined in
   * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
   * , which is supported by Authlete 2.3 and newer versions.
   */
  grantId?: string | undefined;
  /**
   * An object containing grant data
   */
  grant?: AuthAuthorizationApiGrant | undefined;
  /**
   * The subject identifying the user who has given the grant identified
   *
   * @remarks
   * by the `grant_id` request parameter of the device authorization
   * request.
   *
   * Authlete 2.3 and newer versions support <a href=
   * "https://openid.net/specs/fapi-grant-management.html">Grant Management
   * for OAuth 2.0</a>. An authorization request may contain a `grant_id`
   * request parameter which is defined in the specification. If the value of
   * the request parameter is valid, {@link #getGrantSubject()} will return
   * the subject of the user who has given the grant to the client application.
   * Authorization server implementations may use the value returned from
   * {@link #getGrantSubject()} in order to determine the user to authenticate.
   *
   * The user your system will authenticate during the authorization process
   * (or has already authenticated) may be different from the user of the
   * grant. The first implementer's draft of "Grant Management for OAuth 2.0"
   * does not mention anything about the case, so the behavior in the case is
   * left to implementations. Authlete will not perform the grant management
   * action when the `subject` passed to Authlete does not match the
   * user of the grant.
   */
  grantSubject?: string | undefined;
  /**
   * Get names of claims that are requested indirectly by <i>"transformed
   *
   * @remarks
   * claims"</i>.
   *
   * <p>
   * A client application can request <i>"transformed claims"</i> by adding
   * names of transformed claims in the `claims` request parameter.
   * The following is an example of the `claims` request parameter
   * that requests a predefined transformed claim named `18_or_over`
   * and a transformed claim named `nationality_usa` to be embedded
   * in the response from the userinfo endpoint.
   * </p>
   *
   * ```json
   * {
   *   "transformed_claims": {
   *     "nationality_usa": {
   *       "claim": "nationalities",
   *       "fn": [
   *         [ "eq", "USA" ],
   *         "any"
   *       ]
   *     }
   *   },
   *   "userinfo": {
   *     "::18_or_over": null,
   *     ":nationality_usa": null
   *   }
   * }
   * ```
   *
   * The example above assumes that a transformed claim named `18_or_over`
   * is predefined by the authorization server like below.
   *
   * ```json
   * {
   *   "18_or_over": {
   *     "claim": "birthdate",
   *     "fn": [
   *       "years_ago",
   *       [ "gte", 18 ]
   *     ]
   *   }
   * }
   * ```
   *
   * In the example, the `nationalities` claim is requested indirectly
   * by the `nationality_usa` transformed claim. Likewise, the
   * `birthdate` claim is requested indirectly by the `18_or_over`
   * transformed claim.
   *
   * When the `claims` request parameter of an authorization request is
   * like the example above, this `requestedClaimsForTx` property will
   * hold the following value.
   *
   * ```json
   * [ "birthdate", "nationalities" ]
   * ```
   *
   * It is expected that the authorization server implementation prepares values
   * of the listed claims and passes them as the value of the `claimsForTx`
   * request parameter when it calls the `/api/auth/userinfo/issue` API. The following
   * is an example of the value of the `claimsForTx` request parameter.
   *
   * ```json
   * {
   *   "birthdate": "1970-01-23",
   *   "nationalities": [ "DEU", "USA" ]
   * }
   * ```
   */
  requestedClaimsForTx?: Array<string> | undefined;
  /**
   * Names of verified claims that will be referenced when transformed claims are computed.
   *
   * @remarks
   */
  requestedVerifiedClaimsForTx?: Array<Array<string>> | undefined;
  /**
   * the value of the `transformed_claims` property in the `claims` request
   *
   * @remarks
   * parameter of an authorization request or in the `claims` property in a
   * request object.
   */
  transformedClaims?: string | undefined;
  /**
   * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
   *
   * @remarks
   */
  clientEntityIdUsed?: boolean | undefined;
  /**
   * Get the list of claims that the client application requests to be
   *
   * @remarks
   * embedded in userinfo responses. The value comes from the `"scope"`
   * and `"claims"` request parameters of the original authorization
   * request.
   */
  claimsAtUserInfo?: Array<string> | undefined;
  /**
   * An object containing credentialofferinfo data
   */
  credentialOfferInfo?: models.CredentialOfferInfo | undefined;
  /**
   * Get the information about the <b>issuable credentials</b> that can
   *
   * @remarks
   * be obtained by presenting the access token that will be issued as a
   * result of the authorization request.
   */
  issuableCredentials?: string | undefined;
};

/** @internal */
export const AuthAuthorizationApiRequestBody$inboundSchema: z.ZodType<
  AuthAuthorizationApiRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  parameters: z.string(),
});

/** @internal */
export type AuthAuthorizationApiRequestBody$Outbound = {
  parameters: string;
};

/** @internal */
export const AuthAuthorizationApiRequestBody$outboundSchema: z.ZodType<
  AuthAuthorizationApiRequestBody$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationApiRequestBody
> = z.object({
  parameters: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiRequestBody$ {
  /** @deprecated use `AuthAuthorizationApiRequestBody$inboundSchema` instead. */
  export const inboundSchema = AuthAuthorizationApiRequestBody$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiRequestBody$outboundSchema` instead. */
  export const outboundSchema = AuthAuthorizationApiRequestBody$outboundSchema;
  /** @deprecated use `AuthAuthorizationApiRequestBody$Outbound` instead. */
  export type Outbound = AuthAuthorizationApiRequestBody$Outbound;
}

export function authAuthorizationApiRequestBodyToJSON(
  authAuthorizationApiRequestBody: AuthAuthorizationApiRequestBody,
): string {
  return JSON.stringify(
    AuthAuthorizationApiRequestBody$outboundSchema.parse(
      authAuthorizationApiRequestBody,
    ),
  );
}

export function authAuthorizationApiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<AuthAuthorizationApiRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthAuthorizationApiRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthAuthorizationApiRequestBody' from JSON`,
  );
}

/** @internal */
export const AuthAuthorizationApiRequest$inboundSchema: z.ZodType<
  AuthAuthorizationApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() => AuthAuthorizationApiRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type AuthAuthorizationApiRequest$Outbound = {
  serviceId: string;
  RequestBody: AuthAuthorizationApiRequestBody$Outbound;
};

/** @internal */
export const AuthAuthorizationApiRequest$outboundSchema: z.ZodType<
  AuthAuthorizationApiRequest$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationApiRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() => AuthAuthorizationApiRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiRequest$ {
  /** @deprecated use `AuthAuthorizationApiRequest$inboundSchema` instead. */
  export const inboundSchema = AuthAuthorizationApiRequest$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiRequest$outboundSchema` instead. */
  export const outboundSchema = AuthAuthorizationApiRequest$outboundSchema;
  /** @deprecated use `AuthAuthorizationApiRequest$Outbound` instead. */
  export type Outbound = AuthAuthorizationApiRequest$Outbound;
}

export function authAuthorizationApiRequestToJSON(
  authAuthorizationApiRequest: AuthAuthorizationApiRequest,
): string {
  return JSON.stringify(
    AuthAuthorizationApiRequest$outboundSchema.parse(
      authAuthorizationApiRequest,
    ),
  );
}

export function authAuthorizationApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<AuthAuthorizationApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthAuthorizationApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthAuthorizationApiRequest' from JSON`,
  );
}

/** @internal */
export const AuthAuthorizationApiAction$inboundSchema: z.ZodNativeEnum<
  typeof AuthAuthorizationApiAction
> = z.nativeEnum(AuthAuthorizationApiAction);

/** @internal */
export const AuthAuthorizationApiAction$outboundSchema: z.ZodNativeEnum<
  typeof AuthAuthorizationApiAction
> = AuthAuthorizationApiAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiAction$ {
  /** @deprecated use `AuthAuthorizationApiAction$inboundSchema` instead. */
  export const inboundSchema = AuthAuthorizationApiAction$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiAction$outboundSchema` instead. */
  export const outboundSchema = AuthAuthorizationApiAction$outboundSchema;
}

/** @internal */
export const AuthAuthorizationApiClient$inboundSchema: z.ZodType<
  AuthAuthorizationApiClient,
  z.ZodTypeDef,
  unknown
> = z.object({
  number: z.number().int().optional(),
  clientName: z.string().optional(),
  clientNames: z.array(models.TaggedValue$inboundSchema).optional(),
  description: z.string().optional(),
  descriptions: z.array(models.TaggedValue$inboundSchema).optional(),
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasEnabled: z.boolean().optional(),
  clientType: models.ClientTypeProperties$inboundSchema.optional(),
  logoUri: z.string().optional(),
  logoUris: z.array(models.TaggedValue$inboundSchema).optional(),
  tosUri: z.string().optional(),
  tosUris: z.array(models.TaggedValue$inboundSchema).optional(),
  policyUri: z.string().optional(),
  policyUris: z.array(models.TaggedValue$inboundSchema).optional(),
});

/** @internal */
export type AuthAuthorizationApiClient$Outbound = {
  number?: number | undefined;
  clientName?: string | undefined;
  clientNames?: Array<models.TaggedValue$Outbound> | undefined;
  description?: string | undefined;
  descriptions?: Array<models.TaggedValue$Outbound> | undefined;
  clientId?: number | undefined;
  clientIdAlias?: string | undefined;
  clientIdAliasEnabled?: boolean | undefined;
  clientType?: string | undefined;
  logoUri?: string | undefined;
  logoUris?: Array<models.TaggedValue$Outbound> | undefined;
  tosUri?: string | undefined;
  tosUris?: Array<models.TaggedValue$Outbound> | undefined;
  policyUri?: string | undefined;
  policyUris?: Array<models.TaggedValue$Outbound> | undefined;
};

/** @internal */
export const AuthAuthorizationApiClient$outboundSchema: z.ZodType<
  AuthAuthorizationApiClient$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationApiClient
> = z.object({
  number: z.number().int().optional(),
  clientName: z.string().optional(),
  clientNames: z.array(models.TaggedValue$outboundSchema).optional(),
  description: z.string().optional(),
  descriptions: z.array(models.TaggedValue$outboundSchema).optional(),
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasEnabled: z.boolean().optional(),
  clientType: models.ClientTypeProperties$outboundSchema.optional(),
  logoUri: z.string().optional(),
  logoUris: z.array(models.TaggedValue$outboundSchema).optional(),
  tosUri: z.string().optional(),
  tosUris: z.array(models.TaggedValue$outboundSchema).optional(),
  policyUri: z.string().optional(),
  policyUris: z.array(models.TaggedValue$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiClient$ {
  /** @deprecated use `AuthAuthorizationApiClient$inboundSchema` instead. */
  export const inboundSchema = AuthAuthorizationApiClient$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiClient$outboundSchema` instead. */
  export const outboundSchema = AuthAuthorizationApiClient$outboundSchema;
  /** @deprecated use `AuthAuthorizationApiClient$Outbound` instead. */
  export type Outbound = AuthAuthorizationApiClient$Outbound;
}

export function authAuthorizationApiClientToJSON(
  authAuthorizationApiClient: AuthAuthorizationApiClient,
): string {
  return JSON.stringify(
    AuthAuthorizationApiClient$outboundSchema.parse(authAuthorizationApiClient),
  );
}

export function authAuthorizationApiClientFromJSON(
  jsonString: string,
): SafeParseResult<AuthAuthorizationApiClient, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthAuthorizationApiClient$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthAuthorizationApiClient' from JSON`,
  );
}

/** @internal */
export const AuthAuthorizationApiScope$inboundSchema: z.ZodType<
  AuthAuthorizationApiScope,
  z.ZodTypeDef,
  unknown
> = z.object({
  scope: z.string().optional(),
  resource: z.array(z.string()).optional(),
});

/** @internal */
export type AuthAuthorizationApiScope$Outbound = {
  scope?: string | undefined;
  resource?: Array<string> | undefined;
};

/** @internal */
export const AuthAuthorizationApiScope$outboundSchema: z.ZodType<
  AuthAuthorizationApiScope$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationApiScope
> = z.object({
  scope: z.string().optional(),
  resource: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiScope$ {
  /** @deprecated use `AuthAuthorizationApiScope$inboundSchema` instead. */
  export const inboundSchema = AuthAuthorizationApiScope$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiScope$outboundSchema` instead. */
  export const outboundSchema = AuthAuthorizationApiScope$outboundSchema;
  /** @deprecated use `AuthAuthorizationApiScope$Outbound` instead. */
  export type Outbound = AuthAuthorizationApiScope$Outbound;
}

export function authAuthorizationApiScopeToJSON(
  authAuthorizationApiScope: AuthAuthorizationApiScope,
): string {
  return JSON.stringify(
    AuthAuthorizationApiScope$outboundSchema.parse(authAuthorizationApiScope),
  );
}

export function authAuthorizationApiScopeFromJSON(
  jsonString: string,
): SafeParseResult<AuthAuthorizationApiScope, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthAuthorizationApiScope$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthAuthorizationApiScope' from JSON`,
  );
}

/** @internal */
export const AuthAuthorizationApiGrant$inboundSchema: z.ZodType<
  AuthAuthorizationApiGrant,
  z.ZodTypeDef,
  unknown
> = z.object({
  scopes: z.array(z.lazy(() => AuthAuthorizationApiScope$inboundSchema))
    .optional(),
  claims: z.array(z.string()).optional(),
  authorizationDetails: models.AuthorizationDetails$inboundSchema.optional(),
});

/** @internal */
export type AuthAuthorizationApiGrant$Outbound = {
  scopes?: Array<AuthAuthorizationApiScope$Outbound> | undefined;
  claims?: Array<string> | undefined;
  authorizationDetails?: models.AuthorizationDetails$Outbound | undefined;
};

/** @internal */
export const AuthAuthorizationApiGrant$outboundSchema: z.ZodType<
  AuthAuthorizationApiGrant$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationApiGrant
> = z.object({
  scopes: z.array(z.lazy(() => AuthAuthorizationApiScope$outboundSchema))
    .optional(),
  claims: z.array(z.string()).optional(),
  authorizationDetails: models.AuthorizationDetails$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiGrant$ {
  /** @deprecated use `AuthAuthorizationApiGrant$inboundSchema` instead. */
  export const inboundSchema = AuthAuthorizationApiGrant$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiGrant$outboundSchema` instead. */
  export const outboundSchema = AuthAuthorizationApiGrant$outboundSchema;
  /** @deprecated use `AuthAuthorizationApiGrant$Outbound` instead. */
  export type Outbound = AuthAuthorizationApiGrant$Outbound;
}

export function authAuthorizationApiGrantToJSON(
  authAuthorizationApiGrant: AuthAuthorizationApiGrant,
): string {
  return JSON.stringify(
    AuthAuthorizationApiGrant$outboundSchema.parse(authAuthorizationApiGrant),
  );
}

export function authAuthorizationApiGrantFromJSON(
  jsonString: string,
): SafeParseResult<AuthAuthorizationApiGrant, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthAuthorizationApiGrant$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthAuthorizationApiGrant' from JSON`,
  );
}

/** @internal */
export const AuthAuthorizationApiResponse$inboundSchema: z.ZodType<
  AuthAuthorizationApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthAuthorizationApiAction$inboundSchema.optional(),
  client: z.lazy(() => AuthAuthorizationApiClient$inboundSchema).optional(),
  display: models.Display$inboundSchema.optional(),
  maxAge: z.number().int().optional(),
  service: models.Service$inboundSchema.optional(),
  scopes: z.array(models.Scope$inboundSchema).optional(),
  uiLocales: z.array(z.string()).optional(),
  claimsLocales: z.array(z.string()).optional(),
  claims: z.array(z.string()).optional(),
  acrEssential: z.boolean().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  acrs: z.array(z.string()).optional(),
  subject: z.string().optional(),
  loginHint: z.string().optional(),
  prompts: z.array(models.Prompt$inboundSchema).optional(),
  lowestPrompt: models.Prompt$inboundSchema.optional(),
  requestObjectPayload: z.string().optional(),
  idTokenClaims: z.string().optional(),
  userInfoClaims: z.string().optional(),
  resources: z.array(z.string()).optional(),
  authorizationDetails: models.AuthorizationDetails$inboundSchema.optional(),
  purpose: z.string().optional(),
  responseContent: z.string().optional(),
  ticket: z.string().optional(),
  dynamicScopes: z.array(models.DynamicScope$inboundSchema).optional(),
  gmAction: models.ApiServiceIdGmpropertiesgmAction$inboundSchema.optional(),
  grantId: z.string().optional(),
  grant: z.lazy(() => AuthAuthorizationApiGrant$inboundSchema).optional(),
  grantSubject: z.string().optional(),
  requestedClaimsForTx: z.array(z.string()).optional(),
  requestedVerifiedClaimsForTx: z.array(z.array(z.string())).optional(),
  transformedClaims: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
  claimsAtUserInfo: z.array(z.string()).optional(),
  credentialOfferInfo: models.CredentialOfferInfo$inboundSchema.optional(),
  issuableCredentials: z.string().optional(),
});

/** @internal */
export type AuthAuthorizationApiResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  client?: AuthAuthorizationApiClient$Outbound | undefined;
  display?: string | undefined;
  maxAge?: number | undefined;
  service?: models.Service$Outbound | undefined;
  scopes?: Array<models.Scope$Outbound> | undefined;
  uiLocales?: Array<string> | undefined;
  claimsLocales?: Array<string> | undefined;
  claims?: Array<string> | undefined;
  acrEssential?: boolean | undefined;
  clientIdAliasUsed?: boolean | undefined;
  acrs?: Array<string> | undefined;
  subject?: string | undefined;
  loginHint?: string | undefined;
  prompts?: Array<string> | undefined;
  lowestPrompt?: string | undefined;
  requestObjectPayload?: string | undefined;
  idTokenClaims?: string | undefined;
  userInfoClaims?: string | undefined;
  resources?: Array<string> | undefined;
  authorizationDetails?: models.AuthorizationDetails$Outbound | undefined;
  purpose?: string | undefined;
  responseContent?: string | undefined;
  ticket?: string | undefined;
  dynamicScopes?: Array<models.DynamicScope$Outbound> | undefined;
  gmAction?: string | undefined;
  grantId?: string | undefined;
  grant?: AuthAuthorizationApiGrant$Outbound | undefined;
  grantSubject?: string | undefined;
  requestedClaimsForTx?: Array<string> | undefined;
  requestedVerifiedClaimsForTx?: Array<Array<string>> | undefined;
  transformedClaims?: string | undefined;
  clientEntityIdUsed?: boolean | undefined;
  claimsAtUserInfo?: Array<string> | undefined;
  credentialOfferInfo?: models.CredentialOfferInfo$Outbound | undefined;
  issuableCredentials?: string | undefined;
};

/** @internal */
export const AuthAuthorizationApiResponse$outboundSchema: z.ZodType<
  AuthAuthorizationApiResponse$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationApiResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthAuthorizationApiAction$outboundSchema.optional(),
  client: z.lazy(() => AuthAuthorizationApiClient$outboundSchema).optional(),
  display: models.Display$outboundSchema.optional(),
  maxAge: z.number().int().optional(),
  service: models.Service$outboundSchema.optional(),
  scopes: z.array(models.Scope$outboundSchema).optional(),
  uiLocales: z.array(z.string()).optional(),
  claimsLocales: z.array(z.string()).optional(),
  claims: z.array(z.string()).optional(),
  acrEssential: z.boolean().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  acrs: z.array(z.string()).optional(),
  subject: z.string().optional(),
  loginHint: z.string().optional(),
  prompts: z.array(models.Prompt$outboundSchema).optional(),
  lowestPrompt: models.Prompt$outboundSchema.optional(),
  requestObjectPayload: z.string().optional(),
  idTokenClaims: z.string().optional(),
  userInfoClaims: z.string().optional(),
  resources: z.array(z.string()).optional(),
  authorizationDetails: models.AuthorizationDetails$outboundSchema.optional(),
  purpose: z.string().optional(),
  responseContent: z.string().optional(),
  ticket: z.string().optional(),
  dynamicScopes: z.array(models.DynamicScope$outboundSchema).optional(),
  gmAction: models.ApiServiceIdGmpropertiesgmAction$outboundSchema.optional(),
  grantId: z.string().optional(),
  grant: z.lazy(() => AuthAuthorizationApiGrant$outboundSchema).optional(),
  grantSubject: z.string().optional(),
  requestedClaimsForTx: z.array(z.string()).optional(),
  requestedVerifiedClaimsForTx: z.array(z.array(z.string())).optional(),
  transformedClaims: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
  claimsAtUserInfo: z.array(z.string()).optional(),
  credentialOfferInfo: models.CredentialOfferInfo$outboundSchema.optional(),
  issuableCredentials: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiResponse$ {
  /** @deprecated use `AuthAuthorizationApiResponse$inboundSchema` instead. */
  export const inboundSchema = AuthAuthorizationApiResponse$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiResponse$outboundSchema` instead. */
  export const outboundSchema = AuthAuthorizationApiResponse$outboundSchema;
  /** @deprecated use `AuthAuthorizationApiResponse$Outbound` instead. */
  export type Outbound = AuthAuthorizationApiResponse$Outbound;
}

export function authAuthorizationApiResponseToJSON(
  authAuthorizationApiResponse: AuthAuthorizationApiResponse,
): string {
  return JSON.stringify(
    AuthAuthorizationApiResponse$outboundSchema.parse(
      authAuthorizationApiResponse,
    ),
  );
}

export function authAuthorizationApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<AuthAuthorizationApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthAuthorizationApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthAuthorizationApiResponse' from JSON`,
  );
}
