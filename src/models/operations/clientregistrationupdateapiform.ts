/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ClientRegistrationUpdateApiFormRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  clientRegistrationUpdateRequest: models.ClientRegistrationUpdateRequest;
};

/**
 * The next action that the authorization server implementation should take.
 *
 * @remarks
 */
export const ClientRegistrationUpdateApiFormAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Updated: "UPDATED",
  Unauthorized: "UNAUTHORIZED",
} as const;
/**
 * The next action that the authorization server implementation should take.
 *
 * @remarks
 */
export type ClientRegistrationUpdateApiFormAction = ClosedEnum<
  typeof ClientRegistrationUpdateApiFormAction
>;

/**
 * Successful operation
 */
export type ClientRegistrationUpdateApiFormResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   *
   * @remarks
   */
  action?: ClientRegistrationUpdateApiFormAction | undefined;
  /**
   * The content that the authorization server implementation is to return to the client application.
   *
   * @remarks
   * Its format varies depending on the value of `action` parameter.
   */
  responseContent?: string | undefined;
  client?: models.Client | undefined;
};

/** @internal */
export const ClientRegistrationUpdateApiFormRequest$inboundSchema: z.ZodType<
  ClientRegistrationUpdateApiFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  ClientRegistrationUpdateRequest:
    models.ClientRegistrationUpdateRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "ClientRegistrationUpdateRequest": "clientRegistrationUpdateRequest",
  });
});

/** @internal */
export type ClientRegistrationUpdateApiFormRequest$Outbound = {
  serviceId: string;
  ClientRegistrationUpdateRequest:
    models.ClientRegistrationUpdateRequest$Outbound;
};

/** @internal */
export const ClientRegistrationUpdateApiFormRequest$outboundSchema: z.ZodType<
  ClientRegistrationUpdateApiFormRequest$Outbound,
  z.ZodTypeDef,
  ClientRegistrationUpdateApiFormRequest
> = z.object({
  serviceId: z.string(),
  clientRegistrationUpdateRequest:
    models.ClientRegistrationUpdateRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    clientRegistrationUpdateRequest: "ClientRegistrationUpdateRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationUpdateApiFormRequest$ {
  /** @deprecated use `ClientRegistrationUpdateApiFormRequest$inboundSchema` instead. */
  export const inboundSchema =
    ClientRegistrationUpdateApiFormRequest$inboundSchema;
  /** @deprecated use `ClientRegistrationUpdateApiFormRequest$outboundSchema` instead. */
  export const outboundSchema =
    ClientRegistrationUpdateApiFormRequest$outboundSchema;
  /** @deprecated use `ClientRegistrationUpdateApiFormRequest$Outbound` instead. */
  export type Outbound = ClientRegistrationUpdateApiFormRequest$Outbound;
}

export function clientRegistrationUpdateApiFormRequestToJSON(
  clientRegistrationUpdateApiFormRequest:
    ClientRegistrationUpdateApiFormRequest,
): string {
  return JSON.stringify(
    ClientRegistrationUpdateApiFormRequest$outboundSchema.parse(
      clientRegistrationUpdateApiFormRequest,
    ),
  );
}

export function clientRegistrationUpdateApiFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<ClientRegistrationUpdateApiFormRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ClientRegistrationUpdateApiFormRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientRegistrationUpdateApiFormRequest' from JSON`,
  );
}

/** @internal */
export const ClientRegistrationUpdateApiFormAction$inboundSchema:
  z.ZodNativeEnum<typeof ClientRegistrationUpdateApiFormAction> = z.nativeEnum(
    ClientRegistrationUpdateApiFormAction,
  );

/** @internal */
export const ClientRegistrationUpdateApiFormAction$outboundSchema:
  z.ZodNativeEnum<typeof ClientRegistrationUpdateApiFormAction> =
    ClientRegistrationUpdateApiFormAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationUpdateApiFormAction$ {
  /** @deprecated use `ClientRegistrationUpdateApiFormAction$inboundSchema` instead. */
  export const inboundSchema =
    ClientRegistrationUpdateApiFormAction$inboundSchema;
  /** @deprecated use `ClientRegistrationUpdateApiFormAction$outboundSchema` instead. */
  export const outboundSchema =
    ClientRegistrationUpdateApiFormAction$outboundSchema;
}

/** @internal */
export const ClientRegistrationUpdateApiFormResponse$inboundSchema: z.ZodType<
  ClientRegistrationUpdateApiFormResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: ClientRegistrationUpdateApiFormAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
  client: models.Client$inboundSchema.optional(),
});

/** @internal */
export type ClientRegistrationUpdateApiFormResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  client?: models.Client$Outbound | undefined;
};

/** @internal */
export const ClientRegistrationUpdateApiFormResponse$outboundSchema: z.ZodType<
  ClientRegistrationUpdateApiFormResponse$Outbound,
  z.ZodTypeDef,
  ClientRegistrationUpdateApiFormResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: ClientRegistrationUpdateApiFormAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
  client: models.Client$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationUpdateApiFormResponse$ {
  /** @deprecated use `ClientRegistrationUpdateApiFormResponse$inboundSchema` instead. */
  export const inboundSchema =
    ClientRegistrationUpdateApiFormResponse$inboundSchema;
  /** @deprecated use `ClientRegistrationUpdateApiFormResponse$outboundSchema` instead. */
  export const outboundSchema =
    ClientRegistrationUpdateApiFormResponse$outboundSchema;
  /** @deprecated use `ClientRegistrationUpdateApiFormResponse$Outbound` instead. */
  export type Outbound = ClientRegistrationUpdateApiFormResponse$Outbound;
}

export function clientRegistrationUpdateApiFormResponseToJSON(
  clientRegistrationUpdateApiFormResponse:
    ClientRegistrationUpdateApiFormResponse,
): string {
  return JSON.stringify(
    ClientRegistrationUpdateApiFormResponse$outboundSchema.parse(
      clientRegistrationUpdateApiFormResponse,
    ),
  );
}

export function clientRegistrationUpdateApiFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  ClientRegistrationUpdateApiFormResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ClientRegistrationUpdateApiFormResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ClientRegistrationUpdateApiFormResponse' from JSON`,
  );
}
