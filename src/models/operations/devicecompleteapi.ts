/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

/**
 * The result of the end-user authentication and authorization. One of the following. Details are
 *
 * @remarks
 * described in the description.
 */
export const DeviceCompleteApiResult = {
  TransactionFailed: "TRANSACTION_FAILED",
  AccessDenied: "ACCESS_DENIED",
  Authorized: "AUTHORIZED",
} as const;
/**
 * The result of the end-user authentication and authorization. One of the following. Details are
 *
 * @remarks
 * described in the description.
 */
export type DeviceCompleteApiResult = ClosedEnum<
  typeof DeviceCompleteApiResult
>;

/**
 * An object containing schema data
 */
export type DeviceCompleteApiRequestBody = {
  /**
   * A user code.
   *
   * @remarks
   */
  userCode: string;
  /**
   * The result of the end-user authentication and authorization. One of the following. Details are
   *
   * @remarks
   * described in the description.
   */
  result: DeviceCompleteApiResult;
  /**
   * The subject (= unique identifier) of the end-user.
   *
   * @remarks
   */
  subject: string;
  /**
   * The value of the sub claim that should be used in the ID token.
   *
   * @remarks
   */
  sub?: string | undefined;
  /**
   * The time at which the end-user was authenticated. Its value is the number of seconds from `1970-01-01`.
   *
   * @remarks
   */
  authTime?: number | undefined;
  /**
   * The reference of the authentication context class which the end-user authentication satisfied.
   *
   * @remarks
   */
  acr?: string | undefined;
  /**
   * Additional claims which will be embedded in the ID token.
   *
   * @remarks
   */
  claims?: string | undefined;
  /**
   * The extra properties associated with the access token.
   *
   * @remarks
   */
  properties?: Array<models.Property> | undefined;
  /**
   * Scopes to replace the scopes specified in the original device authorization request with.
   *
   * @remarks
   * When nothing is specified for this parameter, replacement is not performed.
   */
  scopes?: Array<string> | undefined;
  /**
   * The description of the error. If this optional request parameter is given, its value is used as
   *
   * @remarks
   * the value of the `error_description` property, but it is used only when the result is not `AUTHORIZED`.
   * To comply with the specification strictly, the description must not include characters outside
   * the set `%x20-21 / %x23-5B / %x5D-7E`.
   */
  errorDescription?: string | undefined;
  /**
   * The URI of a document which describes the error in detail. This corresponds to the `error_uri`
   *
   * @remarks
   * property in the response to the client.
   */
  errorUri?: string | undefined;
  /**
   * JSON that represents additional JWS header parameters for ID tokens.
   *
   * @remarks
   */
  idtHeaderParams?: string | undefined;
  /**
   * the claims that the user has consented for the client application
   *
   * @remarks
   * to know.
   */
  consentedClaims?: Array<string> | undefined;
  /**
   * Additional claims that are added to the payload part of the JWT access token.
   *
   * @remarks
   */
  jwtAtClaims?: string | undefined;
};

export type DeviceCompleteApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: DeviceCompleteApiRequestBody;
};

/**
 * The next action that the authorization server implementation should take.
 *
 * @remarks
 */
export const DeviceCompleteApiAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Created: "CREATED",
  Unauthorized: "UNAUTHORIZED",
  Forbidden: "FORBIDDEN",
  Json: "JSON",
  Jwt: "JWT",
  Ok: "OK",
} as const;
/**
 * The next action that the authorization server implementation should take.
 *
 * @remarks
 */
export type DeviceCompleteApiAction = ClosedEnum<
  typeof DeviceCompleteApiAction
>;

/**
 * An object containing schema data
 */
export type DeviceCompleteApiResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   *
   * @remarks
   */
  action?: DeviceCompleteApiAction | undefined;
};

/** @internal */
export const DeviceCompleteApiResult$inboundSchema: z.ZodNativeEnum<
  typeof DeviceCompleteApiResult
> = z.nativeEnum(DeviceCompleteApiResult);

/** @internal */
export const DeviceCompleteApiResult$outboundSchema: z.ZodNativeEnum<
  typeof DeviceCompleteApiResult
> = DeviceCompleteApiResult$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceCompleteApiResult$ {
  /** @deprecated use `DeviceCompleteApiResult$inboundSchema` instead. */
  export const inboundSchema = DeviceCompleteApiResult$inboundSchema;
  /** @deprecated use `DeviceCompleteApiResult$outboundSchema` instead. */
  export const outboundSchema = DeviceCompleteApiResult$outboundSchema;
}

/** @internal */
export const DeviceCompleteApiRequestBody$inboundSchema: z.ZodType<
  DeviceCompleteApiRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  userCode: z.string(),
  result: DeviceCompleteApiResult$inboundSchema,
  subject: z.string(),
  sub: z.string().optional(),
  authTime: z.number().int().optional(),
  acr: z.string().optional(),
  claims: z.string().optional(),
  properties: z.array(models.Property$inboundSchema).optional(),
  scopes: z.array(z.string()).optional(),
  errorDescription: z.string().optional(),
  errorUri: z.string().optional(),
  idtHeaderParams: z.string().optional(),
  consentedClaims: z.array(z.string()).optional(),
  jwtAtClaims: z.string().optional(),
});

/** @internal */
export type DeviceCompleteApiRequestBody$Outbound = {
  userCode: string;
  result: string;
  subject: string;
  sub?: string | undefined;
  authTime?: number | undefined;
  acr?: string | undefined;
  claims?: string | undefined;
  properties?: Array<models.Property$Outbound> | undefined;
  scopes?: Array<string> | undefined;
  errorDescription?: string | undefined;
  errorUri?: string | undefined;
  idtHeaderParams?: string | undefined;
  consentedClaims?: Array<string> | undefined;
  jwtAtClaims?: string | undefined;
};

/** @internal */
export const DeviceCompleteApiRequestBody$outboundSchema: z.ZodType<
  DeviceCompleteApiRequestBody$Outbound,
  z.ZodTypeDef,
  DeviceCompleteApiRequestBody
> = z.object({
  userCode: z.string(),
  result: DeviceCompleteApiResult$outboundSchema,
  subject: z.string(),
  sub: z.string().optional(),
  authTime: z.number().int().optional(),
  acr: z.string().optional(),
  claims: z.string().optional(),
  properties: z.array(models.Property$outboundSchema).optional(),
  scopes: z.array(z.string()).optional(),
  errorDescription: z.string().optional(),
  errorUri: z.string().optional(),
  idtHeaderParams: z.string().optional(),
  consentedClaims: z.array(z.string()).optional(),
  jwtAtClaims: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceCompleteApiRequestBody$ {
  /** @deprecated use `DeviceCompleteApiRequestBody$inboundSchema` instead. */
  export const inboundSchema = DeviceCompleteApiRequestBody$inboundSchema;
  /** @deprecated use `DeviceCompleteApiRequestBody$outboundSchema` instead. */
  export const outboundSchema = DeviceCompleteApiRequestBody$outboundSchema;
  /** @deprecated use `DeviceCompleteApiRequestBody$Outbound` instead. */
  export type Outbound = DeviceCompleteApiRequestBody$Outbound;
}

export function deviceCompleteApiRequestBodyToJSON(
  deviceCompleteApiRequestBody: DeviceCompleteApiRequestBody,
): string {
  return JSON.stringify(
    DeviceCompleteApiRequestBody$outboundSchema.parse(
      deviceCompleteApiRequestBody,
    ),
  );
}

export function deviceCompleteApiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeviceCompleteApiRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeviceCompleteApiRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceCompleteApiRequestBody' from JSON`,
  );
}

/** @internal */
export const DeviceCompleteApiRequest$inboundSchema: z.ZodType<
  DeviceCompleteApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() => DeviceCompleteApiRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type DeviceCompleteApiRequest$Outbound = {
  serviceId: string;
  RequestBody: DeviceCompleteApiRequestBody$Outbound;
};

/** @internal */
export const DeviceCompleteApiRequest$outboundSchema: z.ZodType<
  DeviceCompleteApiRequest$Outbound,
  z.ZodTypeDef,
  DeviceCompleteApiRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() => DeviceCompleteApiRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceCompleteApiRequest$ {
  /** @deprecated use `DeviceCompleteApiRequest$inboundSchema` instead. */
  export const inboundSchema = DeviceCompleteApiRequest$inboundSchema;
  /** @deprecated use `DeviceCompleteApiRequest$outboundSchema` instead. */
  export const outboundSchema = DeviceCompleteApiRequest$outboundSchema;
  /** @deprecated use `DeviceCompleteApiRequest$Outbound` instead. */
  export type Outbound = DeviceCompleteApiRequest$Outbound;
}

export function deviceCompleteApiRequestToJSON(
  deviceCompleteApiRequest: DeviceCompleteApiRequest,
): string {
  return JSON.stringify(
    DeviceCompleteApiRequest$outboundSchema.parse(deviceCompleteApiRequest),
  );
}

export function deviceCompleteApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeviceCompleteApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeviceCompleteApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceCompleteApiRequest' from JSON`,
  );
}

/** @internal */
export const DeviceCompleteApiAction$inboundSchema: z.ZodNativeEnum<
  typeof DeviceCompleteApiAction
> = z.nativeEnum(DeviceCompleteApiAction);

/** @internal */
export const DeviceCompleteApiAction$outboundSchema: z.ZodNativeEnum<
  typeof DeviceCompleteApiAction
> = DeviceCompleteApiAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceCompleteApiAction$ {
  /** @deprecated use `DeviceCompleteApiAction$inboundSchema` instead. */
  export const inboundSchema = DeviceCompleteApiAction$inboundSchema;
  /** @deprecated use `DeviceCompleteApiAction$outboundSchema` instead. */
  export const outboundSchema = DeviceCompleteApiAction$outboundSchema;
}

/** @internal */
export const DeviceCompleteApiResponse$inboundSchema: z.ZodType<
  DeviceCompleteApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: DeviceCompleteApiAction$inboundSchema.optional(),
});

/** @internal */
export type DeviceCompleteApiResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
};

/** @internal */
export const DeviceCompleteApiResponse$outboundSchema: z.ZodType<
  DeviceCompleteApiResponse$Outbound,
  z.ZodTypeDef,
  DeviceCompleteApiResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: DeviceCompleteApiAction$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceCompleteApiResponse$ {
  /** @deprecated use `DeviceCompleteApiResponse$inboundSchema` instead. */
  export const inboundSchema = DeviceCompleteApiResponse$inboundSchema;
  /** @deprecated use `DeviceCompleteApiResponse$outboundSchema` instead. */
  export const outboundSchema = DeviceCompleteApiResponse$outboundSchema;
  /** @deprecated use `DeviceCompleteApiResponse$Outbound` instead. */
  export type Outbound = DeviceCompleteApiResponse$Outbound;
}

export function deviceCompleteApiResponseToJSON(
  deviceCompleteApiResponse: DeviceCompleteApiResponse,
): string {
  return JSON.stringify(
    DeviceCompleteApiResponse$outboundSchema.parse(deviceCompleteApiResponse),
  );
}

export function deviceCompleteApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeviceCompleteApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeviceCompleteApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceCompleteApiResponse' from JSON`,
  );
}
