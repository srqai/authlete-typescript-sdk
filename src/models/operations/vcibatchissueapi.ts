/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

/**
 * An object containing schema data
 */
export type VciBatchIssueApiRequestBody = {
  /**
   * The access token that came along with the credential request.
   */
  accessToken?: string | undefined;
  /**
   * The instructions for issuance of credentials and/or transaction IDs.
   */
  orders?: Array<models.CredentialIssuanceOrder> | undefined;
};

export type VciBatchIssueApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: VciBatchIssueApiRequestBody;
};

/**
 * The next action that the implementation of the batch credential
 *
 * @remarks
 * endpoint should take.
 */
export const VciBatchIssueApiAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Created: "CREATED",
  Unauthorized: "UNAUTHORIZED",
  Forbidden: "FORBIDDEN",
  Json: "JSON",
  Jwt: "JWT",
  Ok: "OK",
} as const;
/**
 * The next action that the implementation of the batch credential
 *
 * @remarks
 * endpoint should take.
 */
export type VciBatchIssueApiAction = ClosedEnum<typeof VciBatchIssueApiAction>;

/**
 * An object containing schema data
 */
export type VciBatchIssueApiResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the implementation of the batch credential
   *
   * @remarks
   * endpoint should take.
   */
  action?: VciBatchIssueApiAction | undefined;
  /**
   * The content of the response that the implementation of the batch
   *
   * @remarks
   * credential endpoint should return.
   */
  responseContent?: string | undefined;
};

/** @internal */
export const VciBatchIssueApiRequestBody$inboundSchema: z.ZodType<
  VciBatchIssueApiRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessToken: z.string().optional(),
  orders: z.array(models.CredentialIssuanceOrder$inboundSchema).optional(),
});

/** @internal */
export type VciBatchIssueApiRequestBody$Outbound = {
  accessToken?: string | undefined;
  orders?: Array<models.CredentialIssuanceOrder$Outbound> | undefined;
};

/** @internal */
export const VciBatchIssueApiRequestBody$outboundSchema: z.ZodType<
  VciBatchIssueApiRequestBody$Outbound,
  z.ZodTypeDef,
  VciBatchIssueApiRequestBody
> = z.object({
  accessToken: z.string().optional(),
  orders: z.array(models.CredentialIssuanceOrder$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciBatchIssueApiRequestBody$ {
  /** @deprecated use `VciBatchIssueApiRequestBody$inboundSchema` instead. */
  export const inboundSchema = VciBatchIssueApiRequestBody$inboundSchema;
  /** @deprecated use `VciBatchIssueApiRequestBody$outboundSchema` instead. */
  export const outboundSchema = VciBatchIssueApiRequestBody$outboundSchema;
  /** @deprecated use `VciBatchIssueApiRequestBody$Outbound` instead. */
  export type Outbound = VciBatchIssueApiRequestBody$Outbound;
}

export function vciBatchIssueApiRequestBodyToJSON(
  vciBatchIssueApiRequestBody: VciBatchIssueApiRequestBody,
): string {
  return JSON.stringify(
    VciBatchIssueApiRequestBody$outboundSchema.parse(
      vciBatchIssueApiRequestBody,
    ),
  );
}

export function vciBatchIssueApiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<VciBatchIssueApiRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciBatchIssueApiRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciBatchIssueApiRequestBody' from JSON`,
  );
}

/** @internal */
export const VciBatchIssueApiRequest$inboundSchema: z.ZodType<
  VciBatchIssueApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() => VciBatchIssueApiRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type VciBatchIssueApiRequest$Outbound = {
  serviceId: string;
  RequestBody: VciBatchIssueApiRequestBody$Outbound;
};

/** @internal */
export const VciBatchIssueApiRequest$outboundSchema: z.ZodType<
  VciBatchIssueApiRequest$Outbound,
  z.ZodTypeDef,
  VciBatchIssueApiRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() => VciBatchIssueApiRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciBatchIssueApiRequest$ {
  /** @deprecated use `VciBatchIssueApiRequest$inboundSchema` instead. */
  export const inboundSchema = VciBatchIssueApiRequest$inboundSchema;
  /** @deprecated use `VciBatchIssueApiRequest$outboundSchema` instead. */
  export const outboundSchema = VciBatchIssueApiRequest$outboundSchema;
  /** @deprecated use `VciBatchIssueApiRequest$Outbound` instead. */
  export type Outbound = VciBatchIssueApiRequest$Outbound;
}

export function vciBatchIssueApiRequestToJSON(
  vciBatchIssueApiRequest: VciBatchIssueApiRequest,
): string {
  return JSON.stringify(
    VciBatchIssueApiRequest$outboundSchema.parse(vciBatchIssueApiRequest),
  );
}

export function vciBatchIssueApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<VciBatchIssueApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciBatchIssueApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciBatchIssueApiRequest' from JSON`,
  );
}

/** @internal */
export const VciBatchIssueApiAction$inboundSchema: z.ZodNativeEnum<
  typeof VciBatchIssueApiAction
> = z.nativeEnum(VciBatchIssueApiAction);

/** @internal */
export const VciBatchIssueApiAction$outboundSchema: z.ZodNativeEnum<
  typeof VciBatchIssueApiAction
> = VciBatchIssueApiAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciBatchIssueApiAction$ {
  /** @deprecated use `VciBatchIssueApiAction$inboundSchema` instead. */
  export const inboundSchema = VciBatchIssueApiAction$inboundSchema;
  /** @deprecated use `VciBatchIssueApiAction$outboundSchema` instead. */
  export const outboundSchema = VciBatchIssueApiAction$outboundSchema;
}

/** @internal */
export const VciBatchIssueApiResponse$inboundSchema: z.ZodType<
  VciBatchIssueApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciBatchIssueApiAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
});

/** @internal */
export type VciBatchIssueApiResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
};

/** @internal */
export const VciBatchIssueApiResponse$outboundSchema: z.ZodType<
  VciBatchIssueApiResponse$Outbound,
  z.ZodTypeDef,
  VciBatchIssueApiResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciBatchIssueApiAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciBatchIssueApiResponse$ {
  /** @deprecated use `VciBatchIssueApiResponse$inboundSchema` instead. */
  export const inboundSchema = VciBatchIssueApiResponse$inboundSchema;
  /** @deprecated use `VciBatchIssueApiResponse$outboundSchema` instead. */
  export const outboundSchema = VciBatchIssueApiResponse$outboundSchema;
  /** @deprecated use `VciBatchIssueApiResponse$Outbound` instead. */
  export type Outbound = VciBatchIssueApiResponse$Outbound;
}

export function vciBatchIssueApiResponseToJSON(
  vciBatchIssueApiResponse: VciBatchIssueApiResponse,
): string {
  return JSON.stringify(
    VciBatchIssueApiResponse$outboundSchema.parse(vciBatchIssueApiResponse),
  );
}

export function vciBatchIssueApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<VciBatchIssueApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciBatchIssueApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciBatchIssueApiResponse' from JSON`,
  );
}
