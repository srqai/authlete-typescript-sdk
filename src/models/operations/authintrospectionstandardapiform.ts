/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type AuthIntrospectionStandardApiFormRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  apilBraceserviceIdRBraceAuthIntrospectionStandard:
    models.APILBraceserviceIdRBraceAuthIntrospectionStandard;
};

/**
 * The next action that the authorization server implementation should take.
 */
export const AuthIntrospectionStandardApiFormAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Ok: "OK",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type AuthIntrospectionStandardApiFormAction = ClosedEnum<
  typeof AuthIntrospectionStandardApiFormAction
>;

export type AuthIntrospectionStandardApiFormResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: AuthIntrospectionStandardApiFormAction | undefined;
  /**
   * The content that the authorization server implementation is to return to the client
   *
   * @remarks
   * application.
   */
  responseContent?: string | undefined;
};

/** @internal */
export const AuthIntrospectionStandardApiFormRequest$inboundSchema: z.ZodType<
  AuthIntrospectionStandardApiFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  APILBraceserviceIdRBraceAuthIntrospectionStandard:
    models.APILBraceserviceIdRBraceAuthIntrospectionStandard$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "APILBraceserviceIdRBraceAuthIntrospectionStandard":
      "apilBraceserviceIdRBraceAuthIntrospectionStandard",
  });
});

/** @internal */
export type AuthIntrospectionStandardApiFormRequest$Outbound = {
  serviceId: string;
  APILBraceserviceIdRBraceAuthIntrospectionStandard:
    models.APILBraceserviceIdRBraceAuthIntrospectionStandard$Outbound;
};

/** @internal */
export const AuthIntrospectionStandardApiFormRequest$outboundSchema: z.ZodType<
  AuthIntrospectionStandardApiFormRequest$Outbound,
  z.ZodTypeDef,
  AuthIntrospectionStandardApiFormRequest
> = z.object({
  serviceId: z.string(),
  apilBraceserviceIdRBraceAuthIntrospectionStandard:
    models.APILBraceserviceIdRBraceAuthIntrospectionStandard$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    apilBraceserviceIdRBraceAuthIntrospectionStandard:
      "APILBraceserviceIdRBraceAuthIntrospectionStandard",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionStandardApiFormRequest$ {
  /** @deprecated use `AuthIntrospectionStandardApiFormRequest$inboundSchema` instead. */
  export const inboundSchema =
    AuthIntrospectionStandardApiFormRequest$inboundSchema;
  /** @deprecated use `AuthIntrospectionStandardApiFormRequest$outboundSchema` instead. */
  export const outboundSchema =
    AuthIntrospectionStandardApiFormRequest$outboundSchema;
  /** @deprecated use `AuthIntrospectionStandardApiFormRequest$Outbound` instead. */
  export type Outbound = AuthIntrospectionStandardApiFormRequest$Outbound;
}

export function authIntrospectionStandardApiFormRequestToJSON(
  authIntrospectionStandardApiFormRequest:
    AuthIntrospectionStandardApiFormRequest,
): string {
  return JSON.stringify(
    AuthIntrospectionStandardApiFormRequest$outboundSchema.parse(
      authIntrospectionStandardApiFormRequest,
    ),
  );
}

export function authIntrospectionStandardApiFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  AuthIntrospectionStandardApiFormRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AuthIntrospectionStandardApiFormRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AuthIntrospectionStandardApiFormRequest' from JSON`,
  );
}

/** @internal */
export const AuthIntrospectionStandardApiFormAction$inboundSchema:
  z.ZodNativeEnum<typeof AuthIntrospectionStandardApiFormAction> = z.nativeEnum(
    AuthIntrospectionStandardApiFormAction,
  );

/** @internal */
export const AuthIntrospectionStandardApiFormAction$outboundSchema:
  z.ZodNativeEnum<typeof AuthIntrospectionStandardApiFormAction> =
    AuthIntrospectionStandardApiFormAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionStandardApiFormAction$ {
  /** @deprecated use `AuthIntrospectionStandardApiFormAction$inboundSchema` instead. */
  export const inboundSchema =
    AuthIntrospectionStandardApiFormAction$inboundSchema;
  /** @deprecated use `AuthIntrospectionStandardApiFormAction$outboundSchema` instead. */
  export const outboundSchema =
    AuthIntrospectionStandardApiFormAction$outboundSchema;
}

/** @internal */
export const AuthIntrospectionStandardApiFormResponse$inboundSchema: z.ZodType<
  AuthIntrospectionStandardApiFormResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthIntrospectionStandardApiFormAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
});

/** @internal */
export type AuthIntrospectionStandardApiFormResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
};

/** @internal */
export const AuthIntrospectionStandardApiFormResponse$outboundSchema: z.ZodType<
  AuthIntrospectionStandardApiFormResponse$Outbound,
  z.ZodTypeDef,
  AuthIntrospectionStandardApiFormResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthIntrospectionStandardApiFormAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionStandardApiFormResponse$ {
  /** @deprecated use `AuthIntrospectionStandardApiFormResponse$inboundSchema` instead. */
  export const inboundSchema =
    AuthIntrospectionStandardApiFormResponse$inboundSchema;
  /** @deprecated use `AuthIntrospectionStandardApiFormResponse$outboundSchema` instead. */
  export const outboundSchema =
    AuthIntrospectionStandardApiFormResponse$outboundSchema;
  /** @deprecated use `AuthIntrospectionStandardApiFormResponse$Outbound` instead. */
  export type Outbound = AuthIntrospectionStandardApiFormResponse$Outbound;
}

export function authIntrospectionStandardApiFormResponseToJSON(
  authIntrospectionStandardApiFormResponse:
    AuthIntrospectionStandardApiFormResponse,
): string {
  return JSON.stringify(
    AuthIntrospectionStandardApiFormResponse$outboundSchema.parse(
      authIntrospectionStandardApiFormResponse,
    ),
  );
}

export function authIntrospectionStandardApiFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  AuthIntrospectionStandardApiFormResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AuthIntrospectionStandardApiFormResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AuthIntrospectionStandardApiFormResponse' from JSON`,
  );
}
