/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

/**
 * An object containing schema data
 */
export type VciSingleIssueApiRequestBody = {
  /**
   * The access token that came along with the credential request.
   */
  accessToken?: string | undefined;
  /**
   * An object containing credentialissuanceorder data
   */
  order?: models.CredentialIssuanceOrder | undefined;
};

export type VciSingleIssueApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: VciSingleIssueApiRequestBody;
};

/**
 * The next action that the implementation of the credential endpoint
 *
 * @remarks
 * should take.
 */
export const VciSingleIssueApiAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Created: "CREATED",
  Unauthorized: "UNAUTHORIZED",
  Forbidden: "FORBIDDEN",
  Json: "JSON",
  Jwt: "JWT",
  Ok: "OK",
} as const;
/**
 * The next action that the implementation of the credential endpoint
 *
 * @remarks
 * should take.
 */
export type VciSingleIssueApiAction = ClosedEnum<
  typeof VciSingleIssueApiAction
>;

/**
 * An object containing schema data
 */
export type VciSingleIssueApiResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the implementation of the credential endpoint
   *
   * @remarks
   * should take.
   */
  action?: VciSingleIssueApiAction | undefined;
  /**
   * The content of the response that the implementation of the credential
   *
   * @remarks
   * endpoint should return.
   */
  responseContent?: string | undefined;
  /**
   * The issued transaction ID.
   *
   * @remarks
   */
  transactionId?: string | undefined;
};

/** @internal */
export const VciSingleIssueApiRequestBody$inboundSchema: z.ZodType<
  VciSingleIssueApiRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessToken: z.string().optional(),
  order: models.CredentialIssuanceOrder$inboundSchema.optional(),
});

/** @internal */
export type VciSingleIssueApiRequestBody$Outbound = {
  accessToken?: string | undefined;
  order?: models.CredentialIssuanceOrder$Outbound | undefined;
};

/** @internal */
export const VciSingleIssueApiRequestBody$outboundSchema: z.ZodType<
  VciSingleIssueApiRequestBody$Outbound,
  z.ZodTypeDef,
  VciSingleIssueApiRequestBody
> = z.object({
  accessToken: z.string().optional(),
  order: models.CredentialIssuanceOrder$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciSingleIssueApiRequestBody$ {
  /** @deprecated use `VciSingleIssueApiRequestBody$inboundSchema` instead. */
  export const inboundSchema = VciSingleIssueApiRequestBody$inboundSchema;
  /** @deprecated use `VciSingleIssueApiRequestBody$outboundSchema` instead. */
  export const outboundSchema = VciSingleIssueApiRequestBody$outboundSchema;
  /** @deprecated use `VciSingleIssueApiRequestBody$Outbound` instead. */
  export type Outbound = VciSingleIssueApiRequestBody$Outbound;
}

export function vciSingleIssueApiRequestBodyToJSON(
  vciSingleIssueApiRequestBody: VciSingleIssueApiRequestBody,
): string {
  return JSON.stringify(
    VciSingleIssueApiRequestBody$outboundSchema.parse(
      vciSingleIssueApiRequestBody,
    ),
  );
}

export function vciSingleIssueApiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<VciSingleIssueApiRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciSingleIssueApiRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciSingleIssueApiRequestBody' from JSON`,
  );
}

/** @internal */
export const VciSingleIssueApiRequest$inboundSchema: z.ZodType<
  VciSingleIssueApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() => VciSingleIssueApiRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type VciSingleIssueApiRequest$Outbound = {
  serviceId: string;
  RequestBody: VciSingleIssueApiRequestBody$Outbound;
};

/** @internal */
export const VciSingleIssueApiRequest$outboundSchema: z.ZodType<
  VciSingleIssueApiRequest$Outbound,
  z.ZodTypeDef,
  VciSingleIssueApiRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() => VciSingleIssueApiRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciSingleIssueApiRequest$ {
  /** @deprecated use `VciSingleIssueApiRequest$inboundSchema` instead. */
  export const inboundSchema = VciSingleIssueApiRequest$inboundSchema;
  /** @deprecated use `VciSingleIssueApiRequest$outboundSchema` instead. */
  export const outboundSchema = VciSingleIssueApiRequest$outboundSchema;
  /** @deprecated use `VciSingleIssueApiRequest$Outbound` instead. */
  export type Outbound = VciSingleIssueApiRequest$Outbound;
}

export function vciSingleIssueApiRequestToJSON(
  vciSingleIssueApiRequest: VciSingleIssueApiRequest,
): string {
  return JSON.stringify(
    VciSingleIssueApiRequest$outboundSchema.parse(vciSingleIssueApiRequest),
  );
}

export function vciSingleIssueApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<VciSingleIssueApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciSingleIssueApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciSingleIssueApiRequest' from JSON`,
  );
}

/** @internal */
export const VciSingleIssueApiAction$inboundSchema: z.ZodNativeEnum<
  typeof VciSingleIssueApiAction
> = z.nativeEnum(VciSingleIssueApiAction);

/** @internal */
export const VciSingleIssueApiAction$outboundSchema: z.ZodNativeEnum<
  typeof VciSingleIssueApiAction
> = VciSingleIssueApiAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciSingleIssueApiAction$ {
  /** @deprecated use `VciSingleIssueApiAction$inboundSchema` instead. */
  export const inboundSchema = VciSingleIssueApiAction$inboundSchema;
  /** @deprecated use `VciSingleIssueApiAction$outboundSchema` instead. */
  export const outboundSchema = VciSingleIssueApiAction$outboundSchema;
}

/** @internal */
export const VciSingleIssueApiResponse$inboundSchema: z.ZodType<
  VciSingleIssueApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciSingleIssueApiAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
  transactionId: z.string().optional(),
});

/** @internal */
export type VciSingleIssueApiResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  transactionId?: string | undefined;
};

/** @internal */
export const VciSingleIssueApiResponse$outboundSchema: z.ZodType<
  VciSingleIssueApiResponse$Outbound,
  z.ZodTypeDef,
  VciSingleIssueApiResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciSingleIssueApiAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
  transactionId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciSingleIssueApiResponse$ {
  /** @deprecated use `VciSingleIssueApiResponse$inboundSchema` instead. */
  export const inboundSchema = VciSingleIssueApiResponse$inboundSchema;
  /** @deprecated use `VciSingleIssueApiResponse$outboundSchema` instead. */
  export const outboundSchema = VciSingleIssueApiResponse$outboundSchema;
  /** @deprecated use `VciSingleIssueApiResponse$Outbound` instead. */
  export type Outbound = VciSingleIssueApiResponse$Outbound;
}

export function vciSingleIssueApiResponseToJSON(
  vciSingleIssueApiResponse: VciSingleIssueApiResponse,
): string {
  return JSON.stringify(
    VciSingleIssueApiResponse$outboundSchema.parse(vciSingleIssueApiResponse),
  );
}

export function vciSingleIssueApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<VciSingleIssueApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciSingleIssueApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciSingleIssueApiResponse' from JSON`,
  );
}
