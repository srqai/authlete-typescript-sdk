/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type BackchannelAuthenticationIssueApiFormRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  apilBraceserviceIdRBraceBackchannelAuthenticationIssue:
    models.APILBraceserviceIdRBraceBackchannelAuthenticationIssue;
};

/**
 * The next action that the authorization server implementation should take.
 */
export const BackchannelAuthenticationIssueApiFormAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  InvalidTicket: "INVALID_TICKET",
  Ok: "OK",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type BackchannelAuthenticationIssueApiFormAction = ClosedEnum<
  typeof BackchannelAuthenticationIssueApiFormAction
>;

export type BackchannelAuthenticationIssueApiFormResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: BackchannelAuthenticationIssueApiFormAction | undefined;
  /**
   * The content that the authorization server implementation is to return to the client
   *
   * @remarks
   * application. Its format varies depending on the value of `action` parameter.
   */
  responseContent?: string | undefined;
  /**
   * The newly issued authentication request ID.
   *
   * @remarks
   */
  authReqId?: string | undefined;
  /**
   * The duration of the issued authentication request ID in seconds.
   *
   * @remarks
   */
  expiresIn?: number | undefined;
  /**
   * The minimum amount of time in seconds that the client must wait for between polling
   *
   * @remarks
   * requests to the token endpoint.
   */
  interval?: number | undefined;
};

/** @internal */
export const BackchannelAuthenticationIssueApiFormRequest$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationIssueApiFormRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    serviceId: z.string(),
    APILBraceserviceIdRBraceBackchannelAuthenticationIssue:
      models
        .APILBraceserviceIdRBraceBackchannelAuthenticationIssue$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "APILBraceserviceIdRBraceBackchannelAuthenticationIssue":
        "apilBraceserviceIdRBraceBackchannelAuthenticationIssue",
    });
  });

/** @internal */
export type BackchannelAuthenticationIssueApiFormRequest$Outbound = {
  serviceId: string;
  APILBraceserviceIdRBraceBackchannelAuthenticationIssue:
    models.APILBraceserviceIdRBraceBackchannelAuthenticationIssue$Outbound;
};

/** @internal */
export const BackchannelAuthenticationIssueApiFormRequest$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationIssueApiFormRequest$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationIssueApiFormRequest
  > = z.object({
    serviceId: z.string(),
    apilBraceserviceIdRBraceBackchannelAuthenticationIssue:
      models
        .APILBraceserviceIdRBraceBackchannelAuthenticationIssue$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      apilBraceserviceIdRBraceBackchannelAuthenticationIssue:
        "APILBraceserviceIdRBraceBackchannelAuthenticationIssue",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationIssueApiFormRequest$ {
  /** @deprecated use `BackchannelAuthenticationIssueApiFormRequest$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationIssueApiFormRequest$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationIssueApiFormRequest$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationIssueApiFormRequest$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationIssueApiFormRequest$Outbound` instead. */
  export type Outbound = BackchannelAuthenticationIssueApiFormRequest$Outbound;
}

export function backchannelAuthenticationIssueApiFormRequestToJSON(
  backchannelAuthenticationIssueApiFormRequest:
    BackchannelAuthenticationIssueApiFormRequest,
): string {
  return JSON.stringify(
    BackchannelAuthenticationIssueApiFormRequest$outboundSchema.parse(
      backchannelAuthenticationIssueApiFormRequest,
    ),
  );
}

export function backchannelAuthenticationIssueApiFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  BackchannelAuthenticationIssueApiFormRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationIssueApiFormRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BackchannelAuthenticationIssueApiFormRequest' from JSON`,
  );
}

/** @internal */
export const BackchannelAuthenticationIssueApiFormAction$inboundSchema:
  z.ZodNativeEnum<typeof BackchannelAuthenticationIssueApiFormAction> = z
    .nativeEnum(BackchannelAuthenticationIssueApiFormAction);

/** @internal */
export const BackchannelAuthenticationIssueApiFormAction$outboundSchema:
  z.ZodNativeEnum<typeof BackchannelAuthenticationIssueApiFormAction> =
    BackchannelAuthenticationIssueApiFormAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationIssueApiFormAction$ {
  /** @deprecated use `BackchannelAuthenticationIssueApiFormAction$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationIssueApiFormAction$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationIssueApiFormAction$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationIssueApiFormAction$outboundSchema;
}

/** @internal */
export const BackchannelAuthenticationIssueApiFormResponse$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationIssueApiFormResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
    action: BackchannelAuthenticationIssueApiFormAction$inboundSchema
      .optional(),
    responseContent: z.string().optional(),
    authReqId: z.string().optional(),
    expiresIn: z.number().int().optional(),
    interval: z.number().int().optional(),
  });

/** @internal */
export type BackchannelAuthenticationIssueApiFormResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  authReqId?: string | undefined;
  expiresIn?: number | undefined;
  interval?: number | undefined;
};

/** @internal */
export const BackchannelAuthenticationIssueApiFormResponse$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationIssueApiFormResponse$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationIssueApiFormResponse
  > = z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
    action: BackchannelAuthenticationIssueApiFormAction$outboundSchema
      .optional(),
    responseContent: z.string().optional(),
    authReqId: z.string().optional(),
    expiresIn: z.number().int().optional(),
    interval: z.number().int().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationIssueApiFormResponse$ {
  /** @deprecated use `BackchannelAuthenticationIssueApiFormResponse$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationIssueApiFormResponse$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationIssueApiFormResponse$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationIssueApiFormResponse$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationIssueApiFormResponse$Outbound` instead. */
  export type Outbound = BackchannelAuthenticationIssueApiFormResponse$Outbound;
}

export function backchannelAuthenticationIssueApiFormResponseToJSON(
  backchannelAuthenticationIssueApiFormResponse:
    BackchannelAuthenticationIssueApiFormResponse,
): string {
  return JSON.stringify(
    BackchannelAuthenticationIssueApiFormResponse$outboundSchema.parse(
      backchannelAuthenticationIssueApiFormResponse,
    ),
  );
}

export function backchannelAuthenticationIssueApiFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  BackchannelAuthenticationIssueApiFormResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationIssueApiFormResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BackchannelAuthenticationIssueApiFormResponse' from JSON`,
  );
}
