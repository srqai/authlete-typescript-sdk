/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type VciSingleParseApiRequestBody = {
  /**
   * The access token that came along with the credential request.
   */
  accessToken?: string | undefined;
  /**
   * The message body of the credential request.
   */
  requestContent?: string | undefined;
};

export type VciSingleParseApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: VciSingleParseApiRequestBody;
};

/**
 * The next action that the credential endpoint should take.
 */
export const VciSingleParseApiAction = {
  Ok: "OK",
  BadRequest: "BAD_REQUEST",
  Unauthorized: "UNAUTHORIZED",
  Forbidden: "FORBIDDEN",
  InternalServerError: "INTERNAL_SERVER_ERROR",
} as const;
/**
 * The next action that the credential endpoint should take.
 */
export type VciSingleParseApiAction = ClosedEnum<
  typeof VciSingleParseApiAction
>;

/**
 * Successful operation
 */
export type VciSingleParseApiResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the credential endpoint should take.
   */
  action?: VciSingleParseApiAction | undefined;
  /**
   * The content of the response to the request sender.
   */
  responseContent?: string | undefined;
  info?: models.CredentialRequestInfo | undefined;
};

/** @internal */
export const VciSingleParseApiRequestBody$inboundSchema: z.ZodType<
  VciSingleParseApiRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessToken: z.string().optional(),
  requestContent: z.string().optional(),
});

/** @internal */
export type VciSingleParseApiRequestBody$Outbound = {
  accessToken?: string | undefined;
  requestContent?: string | undefined;
};

/** @internal */
export const VciSingleParseApiRequestBody$outboundSchema: z.ZodType<
  VciSingleParseApiRequestBody$Outbound,
  z.ZodTypeDef,
  VciSingleParseApiRequestBody
> = z.object({
  accessToken: z.string().optional(),
  requestContent: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciSingleParseApiRequestBody$ {
  /** @deprecated use `VciSingleParseApiRequestBody$inboundSchema` instead. */
  export const inboundSchema = VciSingleParseApiRequestBody$inboundSchema;
  /** @deprecated use `VciSingleParseApiRequestBody$outboundSchema` instead. */
  export const outboundSchema = VciSingleParseApiRequestBody$outboundSchema;
  /** @deprecated use `VciSingleParseApiRequestBody$Outbound` instead. */
  export type Outbound = VciSingleParseApiRequestBody$Outbound;
}

export function vciSingleParseApiRequestBodyToJSON(
  vciSingleParseApiRequestBody: VciSingleParseApiRequestBody,
): string {
  return JSON.stringify(
    VciSingleParseApiRequestBody$outboundSchema.parse(
      vciSingleParseApiRequestBody,
    ),
  );
}

export function vciSingleParseApiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<VciSingleParseApiRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciSingleParseApiRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciSingleParseApiRequestBody' from JSON`,
  );
}

/** @internal */
export const VciSingleParseApiRequest$inboundSchema: z.ZodType<
  VciSingleParseApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() => VciSingleParseApiRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type VciSingleParseApiRequest$Outbound = {
  serviceId: string;
  RequestBody: VciSingleParseApiRequestBody$Outbound;
};

/** @internal */
export const VciSingleParseApiRequest$outboundSchema: z.ZodType<
  VciSingleParseApiRequest$Outbound,
  z.ZodTypeDef,
  VciSingleParseApiRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() => VciSingleParseApiRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciSingleParseApiRequest$ {
  /** @deprecated use `VciSingleParseApiRequest$inboundSchema` instead. */
  export const inboundSchema = VciSingleParseApiRequest$inboundSchema;
  /** @deprecated use `VciSingleParseApiRequest$outboundSchema` instead. */
  export const outboundSchema = VciSingleParseApiRequest$outboundSchema;
  /** @deprecated use `VciSingleParseApiRequest$Outbound` instead. */
  export type Outbound = VciSingleParseApiRequest$Outbound;
}

export function vciSingleParseApiRequestToJSON(
  vciSingleParseApiRequest: VciSingleParseApiRequest,
): string {
  return JSON.stringify(
    VciSingleParseApiRequest$outboundSchema.parse(vciSingleParseApiRequest),
  );
}

export function vciSingleParseApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<VciSingleParseApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciSingleParseApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciSingleParseApiRequest' from JSON`,
  );
}

/** @internal */
export const VciSingleParseApiAction$inboundSchema: z.ZodNativeEnum<
  typeof VciSingleParseApiAction
> = z.nativeEnum(VciSingleParseApiAction);

/** @internal */
export const VciSingleParseApiAction$outboundSchema: z.ZodNativeEnum<
  typeof VciSingleParseApiAction
> = VciSingleParseApiAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciSingleParseApiAction$ {
  /** @deprecated use `VciSingleParseApiAction$inboundSchema` instead. */
  export const inboundSchema = VciSingleParseApiAction$inboundSchema;
  /** @deprecated use `VciSingleParseApiAction$outboundSchema` instead. */
  export const outboundSchema = VciSingleParseApiAction$outboundSchema;
}

/** @internal */
export const VciSingleParseApiResponse$inboundSchema: z.ZodType<
  VciSingleParseApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciSingleParseApiAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
  info: models.CredentialRequestInfo$inboundSchema.optional(),
});

/** @internal */
export type VciSingleParseApiResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  info?: models.CredentialRequestInfo$Outbound | undefined;
};

/** @internal */
export const VciSingleParseApiResponse$outboundSchema: z.ZodType<
  VciSingleParseApiResponse$Outbound,
  z.ZodTypeDef,
  VciSingleParseApiResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciSingleParseApiAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
  info: models.CredentialRequestInfo$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciSingleParseApiResponse$ {
  /** @deprecated use `VciSingleParseApiResponse$inboundSchema` instead. */
  export const inboundSchema = VciSingleParseApiResponse$inboundSchema;
  /** @deprecated use `VciSingleParseApiResponse$outboundSchema` instead. */
  export const outboundSchema = VciSingleParseApiResponse$outboundSchema;
  /** @deprecated use `VciSingleParseApiResponse$Outbound` instead. */
  export type Outbound = VciSingleParseApiResponse$Outbound;
}

export function vciSingleParseApiResponseToJSON(
  vciSingleParseApiResponse: VciSingleParseApiResponse,
): string {
  return JSON.stringify(
    VciSingleParseApiResponse$outboundSchema.parse(vciSingleParseApiResponse),
  );
}

export function vciSingleParseApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<VciSingleParseApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciSingleParseApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciSingleParseApiResponse' from JSON`,
  );
}
