/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ClientRegistrationDeleteApiFormRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  clientRegistration2Request: models.ClientRegistration2Request;
};

/**
 * The next action that the authorization server implementation should take.
 *
 * @remarks
 */
export const ClientRegistrationDeleteApiFormAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Deleted: "DELETED",
  Unauthorized: "UNAUTHORIZED",
} as const;
/**
 * The next action that the authorization server implementation should take.
 *
 * @remarks
 */
export type ClientRegistrationDeleteApiFormAction = ClosedEnum<
  typeof ClientRegistrationDeleteApiFormAction
>;

/**
 * Successful operation
 */
export type ClientRegistrationDeleteApiFormResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   *
   * @remarks
   */
  action?: ClientRegistrationDeleteApiFormAction | undefined;
  /**
   * The content that the authorization server implementation is to return to the client application.
   *
   * @remarks
   * Its format varies depending on the value of `action` parameter.
   */
  responseContent?: string | undefined;
  client?: models.Client | undefined;
};

/** @internal */
export const ClientRegistrationDeleteApiFormRequest$inboundSchema: z.ZodType<
  ClientRegistrationDeleteApiFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  ClientRegistration2Request: models.ClientRegistration2Request$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "ClientRegistration2Request": "clientRegistration2Request",
  });
});

/** @internal */
export type ClientRegistrationDeleteApiFormRequest$Outbound = {
  serviceId: string;
  ClientRegistration2Request: models.ClientRegistration2Request$Outbound;
};

/** @internal */
export const ClientRegistrationDeleteApiFormRequest$outboundSchema: z.ZodType<
  ClientRegistrationDeleteApiFormRequest$Outbound,
  z.ZodTypeDef,
  ClientRegistrationDeleteApiFormRequest
> = z.object({
  serviceId: z.string(),
  clientRegistration2Request: models.ClientRegistration2Request$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    clientRegistration2Request: "ClientRegistration2Request",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationDeleteApiFormRequest$ {
  /** @deprecated use `ClientRegistrationDeleteApiFormRequest$inboundSchema` instead. */
  export const inboundSchema =
    ClientRegistrationDeleteApiFormRequest$inboundSchema;
  /** @deprecated use `ClientRegistrationDeleteApiFormRequest$outboundSchema` instead. */
  export const outboundSchema =
    ClientRegistrationDeleteApiFormRequest$outboundSchema;
  /** @deprecated use `ClientRegistrationDeleteApiFormRequest$Outbound` instead. */
  export type Outbound = ClientRegistrationDeleteApiFormRequest$Outbound;
}

export function clientRegistrationDeleteApiFormRequestToJSON(
  clientRegistrationDeleteApiFormRequest:
    ClientRegistrationDeleteApiFormRequest,
): string {
  return JSON.stringify(
    ClientRegistrationDeleteApiFormRequest$outboundSchema.parse(
      clientRegistrationDeleteApiFormRequest,
    ),
  );
}

export function clientRegistrationDeleteApiFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<ClientRegistrationDeleteApiFormRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ClientRegistrationDeleteApiFormRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientRegistrationDeleteApiFormRequest' from JSON`,
  );
}

/** @internal */
export const ClientRegistrationDeleteApiFormAction$inboundSchema:
  z.ZodNativeEnum<typeof ClientRegistrationDeleteApiFormAction> = z.nativeEnum(
    ClientRegistrationDeleteApiFormAction,
  );

/** @internal */
export const ClientRegistrationDeleteApiFormAction$outboundSchema:
  z.ZodNativeEnum<typeof ClientRegistrationDeleteApiFormAction> =
    ClientRegistrationDeleteApiFormAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationDeleteApiFormAction$ {
  /** @deprecated use `ClientRegistrationDeleteApiFormAction$inboundSchema` instead. */
  export const inboundSchema =
    ClientRegistrationDeleteApiFormAction$inboundSchema;
  /** @deprecated use `ClientRegistrationDeleteApiFormAction$outboundSchema` instead. */
  export const outboundSchema =
    ClientRegistrationDeleteApiFormAction$outboundSchema;
}

/** @internal */
export const ClientRegistrationDeleteApiFormResponse$inboundSchema: z.ZodType<
  ClientRegistrationDeleteApiFormResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: ClientRegistrationDeleteApiFormAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
  client: models.Client$inboundSchema.optional(),
});

/** @internal */
export type ClientRegistrationDeleteApiFormResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  client?: models.Client$Outbound | undefined;
};

/** @internal */
export const ClientRegistrationDeleteApiFormResponse$outboundSchema: z.ZodType<
  ClientRegistrationDeleteApiFormResponse$Outbound,
  z.ZodTypeDef,
  ClientRegistrationDeleteApiFormResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: ClientRegistrationDeleteApiFormAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
  client: models.Client$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationDeleteApiFormResponse$ {
  /** @deprecated use `ClientRegistrationDeleteApiFormResponse$inboundSchema` instead. */
  export const inboundSchema =
    ClientRegistrationDeleteApiFormResponse$inboundSchema;
  /** @deprecated use `ClientRegistrationDeleteApiFormResponse$outboundSchema` instead. */
  export const outboundSchema =
    ClientRegistrationDeleteApiFormResponse$outboundSchema;
  /** @deprecated use `ClientRegistrationDeleteApiFormResponse$Outbound` instead. */
  export type Outbound = ClientRegistrationDeleteApiFormResponse$Outbound;
}

export function clientRegistrationDeleteApiFormResponseToJSON(
  clientRegistrationDeleteApiFormResponse:
    ClientRegistrationDeleteApiFormResponse,
): string {
  return JSON.stringify(
    ClientRegistrationDeleteApiFormResponse$outboundSchema.parse(
      clientRegistrationDeleteApiFormResponse,
    ),
  );
}

export function clientRegistrationDeleteApiFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  ClientRegistrationDeleteApiFormResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ClientRegistrationDeleteApiFormResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ClientRegistrationDeleteApiFormResponse' from JSON`,
  );
}
