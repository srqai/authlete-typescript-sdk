/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type VciJwtissuerApiFormRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  vciJwtIssuerRequest: models.VciJwtIssuerRequest;
};

/**
 * The next action that the implementation of the JWT issuer metadata
 *
 * @remarks
 * endpoint (`/.well-known/jwt-issuer`) should take after getting
 * a response from Authlete's `/vci/jwtissuer` API.
 */
export const VciJwtissuerApiFormAction = {
  Ok: "OK",
  NotFound: "NOT_FOUND",
  InternalServerError: "INTERNAL_SERVER_ERROR",
} as const;
/**
 * The next action that the implementation of the JWT issuer metadata
 *
 * @remarks
 * endpoint (`/.well-known/jwt-issuer`) should take after getting
 * a response from Authlete's `/vci/jwtissuer` API.
 */
export type VciJwtissuerApiFormAction = ClosedEnum<
  typeof VciJwtissuerApiFormAction
>;

/**
 * Successful operation
 */
export type VciJwtissuerApiFormResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the implementation of the JWT issuer metadata
   *
   * @remarks
   * endpoint (`/.well-known/jwt-issuer`) should take after getting
   * a response from Authlete's `/vci/jwtissuer` API.
   */
  action?: VciJwtissuerApiFormAction | undefined;
  /**
   * Get the content that the implementation of the credential issuer
   *
   * @remarks
   * metadata endpoint should use when it constructs a response.
   */
  responseContent?: string | undefined;
};

/** @internal */
export const VciJwtissuerApiFormRequest$inboundSchema: z.ZodType<
  VciJwtissuerApiFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  VciJwtIssuerRequest: models.VciJwtIssuerRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "VciJwtIssuerRequest": "vciJwtIssuerRequest",
  });
});

/** @internal */
export type VciJwtissuerApiFormRequest$Outbound = {
  serviceId: string;
  VciJwtIssuerRequest: models.VciJwtIssuerRequest$Outbound;
};

/** @internal */
export const VciJwtissuerApiFormRequest$outboundSchema: z.ZodType<
  VciJwtissuerApiFormRequest$Outbound,
  z.ZodTypeDef,
  VciJwtissuerApiFormRequest
> = z.object({
  serviceId: z.string(),
  vciJwtIssuerRequest: models.VciJwtIssuerRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    vciJwtIssuerRequest: "VciJwtIssuerRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciJwtissuerApiFormRequest$ {
  /** @deprecated use `VciJwtissuerApiFormRequest$inboundSchema` instead. */
  export const inboundSchema = VciJwtissuerApiFormRequest$inboundSchema;
  /** @deprecated use `VciJwtissuerApiFormRequest$outboundSchema` instead. */
  export const outboundSchema = VciJwtissuerApiFormRequest$outboundSchema;
  /** @deprecated use `VciJwtissuerApiFormRequest$Outbound` instead. */
  export type Outbound = VciJwtissuerApiFormRequest$Outbound;
}

export function vciJwtissuerApiFormRequestToJSON(
  vciJwtissuerApiFormRequest: VciJwtissuerApiFormRequest,
): string {
  return JSON.stringify(
    VciJwtissuerApiFormRequest$outboundSchema.parse(vciJwtissuerApiFormRequest),
  );
}

export function vciJwtissuerApiFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<VciJwtissuerApiFormRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciJwtissuerApiFormRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciJwtissuerApiFormRequest' from JSON`,
  );
}

/** @internal */
export const VciJwtissuerApiFormAction$inboundSchema: z.ZodNativeEnum<
  typeof VciJwtissuerApiFormAction
> = z.nativeEnum(VciJwtissuerApiFormAction);

/** @internal */
export const VciJwtissuerApiFormAction$outboundSchema: z.ZodNativeEnum<
  typeof VciJwtissuerApiFormAction
> = VciJwtissuerApiFormAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciJwtissuerApiFormAction$ {
  /** @deprecated use `VciJwtissuerApiFormAction$inboundSchema` instead. */
  export const inboundSchema = VciJwtissuerApiFormAction$inboundSchema;
  /** @deprecated use `VciJwtissuerApiFormAction$outboundSchema` instead. */
  export const outboundSchema = VciJwtissuerApiFormAction$outboundSchema;
}

/** @internal */
export const VciJwtissuerApiFormResponse$inboundSchema: z.ZodType<
  VciJwtissuerApiFormResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciJwtissuerApiFormAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
});

/** @internal */
export type VciJwtissuerApiFormResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
};

/** @internal */
export const VciJwtissuerApiFormResponse$outboundSchema: z.ZodType<
  VciJwtissuerApiFormResponse$Outbound,
  z.ZodTypeDef,
  VciJwtissuerApiFormResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciJwtissuerApiFormAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciJwtissuerApiFormResponse$ {
  /** @deprecated use `VciJwtissuerApiFormResponse$inboundSchema` instead. */
  export const inboundSchema = VciJwtissuerApiFormResponse$inboundSchema;
  /** @deprecated use `VciJwtissuerApiFormResponse$outboundSchema` instead. */
  export const outboundSchema = VciJwtissuerApiFormResponse$outboundSchema;
  /** @deprecated use `VciJwtissuerApiFormResponse$Outbound` instead. */
  export type Outbound = VciJwtissuerApiFormResponse$Outbound;
}

export function vciJwtissuerApiFormResponseToJSON(
  vciJwtissuerApiFormResponse: VciJwtissuerApiFormResponse,
): string {
  return JSON.stringify(
    VciJwtissuerApiFormResponse$outboundSchema.parse(
      vciJwtissuerApiFormResponse,
    ),
  );
}

export function vciJwtissuerApiFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<VciJwtissuerApiFormResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciJwtissuerApiFormResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciJwtissuerApiFormResponse' from JSON`,
  );
}
