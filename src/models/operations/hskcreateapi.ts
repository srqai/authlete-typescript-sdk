/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type HskCreateApiRequestBody = {
  /**
   * The key type (EC or RSA)
   *
   * @remarks
   */
  kty?: string | undefined;
  /**
   * The key on the HSM.
   *
   * @remarks
   * When the key use is "sig" (signature), the private key on the HSM is used to sign data and the corresponding public key is used to verify the signature.
   * When the key use is "enc" (encryption), the private key on the HSM is used to decrypt encrypted data which have been encrypted with the corresponding public key
   */
  use?: string | undefined;
  /**
   * Key ID for the key on the HSM.
   *
   * @remarks
   */
  kid?: string | undefined;
  /**
   * The name of the HSM.
   *
   * @remarks
   * The identifier for the HSM that sits behind the Authlete server. For example, "google".
   */
  hsmName?: string | undefined;
  /**
   * The handle for the key on the HSM.
   *
   * @remarks
   * A handle is a base64url-encoded 256-bit random value (43 letters) which is assigned by Authlete on the call of the /api/hsk/create API
   */
  handle?: string | undefined;
  /**
   * The public key that corresponds to the key on the HSM.
   *
   * @remarks
   */
  publicKey?: string | undefined;
};

export type HskCreateApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: HskCreateApiRequestBody;
};

/**
 * Result of the API call
 */
export const HskCreateApiAction = {
  Success: "SUCCESS",
  InvalidRequest: "INVALID_REQUEST",
  NotFound: "NOT_FOUND",
  ServerError: "SERVER_ERROR",
} as const;
/**
 * Result of the API call
 */
export type HskCreateApiAction = ClosedEnum<typeof HskCreateApiAction>;

/**
 * Successful operation
 */
export type HskCreateApiResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * Result of the API call
   */
  action?: HskCreateApiAction | undefined;
  /**
   * Holds information about a key managed in an HSM (Hardware Security Module)
   *
   * @remarks
   */
  hsk?: models.Hsk | undefined;
};

/** @internal */
export const HskCreateApiRequestBody$inboundSchema: z.ZodType<
  HskCreateApiRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  kty: z.string().optional(),
  use: z.string().optional(),
  kid: z.string().optional(),
  hsmName: z.string().optional(),
  handle: z.string().optional(),
  publicKey: z.string().optional(),
});

/** @internal */
export type HskCreateApiRequestBody$Outbound = {
  kty?: string | undefined;
  use?: string | undefined;
  kid?: string | undefined;
  hsmName?: string | undefined;
  handle?: string | undefined;
  publicKey?: string | undefined;
};

/** @internal */
export const HskCreateApiRequestBody$outboundSchema: z.ZodType<
  HskCreateApiRequestBody$Outbound,
  z.ZodTypeDef,
  HskCreateApiRequestBody
> = z.object({
  kty: z.string().optional(),
  use: z.string().optional(),
  kid: z.string().optional(),
  hsmName: z.string().optional(),
  handle: z.string().optional(),
  publicKey: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HskCreateApiRequestBody$ {
  /** @deprecated use `HskCreateApiRequestBody$inboundSchema` instead. */
  export const inboundSchema = HskCreateApiRequestBody$inboundSchema;
  /** @deprecated use `HskCreateApiRequestBody$outboundSchema` instead. */
  export const outboundSchema = HskCreateApiRequestBody$outboundSchema;
  /** @deprecated use `HskCreateApiRequestBody$Outbound` instead. */
  export type Outbound = HskCreateApiRequestBody$Outbound;
}

export function hskCreateApiRequestBodyToJSON(
  hskCreateApiRequestBody: HskCreateApiRequestBody,
): string {
  return JSON.stringify(
    HskCreateApiRequestBody$outboundSchema.parse(hskCreateApiRequestBody),
  );
}

export function hskCreateApiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<HskCreateApiRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HskCreateApiRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HskCreateApiRequestBody' from JSON`,
  );
}

/** @internal */
export const HskCreateApiRequest$inboundSchema: z.ZodType<
  HskCreateApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() => HskCreateApiRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type HskCreateApiRequest$Outbound = {
  serviceId: string;
  RequestBody: HskCreateApiRequestBody$Outbound;
};

/** @internal */
export const HskCreateApiRequest$outboundSchema: z.ZodType<
  HskCreateApiRequest$Outbound,
  z.ZodTypeDef,
  HskCreateApiRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() => HskCreateApiRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HskCreateApiRequest$ {
  /** @deprecated use `HskCreateApiRequest$inboundSchema` instead. */
  export const inboundSchema = HskCreateApiRequest$inboundSchema;
  /** @deprecated use `HskCreateApiRequest$outboundSchema` instead. */
  export const outboundSchema = HskCreateApiRequest$outboundSchema;
  /** @deprecated use `HskCreateApiRequest$Outbound` instead. */
  export type Outbound = HskCreateApiRequest$Outbound;
}

export function hskCreateApiRequestToJSON(
  hskCreateApiRequest: HskCreateApiRequest,
): string {
  return JSON.stringify(
    HskCreateApiRequest$outboundSchema.parse(hskCreateApiRequest),
  );
}

export function hskCreateApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<HskCreateApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HskCreateApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HskCreateApiRequest' from JSON`,
  );
}

/** @internal */
export const HskCreateApiAction$inboundSchema: z.ZodNativeEnum<
  typeof HskCreateApiAction
> = z.nativeEnum(HskCreateApiAction);

/** @internal */
export const HskCreateApiAction$outboundSchema: z.ZodNativeEnum<
  typeof HskCreateApiAction
> = HskCreateApiAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HskCreateApiAction$ {
  /** @deprecated use `HskCreateApiAction$inboundSchema` instead. */
  export const inboundSchema = HskCreateApiAction$inboundSchema;
  /** @deprecated use `HskCreateApiAction$outboundSchema` instead. */
  export const outboundSchema = HskCreateApiAction$outboundSchema;
}

/** @internal */
export const HskCreateApiResponse$inboundSchema: z.ZodType<
  HskCreateApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: HskCreateApiAction$inboundSchema.optional(),
  hsk: models.Hsk$inboundSchema.optional(),
});

/** @internal */
export type HskCreateApiResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  hsk?: models.Hsk$Outbound | undefined;
};

/** @internal */
export const HskCreateApiResponse$outboundSchema: z.ZodType<
  HskCreateApiResponse$Outbound,
  z.ZodTypeDef,
  HskCreateApiResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: HskCreateApiAction$outboundSchema.optional(),
  hsk: models.Hsk$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HskCreateApiResponse$ {
  /** @deprecated use `HskCreateApiResponse$inboundSchema` instead. */
  export const inboundSchema = HskCreateApiResponse$inboundSchema;
  /** @deprecated use `HskCreateApiResponse$outboundSchema` instead. */
  export const outboundSchema = HskCreateApiResponse$outboundSchema;
  /** @deprecated use `HskCreateApiResponse$Outbound` instead. */
  export type Outbound = HskCreateApiResponse$Outbound;
}

export function hskCreateApiResponseToJSON(
  hskCreateApiResponse: HskCreateApiResponse,
): string {
  return JSON.stringify(
    HskCreateApiResponse$outboundSchema.parse(hskCreateApiResponse),
  );
}

export function hskCreateApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<HskCreateApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HskCreateApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HskCreateApiResponse' from JSON`,
  );
}
