/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * An object containing schema data
 */
export type ClientAuthorizationUpdateApiRequestBody = {
  /**
   * The subject (= unique identifier) of the end-user who has granted authorization to the client
   *
   * @remarks
   * application.
   */
  subject: string;
  /**
   * An array of new scopes. Optional. If a non-null value is given, the new scopes are set to all
   *
   * @remarks
   * existing access tokens. If an API call is made using `"Content-Type: application/x-www-form-urlencoded"`,
   * scope names listed in this request parameter should be delimited by spaces (after form encoding,
   * spaces are converted to `+`).
   */
  scopes?: Array<string> | undefined;
};

export type ClientAuthorizationUpdateApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  /**
   * A client ID.
   *
   * @remarks
   */
  clientId: string;
  requestBody?: ClientAuthorizationUpdateApiRequestBody | undefined;
};

/**
 * An object containing schema data
 */
export type ClientAuthorizationUpdateApiResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

/** @internal */
export const ClientAuthorizationUpdateApiRequestBody$inboundSchema: z.ZodType<
  ClientAuthorizationUpdateApiRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  subject: z.string(),
  scopes: z.array(z.string()).optional(),
});

/** @internal */
export type ClientAuthorizationUpdateApiRequestBody$Outbound = {
  subject: string;
  scopes?: Array<string> | undefined;
};

/** @internal */
export const ClientAuthorizationUpdateApiRequestBody$outboundSchema: z.ZodType<
  ClientAuthorizationUpdateApiRequestBody$Outbound,
  z.ZodTypeDef,
  ClientAuthorizationUpdateApiRequestBody
> = z.object({
  subject: z.string(),
  scopes: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientAuthorizationUpdateApiRequestBody$ {
  /** @deprecated use `ClientAuthorizationUpdateApiRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    ClientAuthorizationUpdateApiRequestBody$inboundSchema;
  /** @deprecated use `ClientAuthorizationUpdateApiRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    ClientAuthorizationUpdateApiRequestBody$outboundSchema;
  /** @deprecated use `ClientAuthorizationUpdateApiRequestBody$Outbound` instead. */
  export type Outbound = ClientAuthorizationUpdateApiRequestBody$Outbound;
}

export function clientAuthorizationUpdateApiRequestBodyToJSON(
  clientAuthorizationUpdateApiRequestBody:
    ClientAuthorizationUpdateApiRequestBody,
): string {
  return JSON.stringify(
    ClientAuthorizationUpdateApiRequestBody$outboundSchema.parse(
      clientAuthorizationUpdateApiRequestBody,
    ),
  );
}

export function clientAuthorizationUpdateApiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  ClientAuthorizationUpdateApiRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ClientAuthorizationUpdateApiRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ClientAuthorizationUpdateApiRequestBody' from JSON`,
  );
}

/** @internal */
export const ClientAuthorizationUpdateApiRequest$inboundSchema: z.ZodType<
  ClientAuthorizationUpdateApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  clientId: z.string(),
  RequestBody: z.lazy(() =>
    ClientAuthorizationUpdateApiRequestBody$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type ClientAuthorizationUpdateApiRequest$Outbound = {
  serviceId: string;
  clientId: string;
  RequestBody?: ClientAuthorizationUpdateApiRequestBody$Outbound | undefined;
};

/** @internal */
export const ClientAuthorizationUpdateApiRequest$outboundSchema: z.ZodType<
  ClientAuthorizationUpdateApiRequest$Outbound,
  z.ZodTypeDef,
  ClientAuthorizationUpdateApiRequest
> = z.object({
  serviceId: z.string(),
  clientId: z.string(),
  requestBody: z.lazy(() =>
    ClientAuthorizationUpdateApiRequestBody$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientAuthorizationUpdateApiRequest$ {
  /** @deprecated use `ClientAuthorizationUpdateApiRequest$inboundSchema` instead. */
  export const inboundSchema =
    ClientAuthorizationUpdateApiRequest$inboundSchema;
  /** @deprecated use `ClientAuthorizationUpdateApiRequest$outboundSchema` instead. */
  export const outboundSchema =
    ClientAuthorizationUpdateApiRequest$outboundSchema;
  /** @deprecated use `ClientAuthorizationUpdateApiRequest$Outbound` instead. */
  export type Outbound = ClientAuthorizationUpdateApiRequest$Outbound;
}

export function clientAuthorizationUpdateApiRequestToJSON(
  clientAuthorizationUpdateApiRequest: ClientAuthorizationUpdateApiRequest,
): string {
  return JSON.stringify(
    ClientAuthorizationUpdateApiRequest$outboundSchema.parse(
      clientAuthorizationUpdateApiRequest,
    ),
  );
}

export function clientAuthorizationUpdateApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<ClientAuthorizationUpdateApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ClientAuthorizationUpdateApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientAuthorizationUpdateApiRequest' from JSON`,
  );
}

/** @internal */
export const ClientAuthorizationUpdateApiResponse$inboundSchema: z.ZodType<
  ClientAuthorizationUpdateApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
});

/** @internal */
export type ClientAuthorizationUpdateApiResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const ClientAuthorizationUpdateApiResponse$outboundSchema: z.ZodType<
  ClientAuthorizationUpdateApiResponse$Outbound,
  z.ZodTypeDef,
  ClientAuthorizationUpdateApiResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientAuthorizationUpdateApiResponse$ {
  /** @deprecated use `ClientAuthorizationUpdateApiResponse$inboundSchema` instead. */
  export const inboundSchema =
    ClientAuthorizationUpdateApiResponse$inboundSchema;
  /** @deprecated use `ClientAuthorizationUpdateApiResponse$outboundSchema` instead. */
  export const outboundSchema =
    ClientAuthorizationUpdateApiResponse$outboundSchema;
  /** @deprecated use `ClientAuthorizationUpdateApiResponse$Outbound` instead. */
  export type Outbound = ClientAuthorizationUpdateApiResponse$Outbound;
}

export function clientAuthorizationUpdateApiResponseToJSON(
  clientAuthorizationUpdateApiResponse: ClientAuthorizationUpdateApiResponse,
): string {
  return JSON.stringify(
    ClientAuthorizationUpdateApiResponse$outboundSchema.parse(
      clientAuthorizationUpdateApiResponse,
    ),
  );
}

export function clientAuthorizationUpdateApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<ClientAuthorizationUpdateApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ClientAuthorizationUpdateApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientAuthorizationUpdateApiResponse' from JSON`,
  );
}
