/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ClientSecretUpdateApiRequestBody = {
  /**
   * The new value of the client secret. Valid characters for a client secret are `A-Z`, `a-z`, `0-9`,
   *
   * @remarks
   * `-`, and `_`. The maximum length of a client secret is 86.
   */
  clientSecret: string;
};

export type ClientSecretUpdateApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  /**
   * The client ID or the client ID alias of a client.
   *
   * @remarks
   */
  clientIdentifier: string;
  requestBody: ClientSecretUpdateApiRequestBody;
};

/**
 * Successful operation
 */
export type ClientSecretUpdateApiResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The new client secret.
   *
   * @remarks
   */
  newClientSecret?: string | undefined;
  /**
   * The old client secret.
   *
   * @remarks
   */
  oldClientSecret?: string | undefined;
};

/** @internal */
export const ClientSecretUpdateApiRequestBody$inboundSchema: z.ZodType<
  ClientSecretUpdateApiRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientSecret: z.string(),
});

/** @internal */
export type ClientSecretUpdateApiRequestBody$Outbound = {
  clientSecret: string;
};

/** @internal */
export const ClientSecretUpdateApiRequestBody$outboundSchema: z.ZodType<
  ClientSecretUpdateApiRequestBody$Outbound,
  z.ZodTypeDef,
  ClientSecretUpdateApiRequestBody
> = z.object({
  clientSecret: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientSecretUpdateApiRequestBody$ {
  /** @deprecated use `ClientSecretUpdateApiRequestBody$inboundSchema` instead. */
  export const inboundSchema = ClientSecretUpdateApiRequestBody$inboundSchema;
  /** @deprecated use `ClientSecretUpdateApiRequestBody$outboundSchema` instead. */
  export const outboundSchema = ClientSecretUpdateApiRequestBody$outboundSchema;
  /** @deprecated use `ClientSecretUpdateApiRequestBody$Outbound` instead. */
  export type Outbound = ClientSecretUpdateApiRequestBody$Outbound;
}

export function clientSecretUpdateApiRequestBodyToJSON(
  clientSecretUpdateApiRequestBody: ClientSecretUpdateApiRequestBody,
): string {
  return JSON.stringify(
    ClientSecretUpdateApiRequestBody$outboundSchema.parse(
      clientSecretUpdateApiRequestBody,
    ),
  );
}

export function clientSecretUpdateApiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<ClientSecretUpdateApiRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientSecretUpdateApiRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientSecretUpdateApiRequestBody' from JSON`,
  );
}

/** @internal */
export const ClientSecretUpdateApiRequest$inboundSchema: z.ZodType<
  ClientSecretUpdateApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  clientIdentifier: z.string(),
  RequestBody: z.lazy(() => ClientSecretUpdateApiRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type ClientSecretUpdateApiRequest$Outbound = {
  serviceId: string;
  clientIdentifier: string;
  RequestBody: ClientSecretUpdateApiRequestBody$Outbound;
};

/** @internal */
export const ClientSecretUpdateApiRequest$outboundSchema: z.ZodType<
  ClientSecretUpdateApiRequest$Outbound,
  z.ZodTypeDef,
  ClientSecretUpdateApiRequest
> = z.object({
  serviceId: z.string(),
  clientIdentifier: z.string(),
  requestBody: z.lazy(() => ClientSecretUpdateApiRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientSecretUpdateApiRequest$ {
  /** @deprecated use `ClientSecretUpdateApiRequest$inboundSchema` instead. */
  export const inboundSchema = ClientSecretUpdateApiRequest$inboundSchema;
  /** @deprecated use `ClientSecretUpdateApiRequest$outboundSchema` instead. */
  export const outboundSchema = ClientSecretUpdateApiRequest$outboundSchema;
  /** @deprecated use `ClientSecretUpdateApiRequest$Outbound` instead. */
  export type Outbound = ClientSecretUpdateApiRequest$Outbound;
}

export function clientSecretUpdateApiRequestToJSON(
  clientSecretUpdateApiRequest: ClientSecretUpdateApiRequest,
): string {
  return JSON.stringify(
    ClientSecretUpdateApiRequest$outboundSchema.parse(
      clientSecretUpdateApiRequest,
    ),
  );
}

export function clientSecretUpdateApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<ClientSecretUpdateApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientSecretUpdateApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientSecretUpdateApiRequest' from JSON`,
  );
}

/** @internal */
export const ClientSecretUpdateApiResponse$inboundSchema: z.ZodType<
  ClientSecretUpdateApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  newClientSecret: z.string().optional(),
  oldClientSecret: z.string().optional(),
});

/** @internal */
export type ClientSecretUpdateApiResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  newClientSecret?: string | undefined;
  oldClientSecret?: string | undefined;
};

/** @internal */
export const ClientSecretUpdateApiResponse$outboundSchema: z.ZodType<
  ClientSecretUpdateApiResponse$Outbound,
  z.ZodTypeDef,
  ClientSecretUpdateApiResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  newClientSecret: z.string().optional(),
  oldClientSecret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientSecretUpdateApiResponse$ {
  /** @deprecated use `ClientSecretUpdateApiResponse$inboundSchema` instead. */
  export const inboundSchema = ClientSecretUpdateApiResponse$inboundSchema;
  /** @deprecated use `ClientSecretUpdateApiResponse$outboundSchema` instead. */
  export const outboundSchema = ClientSecretUpdateApiResponse$outboundSchema;
  /** @deprecated use `ClientSecretUpdateApiResponse$Outbound` instead. */
  export type Outbound = ClientSecretUpdateApiResponse$Outbound;
}

export function clientSecretUpdateApiResponseToJSON(
  clientSecretUpdateApiResponse: ClientSecretUpdateApiResponse,
): string {
  return JSON.stringify(
    ClientSecretUpdateApiResponse$outboundSchema.parse(
      clientSecretUpdateApiResponse,
    ),
  );
}

export function clientSecretUpdateApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<ClientSecretUpdateApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientSecretUpdateApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientSecretUpdateApiResponse' from JSON`,
  );
}
