/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * An object containing schema data
 */
export type PostUpdateTicketInformationRequestBody = {
  /**
   * The ticket.
   */
  ticket: string;
  /**
   * The information about the ticket.
   */
  info: string;
};

export type PostUpdateTicketInformationRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: PostUpdateTicketInformationRequestBody;
};

/**
 * The result of the /auth/authorization/ticket/info API call.
 */
export const PostUpdateTicketInformationAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Created: "CREATED",
  Unauthorized: "UNAUTHORIZED",
  Forbidden: "FORBIDDEN",
  Json: "JSON",
  Jwt: "JWT",
  Ok: "OK",
} as const;
/**
 * The result of the /auth/authorization/ticket/info API call.
 */
export type PostUpdateTicketInformationAction = ClosedEnum<
  typeof PostUpdateTicketInformationAction
>;

/**
 * An object containing schema data
 */
export type PostUpdateTicketInformationResponse = {
  /**
   * Information about the ticket.
   */
  info?: string | undefined;
  /**
   * The result of the /auth/authorization/ticket/info API call.
   */
  action?: PostUpdateTicketInformationAction | undefined;
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

/** @internal */
export const PostUpdateTicketInformationRequestBody$inboundSchema: z.ZodType<
  PostUpdateTicketInformationRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  ticket: z.string(),
  info: z.string(),
});

/** @internal */
export type PostUpdateTicketInformationRequestBody$Outbound = {
  ticket: string;
  info: string;
};

/** @internal */
export const PostUpdateTicketInformationRequestBody$outboundSchema: z.ZodType<
  PostUpdateTicketInformationRequestBody$Outbound,
  z.ZodTypeDef,
  PostUpdateTicketInformationRequestBody
> = z.object({
  ticket: z.string(),
  info: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUpdateTicketInformationRequestBody$ {
  /** @deprecated use `PostUpdateTicketInformationRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PostUpdateTicketInformationRequestBody$inboundSchema;
  /** @deprecated use `PostUpdateTicketInformationRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PostUpdateTicketInformationRequestBody$outboundSchema;
  /** @deprecated use `PostUpdateTicketInformationRequestBody$Outbound` instead. */
  export type Outbound = PostUpdateTicketInformationRequestBody$Outbound;
}

export function postUpdateTicketInformationRequestBodyToJSON(
  postUpdateTicketInformationRequestBody:
    PostUpdateTicketInformationRequestBody,
): string {
  return JSON.stringify(
    PostUpdateTicketInformationRequestBody$outboundSchema.parse(
      postUpdateTicketInformationRequestBody,
    ),
  );
}

export function postUpdateTicketInformationRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostUpdateTicketInformationRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostUpdateTicketInformationRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostUpdateTicketInformationRequestBody' from JSON`,
  );
}

/** @internal */
export const PostUpdateTicketInformationRequest$inboundSchema: z.ZodType<
  PostUpdateTicketInformationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() =>
    PostUpdateTicketInformationRequestBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PostUpdateTicketInformationRequest$Outbound = {
  serviceId: string;
  RequestBody: PostUpdateTicketInformationRequestBody$Outbound;
};

/** @internal */
export const PostUpdateTicketInformationRequest$outboundSchema: z.ZodType<
  PostUpdateTicketInformationRequest$Outbound,
  z.ZodTypeDef,
  PostUpdateTicketInformationRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() =>
    PostUpdateTicketInformationRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUpdateTicketInformationRequest$ {
  /** @deprecated use `PostUpdateTicketInformationRequest$inboundSchema` instead. */
  export const inboundSchema = PostUpdateTicketInformationRequest$inboundSchema;
  /** @deprecated use `PostUpdateTicketInformationRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostUpdateTicketInformationRequest$outboundSchema;
  /** @deprecated use `PostUpdateTicketInformationRequest$Outbound` instead. */
  export type Outbound = PostUpdateTicketInformationRequest$Outbound;
}

export function postUpdateTicketInformationRequestToJSON(
  postUpdateTicketInformationRequest: PostUpdateTicketInformationRequest,
): string {
  return JSON.stringify(
    PostUpdateTicketInformationRequest$outboundSchema.parse(
      postUpdateTicketInformationRequest,
    ),
  );
}

export function postUpdateTicketInformationRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostUpdateTicketInformationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostUpdateTicketInformationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostUpdateTicketInformationRequest' from JSON`,
  );
}

/** @internal */
export const PostUpdateTicketInformationAction$inboundSchema: z.ZodNativeEnum<
  typeof PostUpdateTicketInformationAction
> = z.nativeEnum(PostUpdateTicketInformationAction);

/** @internal */
export const PostUpdateTicketInformationAction$outboundSchema: z.ZodNativeEnum<
  typeof PostUpdateTicketInformationAction
> = PostUpdateTicketInformationAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUpdateTicketInformationAction$ {
  /** @deprecated use `PostUpdateTicketInformationAction$inboundSchema` instead. */
  export const inboundSchema = PostUpdateTicketInformationAction$inboundSchema;
  /** @deprecated use `PostUpdateTicketInformationAction$outboundSchema` instead. */
  export const outboundSchema =
    PostUpdateTicketInformationAction$outboundSchema;
}

/** @internal */
export const PostUpdateTicketInformationResponse$inboundSchema: z.ZodType<
  PostUpdateTicketInformationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  info: z.string().optional(),
  action: PostUpdateTicketInformationAction$inboundSchema.optional(),
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
});

/** @internal */
export type PostUpdateTicketInformationResponse$Outbound = {
  info?: string | undefined;
  action?: string | undefined;
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const PostUpdateTicketInformationResponse$outboundSchema: z.ZodType<
  PostUpdateTicketInformationResponse$Outbound,
  z.ZodTypeDef,
  PostUpdateTicketInformationResponse
> = z.object({
  info: z.string().optional(),
  action: PostUpdateTicketInformationAction$outboundSchema.optional(),
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUpdateTicketInformationResponse$ {
  /** @deprecated use `PostUpdateTicketInformationResponse$inboundSchema` instead. */
  export const inboundSchema =
    PostUpdateTicketInformationResponse$inboundSchema;
  /** @deprecated use `PostUpdateTicketInformationResponse$outboundSchema` instead. */
  export const outboundSchema =
    PostUpdateTicketInformationResponse$outboundSchema;
  /** @deprecated use `PostUpdateTicketInformationResponse$Outbound` instead. */
  export type Outbound = PostUpdateTicketInformationResponse$Outbound;
}

export function postUpdateTicketInformationResponseToJSON(
  postUpdateTicketInformationResponse: PostUpdateTicketInformationResponse,
): string {
  return JSON.stringify(
    PostUpdateTicketInformationResponse$outboundSchema.parse(
      postUpdateTicketInformationResponse,
    ),
  );
}

export function postUpdateTicketInformationResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostUpdateTicketInformationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostUpdateTicketInformationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostUpdateTicketInformationResponse' from JSON`,
  );
}
