/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type VciBatchParseApiRequestBody = {
  /**
   * The access token that came along with the credential request.
   */
  accessToken?: string | undefined;
  /**
   * The message body of the batch credential request.
   */
  requestContent?: string | undefined;
};

export type VciBatchParseApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: VciBatchParseApiRequestBody;
};

/**
 * The next action that the batch credential endpoint should take.
 */
export const VciBatchParseApiAction = {
  Ok: "OK",
  BadRequest: "BAD_REQUEST",
  Unauthorized: "UNAUTHORIZED",
  Forbidden: "FORBIDDEN",
  InternalServerError: "INTERNAL_SERVER_ERROR",
} as const;
/**
 * The next action that the batch credential endpoint should take.
 */
export type VciBatchParseApiAction = ClosedEnum<typeof VciBatchParseApiAction>;

export type VciBatchParseApiResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the batch credential endpoint should take.
   */
  action?: VciBatchParseApiAction | undefined;
  /**
   * The content of the response to the request sender.
   */
  responseContent?: string | undefined;
  /**
   * Information about the credential requests in the batch credential
   *
   * @remarks
   * request.
   */
  info?: Array<models.CredentialRequestInfo> | undefined;
};

/** @internal */
export const VciBatchParseApiRequestBody$inboundSchema: z.ZodType<
  VciBatchParseApiRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessToken: z.string().optional(),
  requestContent: z.string().optional(),
});

/** @internal */
export type VciBatchParseApiRequestBody$Outbound = {
  accessToken?: string | undefined;
  requestContent?: string | undefined;
};

/** @internal */
export const VciBatchParseApiRequestBody$outboundSchema: z.ZodType<
  VciBatchParseApiRequestBody$Outbound,
  z.ZodTypeDef,
  VciBatchParseApiRequestBody
> = z.object({
  accessToken: z.string().optional(),
  requestContent: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciBatchParseApiRequestBody$ {
  /** @deprecated use `VciBatchParseApiRequestBody$inboundSchema` instead. */
  export const inboundSchema = VciBatchParseApiRequestBody$inboundSchema;
  /** @deprecated use `VciBatchParseApiRequestBody$outboundSchema` instead. */
  export const outboundSchema = VciBatchParseApiRequestBody$outboundSchema;
  /** @deprecated use `VciBatchParseApiRequestBody$Outbound` instead. */
  export type Outbound = VciBatchParseApiRequestBody$Outbound;
}

export function vciBatchParseApiRequestBodyToJSON(
  vciBatchParseApiRequestBody: VciBatchParseApiRequestBody,
): string {
  return JSON.stringify(
    VciBatchParseApiRequestBody$outboundSchema.parse(
      vciBatchParseApiRequestBody,
    ),
  );
}

export function vciBatchParseApiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<VciBatchParseApiRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciBatchParseApiRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciBatchParseApiRequestBody' from JSON`,
  );
}

/** @internal */
export const VciBatchParseApiRequest$inboundSchema: z.ZodType<
  VciBatchParseApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() => VciBatchParseApiRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type VciBatchParseApiRequest$Outbound = {
  serviceId: string;
  RequestBody: VciBatchParseApiRequestBody$Outbound;
};

/** @internal */
export const VciBatchParseApiRequest$outboundSchema: z.ZodType<
  VciBatchParseApiRequest$Outbound,
  z.ZodTypeDef,
  VciBatchParseApiRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() => VciBatchParseApiRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciBatchParseApiRequest$ {
  /** @deprecated use `VciBatchParseApiRequest$inboundSchema` instead. */
  export const inboundSchema = VciBatchParseApiRequest$inboundSchema;
  /** @deprecated use `VciBatchParseApiRequest$outboundSchema` instead. */
  export const outboundSchema = VciBatchParseApiRequest$outboundSchema;
  /** @deprecated use `VciBatchParseApiRequest$Outbound` instead. */
  export type Outbound = VciBatchParseApiRequest$Outbound;
}

export function vciBatchParseApiRequestToJSON(
  vciBatchParseApiRequest: VciBatchParseApiRequest,
): string {
  return JSON.stringify(
    VciBatchParseApiRequest$outboundSchema.parse(vciBatchParseApiRequest),
  );
}

export function vciBatchParseApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<VciBatchParseApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciBatchParseApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciBatchParseApiRequest' from JSON`,
  );
}

/** @internal */
export const VciBatchParseApiAction$inboundSchema: z.ZodNativeEnum<
  typeof VciBatchParseApiAction
> = z.nativeEnum(VciBatchParseApiAction);

/** @internal */
export const VciBatchParseApiAction$outboundSchema: z.ZodNativeEnum<
  typeof VciBatchParseApiAction
> = VciBatchParseApiAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciBatchParseApiAction$ {
  /** @deprecated use `VciBatchParseApiAction$inboundSchema` instead. */
  export const inboundSchema = VciBatchParseApiAction$inboundSchema;
  /** @deprecated use `VciBatchParseApiAction$outboundSchema` instead. */
  export const outboundSchema = VciBatchParseApiAction$outboundSchema;
}

/** @internal */
export const VciBatchParseApiResponse$inboundSchema: z.ZodType<
  VciBatchParseApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciBatchParseApiAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
  info: z.array(models.CredentialRequestInfo$inboundSchema).optional(),
});

/** @internal */
export type VciBatchParseApiResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  info?: Array<models.CredentialRequestInfo$Outbound> | undefined;
};

/** @internal */
export const VciBatchParseApiResponse$outboundSchema: z.ZodType<
  VciBatchParseApiResponse$Outbound,
  z.ZodTypeDef,
  VciBatchParseApiResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciBatchParseApiAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
  info: z.array(models.CredentialRequestInfo$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciBatchParseApiResponse$ {
  /** @deprecated use `VciBatchParseApiResponse$inboundSchema` instead. */
  export const inboundSchema = VciBatchParseApiResponse$inboundSchema;
  /** @deprecated use `VciBatchParseApiResponse$outboundSchema` instead. */
  export const outboundSchema = VciBatchParseApiResponse$outboundSchema;
  /** @deprecated use `VciBatchParseApiResponse$Outbound` instead. */
  export type Outbound = VciBatchParseApiResponse$Outbound;
}

export function vciBatchParseApiResponseToJSON(
  vciBatchParseApiResponse: VciBatchParseApiResponse,
): string {
  return JSON.stringify(
    VciBatchParseApiResponse$outboundSchema.parse(vciBatchParseApiResponse),
  );
}

export function vciBatchParseApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<VciBatchParseApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciBatchParseApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciBatchParseApiResponse' from JSON`,
  );
}
