/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The reason of the failure of the backchannel authentication request. This request parameter is
 *
 * @remarks
 * not mandatory but optional. However, giving this parameter is recommended. If omitted, `SERVER_ERROR`
 * is used as a reason.
 */
export const BackchannelAuthenticationFailApiReason = {
  AccessDenied: "ACCESS_DENIED",
  ExpiredLoginHintToken: "EXPIRED_LOGIN_HINT_TOKEN",
  InvalidBindingMessage: "INVALID_BINDING_MESSAGE",
  InvalidTarget: "INVALID_TARGET",
  InvalidUserCode: "INVALID_USER_CODE",
  MissingUserCode: "MISSING_USER_CODE",
  ServerError: "SERVER_ERROR",
  UnauthorizedClient: "UNAUTHORIZED_CLIENT",
  UnknownUserId: "UNKNOWN_USER_ID",
} as const;
/**
 * The reason of the failure of the backchannel authentication request. This request parameter is
 *
 * @remarks
 * not mandatory but optional. However, giving this parameter is recommended. If omitted, `SERVER_ERROR`
 * is used as a reason.
 */
export type BackchannelAuthenticationFailApiReason = ClosedEnum<
  typeof BackchannelAuthenticationFailApiReason
>;

export type BackchannelAuthenticationFailApiRequestBody = {
  /**
   * The ticket which should be deleted on a call of Authlete's `/backchannel/authentication/fail` API.
   *
   * @remarks
   * This request parameter is not mandatory but optional. If this request parameter is given and the
   * ticket belongs to the service, the specified ticket is deleted from the database. Giving this
   * parameter is recommended to clean up the storage area for the service.
   */
  ticket: string;
  /**
   * The reason of the failure of the backchannel authentication request. This request parameter is
   *
   * @remarks
   * not mandatory but optional. However, giving this parameter is recommended. If omitted, `SERVER_ERROR`
   * is used as a reason.
   */
  reason: BackchannelAuthenticationFailApiReason;
  /**
   * The description of the error. This corresponds to the `error_description` property in the response
   *
   * @remarks
   * to the client.
   */
  errorDescription?: string | undefined;
  /**
   * The URI of a document which describes the error in detail. If this optional request parameter
   *
   * @remarks
   * is given, its value is used as the value of the `error_uri` property.
   */
  errorUri?: string | undefined;
};

export type BackchannelAuthenticationFailApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: BackchannelAuthenticationFailApiRequestBody;
};

/**
 * The next action that the authorization server implementation should take.
 */
export const BackchannelAuthenticationFailApiAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Forbidden: "FORBIDDEN",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type BackchannelAuthenticationFailApiAction = ClosedEnum<
  typeof BackchannelAuthenticationFailApiAction
>;

/**
 * Successful operation
 */
export type BackchannelAuthenticationFailApiResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: BackchannelAuthenticationFailApiAction | undefined;
  /**
   * The content that the authorization server implementation is to return to the client
   *
   * @remarks
   * application. Its format varies depending on the value of `action` parameter.
   */
  responseContent?: string | undefined;
};

/** @internal */
export const BackchannelAuthenticationFailApiReason$inboundSchema:
  z.ZodNativeEnum<typeof BackchannelAuthenticationFailApiReason> = z.nativeEnum(
    BackchannelAuthenticationFailApiReason,
  );

/** @internal */
export const BackchannelAuthenticationFailApiReason$outboundSchema:
  z.ZodNativeEnum<typeof BackchannelAuthenticationFailApiReason> =
    BackchannelAuthenticationFailApiReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationFailApiReason$ {
  /** @deprecated use `BackchannelAuthenticationFailApiReason$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationFailApiReason$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationFailApiReason$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationFailApiReason$outboundSchema;
}

/** @internal */
export const BackchannelAuthenticationFailApiRequestBody$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationFailApiRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    ticket: z.string(),
    reason: BackchannelAuthenticationFailApiReason$inboundSchema,
    errorDescription: z.string().optional(),
    errorUri: z.string().optional(),
  });

/** @internal */
export type BackchannelAuthenticationFailApiRequestBody$Outbound = {
  ticket: string;
  reason: string;
  errorDescription?: string | undefined;
  errorUri?: string | undefined;
};

/** @internal */
export const BackchannelAuthenticationFailApiRequestBody$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationFailApiRequestBody$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationFailApiRequestBody
  > = z.object({
    ticket: z.string(),
    reason: BackchannelAuthenticationFailApiReason$outboundSchema,
    errorDescription: z.string().optional(),
    errorUri: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationFailApiRequestBody$ {
  /** @deprecated use `BackchannelAuthenticationFailApiRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationFailApiRequestBody$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationFailApiRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationFailApiRequestBody$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationFailApiRequestBody$Outbound` instead. */
  export type Outbound = BackchannelAuthenticationFailApiRequestBody$Outbound;
}

export function backchannelAuthenticationFailApiRequestBodyToJSON(
  backchannelAuthenticationFailApiRequestBody:
    BackchannelAuthenticationFailApiRequestBody,
): string {
  return JSON.stringify(
    BackchannelAuthenticationFailApiRequestBody$outboundSchema.parse(
      backchannelAuthenticationFailApiRequestBody,
    ),
  );
}

export function backchannelAuthenticationFailApiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  BackchannelAuthenticationFailApiRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationFailApiRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BackchannelAuthenticationFailApiRequestBody' from JSON`,
  );
}

/** @internal */
export const BackchannelAuthenticationFailApiRequest$inboundSchema: z.ZodType<
  BackchannelAuthenticationFailApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() =>
    BackchannelAuthenticationFailApiRequestBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type BackchannelAuthenticationFailApiRequest$Outbound = {
  serviceId: string;
  RequestBody: BackchannelAuthenticationFailApiRequestBody$Outbound;
};

/** @internal */
export const BackchannelAuthenticationFailApiRequest$outboundSchema: z.ZodType<
  BackchannelAuthenticationFailApiRequest$Outbound,
  z.ZodTypeDef,
  BackchannelAuthenticationFailApiRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() =>
    BackchannelAuthenticationFailApiRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationFailApiRequest$ {
  /** @deprecated use `BackchannelAuthenticationFailApiRequest$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationFailApiRequest$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationFailApiRequest$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationFailApiRequest$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationFailApiRequest$Outbound` instead. */
  export type Outbound = BackchannelAuthenticationFailApiRequest$Outbound;
}

export function backchannelAuthenticationFailApiRequestToJSON(
  backchannelAuthenticationFailApiRequest:
    BackchannelAuthenticationFailApiRequest,
): string {
  return JSON.stringify(
    BackchannelAuthenticationFailApiRequest$outboundSchema.parse(
      backchannelAuthenticationFailApiRequest,
    ),
  );
}

export function backchannelAuthenticationFailApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  BackchannelAuthenticationFailApiRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationFailApiRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BackchannelAuthenticationFailApiRequest' from JSON`,
  );
}

/** @internal */
export const BackchannelAuthenticationFailApiAction$inboundSchema:
  z.ZodNativeEnum<typeof BackchannelAuthenticationFailApiAction> = z.nativeEnum(
    BackchannelAuthenticationFailApiAction,
  );

/** @internal */
export const BackchannelAuthenticationFailApiAction$outboundSchema:
  z.ZodNativeEnum<typeof BackchannelAuthenticationFailApiAction> =
    BackchannelAuthenticationFailApiAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationFailApiAction$ {
  /** @deprecated use `BackchannelAuthenticationFailApiAction$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationFailApiAction$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationFailApiAction$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationFailApiAction$outboundSchema;
}

/** @internal */
export const BackchannelAuthenticationFailApiResponse$inboundSchema: z.ZodType<
  BackchannelAuthenticationFailApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: BackchannelAuthenticationFailApiAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
});

/** @internal */
export type BackchannelAuthenticationFailApiResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
};

/** @internal */
export const BackchannelAuthenticationFailApiResponse$outboundSchema: z.ZodType<
  BackchannelAuthenticationFailApiResponse$Outbound,
  z.ZodTypeDef,
  BackchannelAuthenticationFailApiResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: BackchannelAuthenticationFailApiAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationFailApiResponse$ {
  /** @deprecated use `BackchannelAuthenticationFailApiResponse$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationFailApiResponse$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationFailApiResponse$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationFailApiResponse$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationFailApiResponse$Outbound` instead. */
  export type Outbound = BackchannelAuthenticationFailApiResponse$Outbound;
}

export function backchannelAuthenticationFailApiResponseToJSON(
  backchannelAuthenticationFailApiResponse:
    BackchannelAuthenticationFailApiResponse,
): string {
  return JSON.stringify(
    BackchannelAuthenticationFailApiResponse$outboundSchema.parse(
      backchannelAuthenticationFailApiResponse,
    ),
  );
}

export function backchannelAuthenticationFailApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  BackchannelAuthenticationFailApiResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationFailApiResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BackchannelAuthenticationFailApiResponse' from JSON`,
  );
}
