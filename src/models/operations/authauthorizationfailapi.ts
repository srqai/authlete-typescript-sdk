/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The reason of the failure of the authorization request.
 *
 * @remarks
 * For more details, see [NO_INTERACTION] in the description of `/auth/authorization` API.
 */
export const AuthAuthorizationFailApiReason = {
  Unknown: "UNKNOWN",
  NotLoggedIn: "NOT_LOGGED_IN",
  MaxAgeNotSupported: "MAX_AGE_NOT_SUPPORTED",
  ExceedsMaxAge: "EXCEEDS_MAX_AGE",
  DifferentSubject: "DIFFERENT_SUBJECT",
  AcrNotSatisfied: "ACR_NOT_SATISFIED",
  Denied: "DENIED",
  ServerError: "SERVER_ERROR",
  NotAuthenticated: "NOT_AUTHENTICATED",
  AccountSelectionRequired: "ACCOUNT_SELECTION_REQUIRED",
  ConsentRequired: "CONSENT_REQUIRED",
  InteractionRequired: "INTERACTION_REQUIRED",
  InvalidTarget: "INVALID_TARGET",
} as const;
/**
 * The reason of the failure of the authorization request.
 *
 * @remarks
 * For more details, see [NO_INTERACTION] in the description of `/auth/authorization` API.
 */
export type AuthAuthorizationFailApiReason = ClosedEnum<
  typeof AuthAuthorizationFailApiReason
>;

export type AuthAuthorizationFailApiRequestBody = {
  /**
   * The ticket issued from Authlete `/auth/authorization` API.
   *
   * @remarks
   */
  ticket: string;
  /**
   * The reason of the failure of the authorization request.
   *
   * @remarks
   * For more details, see [NO_INTERACTION] in the description of `/auth/authorization` API.
   */
  reason: AuthAuthorizationFailApiReason;
  /**
   * The custom description about the authorization failure.
   *
   * @remarks
   */
  description?: string | undefined;
};

export type AuthAuthorizationFailApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: AuthAuthorizationFailApiRequestBody;
};

/**
 * The next action that the authorization server implementation should take.
 */
export const AuthAuthorizationFailApiAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Location: "LOCATION",
  Form: "FORM",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type AuthAuthorizationFailApiAction = ClosedEnum<
  typeof AuthAuthorizationFailApiAction
>;

/**
 * Successful operation
 */
export type AuthAuthorizationFailApiResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: AuthAuthorizationFailApiAction | undefined;
  /**
   * The content that the authorization server implementation is to return to the client application.
   *
   * @remarks
   * Its format varies depending on the value of `action` parameter.
   */
  responseContent?: string | undefined;
};

/** @internal */
export const AuthAuthorizationFailApiReason$inboundSchema: z.ZodNativeEnum<
  typeof AuthAuthorizationFailApiReason
> = z.nativeEnum(AuthAuthorizationFailApiReason);

/** @internal */
export const AuthAuthorizationFailApiReason$outboundSchema: z.ZodNativeEnum<
  typeof AuthAuthorizationFailApiReason
> = AuthAuthorizationFailApiReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationFailApiReason$ {
  /** @deprecated use `AuthAuthorizationFailApiReason$inboundSchema` instead. */
  export const inboundSchema = AuthAuthorizationFailApiReason$inboundSchema;
  /** @deprecated use `AuthAuthorizationFailApiReason$outboundSchema` instead. */
  export const outboundSchema = AuthAuthorizationFailApiReason$outboundSchema;
}

/** @internal */
export const AuthAuthorizationFailApiRequestBody$inboundSchema: z.ZodType<
  AuthAuthorizationFailApiRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  ticket: z.string(),
  reason: AuthAuthorizationFailApiReason$inboundSchema,
  description: z.string().optional(),
});

/** @internal */
export type AuthAuthorizationFailApiRequestBody$Outbound = {
  ticket: string;
  reason: string;
  description?: string | undefined;
};

/** @internal */
export const AuthAuthorizationFailApiRequestBody$outboundSchema: z.ZodType<
  AuthAuthorizationFailApiRequestBody$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationFailApiRequestBody
> = z.object({
  ticket: z.string(),
  reason: AuthAuthorizationFailApiReason$outboundSchema,
  description: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationFailApiRequestBody$ {
  /** @deprecated use `AuthAuthorizationFailApiRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationFailApiRequestBody$inboundSchema;
  /** @deprecated use `AuthAuthorizationFailApiRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationFailApiRequestBody$outboundSchema;
  /** @deprecated use `AuthAuthorizationFailApiRequestBody$Outbound` instead. */
  export type Outbound = AuthAuthorizationFailApiRequestBody$Outbound;
}

export function authAuthorizationFailApiRequestBodyToJSON(
  authAuthorizationFailApiRequestBody: AuthAuthorizationFailApiRequestBody,
): string {
  return JSON.stringify(
    AuthAuthorizationFailApiRequestBody$outboundSchema.parse(
      authAuthorizationFailApiRequestBody,
    ),
  );
}

export function authAuthorizationFailApiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<AuthAuthorizationFailApiRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AuthAuthorizationFailApiRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthAuthorizationFailApiRequestBody' from JSON`,
  );
}

/** @internal */
export const AuthAuthorizationFailApiRequest$inboundSchema: z.ZodType<
  AuthAuthorizationFailApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() => AuthAuthorizationFailApiRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type AuthAuthorizationFailApiRequest$Outbound = {
  serviceId: string;
  RequestBody: AuthAuthorizationFailApiRequestBody$Outbound;
};

/** @internal */
export const AuthAuthorizationFailApiRequest$outboundSchema: z.ZodType<
  AuthAuthorizationFailApiRequest$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationFailApiRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() => AuthAuthorizationFailApiRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationFailApiRequest$ {
  /** @deprecated use `AuthAuthorizationFailApiRequest$inboundSchema` instead. */
  export const inboundSchema = AuthAuthorizationFailApiRequest$inboundSchema;
  /** @deprecated use `AuthAuthorizationFailApiRequest$outboundSchema` instead. */
  export const outboundSchema = AuthAuthorizationFailApiRequest$outboundSchema;
  /** @deprecated use `AuthAuthorizationFailApiRequest$Outbound` instead. */
  export type Outbound = AuthAuthorizationFailApiRequest$Outbound;
}

export function authAuthorizationFailApiRequestToJSON(
  authAuthorizationFailApiRequest: AuthAuthorizationFailApiRequest,
): string {
  return JSON.stringify(
    AuthAuthorizationFailApiRequest$outboundSchema.parse(
      authAuthorizationFailApiRequest,
    ),
  );
}

export function authAuthorizationFailApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<AuthAuthorizationFailApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthAuthorizationFailApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthAuthorizationFailApiRequest' from JSON`,
  );
}

/** @internal */
export const AuthAuthorizationFailApiAction$inboundSchema: z.ZodNativeEnum<
  typeof AuthAuthorizationFailApiAction
> = z.nativeEnum(AuthAuthorizationFailApiAction);

/** @internal */
export const AuthAuthorizationFailApiAction$outboundSchema: z.ZodNativeEnum<
  typeof AuthAuthorizationFailApiAction
> = AuthAuthorizationFailApiAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationFailApiAction$ {
  /** @deprecated use `AuthAuthorizationFailApiAction$inboundSchema` instead. */
  export const inboundSchema = AuthAuthorizationFailApiAction$inboundSchema;
  /** @deprecated use `AuthAuthorizationFailApiAction$outboundSchema` instead. */
  export const outboundSchema = AuthAuthorizationFailApiAction$outboundSchema;
}

/** @internal */
export const AuthAuthorizationFailApiResponse$inboundSchema: z.ZodType<
  AuthAuthorizationFailApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthAuthorizationFailApiAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
});

/** @internal */
export type AuthAuthorizationFailApiResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
};

/** @internal */
export const AuthAuthorizationFailApiResponse$outboundSchema: z.ZodType<
  AuthAuthorizationFailApiResponse$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationFailApiResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthAuthorizationFailApiAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationFailApiResponse$ {
  /** @deprecated use `AuthAuthorizationFailApiResponse$inboundSchema` instead. */
  export const inboundSchema = AuthAuthorizationFailApiResponse$inboundSchema;
  /** @deprecated use `AuthAuthorizationFailApiResponse$outboundSchema` instead. */
  export const outboundSchema = AuthAuthorizationFailApiResponse$outboundSchema;
  /** @deprecated use `AuthAuthorizationFailApiResponse$Outbound` instead. */
  export type Outbound = AuthAuthorizationFailApiResponse$Outbound;
}

export function authAuthorizationFailApiResponseToJSON(
  authAuthorizationFailApiResponse: AuthAuthorizationFailApiResponse,
): string {
  return JSON.stringify(
    AuthAuthorizationFailApiResponse$outboundSchema.parse(
      authAuthorizationFailApiResponse,
    ),
  );
}

export function authAuthorizationFailApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<AuthAuthorizationFailApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthAuthorizationFailApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthAuthorizationFailApiResponse' from JSON`,
  );
}
