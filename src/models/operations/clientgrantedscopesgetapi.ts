/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ClientGrantedScopesGetApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  /**
   * A client ID.
   *
   * @remarks
   */
  clientId: string;
  subject: string;
};

export type ClientGrantedScopesGetApiResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  serviceApiKey?: number | undefined;
  /**
   * Get the client ID.
   */
  clientId?: number | undefined;
  /**
   * Get the subject (= unique identifier) of the user
   *
   * @remarks
   * who has granted authorization to the client.
   */
  subject?: string | undefined;
  /**
   * Get the scopes granted to the client application by the last
   *
   * @remarks
   * authorization process by the user (who is identified by the
   * subject).
   */
  latestGrantedScopes?: Array<string> | undefined;
  /**
   * Get the scopes granted to the client application by all the
   *
   * @remarks
   * past authorization processes. Note that revoked scopes are
   * not included.
   */
  mergedGrantedScopes?: Array<string> | undefined;
  /**
   * Get the timestamp in milliseconds since Unix epoch
   *
   * @remarks
   * at which this record was modified.
   */
  modifiedAt?: number | undefined;
};

/** @internal */
export const ClientGrantedScopesGetApiRequest$inboundSchema: z.ZodType<
  ClientGrantedScopesGetApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  clientId: z.string(),
  subject: z.string(),
});

/** @internal */
export type ClientGrantedScopesGetApiRequest$Outbound = {
  serviceId: string;
  clientId: string;
  subject: string;
};

/** @internal */
export const ClientGrantedScopesGetApiRequest$outboundSchema: z.ZodType<
  ClientGrantedScopesGetApiRequest$Outbound,
  z.ZodTypeDef,
  ClientGrantedScopesGetApiRequest
> = z.object({
  serviceId: z.string(),
  clientId: z.string(),
  subject: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGrantedScopesGetApiRequest$ {
  /** @deprecated use `ClientGrantedScopesGetApiRequest$inboundSchema` instead. */
  export const inboundSchema = ClientGrantedScopesGetApiRequest$inboundSchema;
  /** @deprecated use `ClientGrantedScopesGetApiRequest$outboundSchema` instead. */
  export const outboundSchema = ClientGrantedScopesGetApiRequest$outboundSchema;
  /** @deprecated use `ClientGrantedScopesGetApiRequest$Outbound` instead. */
  export type Outbound = ClientGrantedScopesGetApiRequest$Outbound;
}

export function clientGrantedScopesGetApiRequestToJSON(
  clientGrantedScopesGetApiRequest: ClientGrantedScopesGetApiRequest,
): string {
  return JSON.stringify(
    ClientGrantedScopesGetApiRequest$outboundSchema.parse(
      clientGrantedScopesGetApiRequest,
    ),
  );
}

export function clientGrantedScopesGetApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<ClientGrantedScopesGetApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientGrantedScopesGetApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientGrantedScopesGetApiRequest' from JSON`,
  );
}

/** @internal */
export const ClientGrantedScopesGetApiResponse$inboundSchema: z.ZodType<
  ClientGrantedScopesGetApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  serviceApiKey: z.number().int().optional(),
  clientId: z.number().int().optional(),
  subject: z.string().optional(),
  latestGrantedScopes: z.array(z.string()).optional(),
  mergedGrantedScopes: z.array(z.string()).optional(),
  modifiedAt: z.number().int().optional(),
});

/** @internal */
export type ClientGrantedScopesGetApiResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  serviceApiKey?: number | undefined;
  clientId?: number | undefined;
  subject?: string | undefined;
  latestGrantedScopes?: Array<string> | undefined;
  mergedGrantedScopes?: Array<string> | undefined;
  modifiedAt?: number | undefined;
};

/** @internal */
export const ClientGrantedScopesGetApiResponse$outboundSchema: z.ZodType<
  ClientGrantedScopesGetApiResponse$Outbound,
  z.ZodTypeDef,
  ClientGrantedScopesGetApiResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  serviceApiKey: z.number().int().optional(),
  clientId: z.number().int().optional(),
  subject: z.string().optional(),
  latestGrantedScopes: z.array(z.string()).optional(),
  mergedGrantedScopes: z.array(z.string()).optional(),
  modifiedAt: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGrantedScopesGetApiResponse$ {
  /** @deprecated use `ClientGrantedScopesGetApiResponse$inboundSchema` instead. */
  export const inboundSchema = ClientGrantedScopesGetApiResponse$inboundSchema;
  /** @deprecated use `ClientGrantedScopesGetApiResponse$outboundSchema` instead. */
  export const outboundSchema =
    ClientGrantedScopesGetApiResponse$outboundSchema;
  /** @deprecated use `ClientGrantedScopesGetApiResponse$Outbound` instead. */
  export type Outbound = ClientGrantedScopesGetApiResponse$Outbound;
}

export function clientGrantedScopesGetApiResponseToJSON(
  clientGrantedScopesGetApiResponse: ClientGrantedScopesGetApiResponse,
): string {
  return JSON.stringify(
    ClientGrantedScopesGetApiResponse$outboundSchema.parse(
      clientGrantedScopesGetApiResponse,
    ),
  );
}

export function clientGrantedScopesGetApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<ClientGrantedScopesGetApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientGrantedScopesGetApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientGrantedScopesGetApiResponse' from JSON`,
  );
}
