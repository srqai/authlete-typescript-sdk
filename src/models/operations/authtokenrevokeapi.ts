/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * An object containing schema data
 */
export type AuthTokenRevokeApiRequestBody = {
  /**
   * The identifier of an access token to revoke
   *
   * @remarks
   *
   * The hash of an access token is recognized as an identifier as well as the access token itself.
   */
  accessTokenIdentifier?: string | undefined;
  /**
   * The identifier of a refresh token to revoke.
   *
   * @remarks
   *
   * The hash of a refresh token is recognized as an identifier as well as the refresh token itself.
   */
  refreshTokenIdentifier?: string | undefined;
  /**
   * The client ID of the access token to be revoked.
   *
   * @remarks
   *
   * Both the numeric client ID and the alias are recognized as an identifier
   * of a client.
   */
  clientIdentifier?: string | undefined;
  /**
   * The subject of a resource owner.
   *
   * @remarks
   */
  subject?: string | undefined;
};

export type AuthTokenRevokeApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: AuthTokenRevokeApiRequestBody;
};

/**
 * An object containing schema data
 */
export type AuthTokenRevokeApiResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The number of tokens revoked
   */
  count?: number | undefined;
};

/** @internal */
export const AuthTokenRevokeApiRequestBody$inboundSchema: z.ZodType<
  AuthTokenRevokeApiRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessTokenIdentifier: z.string().optional(),
  refreshTokenIdentifier: z.string().optional(),
  clientIdentifier: z.string().optional(),
  subject: z.string().optional(),
});

/** @internal */
export type AuthTokenRevokeApiRequestBody$Outbound = {
  accessTokenIdentifier?: string | undefined;
  refreshTokenIdentifier?: string | undefined;
  clientIdentifier?: string | undefined;
  subject?: string | undefined;
};

/** @internal */
export const AuthTokenRevokeApiRequestBody$outboundSchema: z.ZodType<
  AuthTokenRevokeApiRequestBody$Outbound,
  z.ZodTypeDef,
  AuthTokenRevokeApiRequestBody
> = z.object({
  accessTokenIdentifier: z.string().optional(),
  refreshTokenIdentifier: z.string().optional(),
  clientIdentifier: z.string().optional(),
  subject: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenRevokeApiRequestBody$ {
  /** @deprecated use `AuthTokenRevokeApiRequestBody$inboundSchema` instead. */
  export const inboundSchema = AuthTokenRevokeApiRequestBody$inboundSchema;
  /** @deprecated use `AuthTokenRevokeApiRequestBody$outboundSchema` instead. */
  export const outboundSchema = AuthTokenRevokeApiRequestBody$outboundSchema;
  /** @deprecated use `AuthTokenRevokeApiRequestBody$Outbound` instead. */
  export type Outbound = AuthTokenRevokeApiRequestBody$Outbound;
}

export function authTokenRevokeApiRequestBodyToJSON(
  authTokenRevokeApiRequestBody: AuthTokenRevokeApiRequestBody,
): string {
  return JSON.stringify(
    AuthTokenRevokeApiRequestBody$outboundSchema.parse(
      authTokenRevokeApiRequestBody,
    ),
  );
}

export function authTokenRevokeApiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenRevokeApiRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenRevokeApiRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenRevokeApiRequestBody' from JSON`,
  );
}

/** @internal */
export const AuthTokenRevokeApiRequest$inboundSchema: z.ZodType<
  AuthTokenRevokeApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() => AuthTokenRevokeApiRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type AuthTokenRevokeApiRequest$Outbound = {
  serviceId: string;
  RequestBody: AuthTokenRevokeApiRequestBody$Outbound;
};

/** @internal */
export const AuthTokenRevokeApiRequest$outboundSchema: z.ZodType<
  AuthTokenRevokeApiRequest$Outbound,
  z.ZodTypeDef,
  AuthTokenRevokeApiRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() => AuthTokenRevokeApiRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenRevokeApiRequest$ {
  /** @deprecated use `AuthTokenRevokeApiRequest$inboundSchema` instead. */
  export const inboundSchema = AuthTokenRevokeApiRequest$inboundSchema;
  /** @deprecated use `AuthTokenRevokeApiRequest$outboundSchema` instead. */
  export const outboundSchema = AuthTokenRevokeApiRequest$outboundSchema;
  /** @deprecated use `AuthTokenRevokeApiRequest$Outbound` instead. */
  export type Outbound = AuthTokenRevokeApiRequest$Outbound;
}

export function authTokenRevokeApiRequestToJSON(
  authTokenRevokeApiRequest: AuthTokenRevokeApiRequest,
): string {
  return JSON.stringify(
    AuthTokenRevokeApiRequest$outboundSchema.parse(authTokenRevokeApiRequest),
  );
}

export function authTokenRevokeApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenRevokeApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenRevokeApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenRevokeApiRequest' from JSON`,
  );
}

/** @internal */
export const AuthTokenRevokeApiResponse$inboundSchema: z.ZodType<
  AuthTokenRevokeApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  count: z.number().int().optional(),
});

/** @internal */
export type AuthTokenRevokeApiResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  count?: number | undefined;
};

/** @internal */
export const AuthTokenRevokeApiResponse$outboundSchema: z.ZodType<
  AuthTokenRevokeApiResponse$Outbound,
  z.ZodTypeDef,
  AuthTokenRevokeApiResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  count: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenRevokeApiResponse$ {
  /** @deprecated use `AuthTokenRevokeApiResponse$inboundSchema` instead. */
  export const inboundSchema = AuthTokenRevokeApiResponse$inboundSchema;
  /** @deprecated use `AuthTokenRevokeApiResponse$outboundSchema` instead. */
  export const outboundSchema = AuthTokenRevokeApiResponse$outboundSchema;
  /** @deprecated use `AuthTokenRevokeApiResponse$Outbound` instead. */
  export type Outbound = AuthTokenRevokeApiResponse$Outbound;
}

export function authTokenRevokeApiResponseToJSON(
  authTokenRevokeApiResponse: AuthTokenRevokeApiResponse,
): string {
  return JSON.stringify(
    AuthTokenRevokeApiResponse$outboundSchema.parse(authTokenRevokeApiResponse),
  );
}

export function authTokenRevokeApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenRevokeApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenRevokeApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenRevokeApiResponse' from JSON`,
  );
}
