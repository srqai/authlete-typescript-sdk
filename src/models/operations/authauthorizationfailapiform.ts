/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type AuthAuthorizationFailApiFormRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  authorizationFailRequest: models.AuthorizationFailRequest;
};

/**
 * The next action that the authorization server implementation should take.
 */
export const AuthAuthorizationFailApiFormAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Location: "LOCATION",
  Form: "FORM",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type AuthAuthorizationFailApiFormAction = ClosedEnum<
  typeof AuthAuthorizationFailApiFormAction
>;

/**
 * Successful operation
 */
export type AuthAuthorizationFailApiFormResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: AuthAuthorizationFailApiFormAction | undefined;
  /**
   * The content that the authorization server implementation is to return to the client application.
   *
   * @remarks
   * Its format varies depending on the value of `action` parameter.
   */
  responseContent?: string | undefined;
};

/** @internal */
export const AuthAuthorizationFailApiFormRequest$inboundSchema: z.ZodType<
  AuthAuthorizationFailApiFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  AuthorizationFailRequest: models.AuthorizationFailRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "AuthorizationFailRequest": "authorizationFailRequest",
  });
});

/** @internal */
export type AuthAuthorizationFailApiFormRequest$Outbound = {
  serviceId: string;
  AuthorizationFailRequest: models.AuthorizationFailRequest$Outbound;
};

/** @internal */
export const AuthAuthorizationFailApiFormRequest$outboundSchema: z.ZodType<
  AuthAuthorizationFailApiFormRequest$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationFailApiFormRequest
> = z.object({
  serviceId: z.string(),
  authorizationFailRequest: models.AuthorizationFailRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    authorizationFailRequest: "AuthorizationFailRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationFailApiFormRequest$ {
  /** @deprecated use `AuthAuthorizationFailApiFormRequest$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationFailApiFormRequest$inboundSchema;
  /** @deprecated use `AuthAuthorizationFailApiFormRequest$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationFailApiFormRequest$outboundSchema;
  /** @deprecated use `AuthAuthorizationFailApiFormRequest$Outbound` instead. */
  export type Outbound = AuthAuthorizationFailApiFormRequest$Outbound;
}

export function authAuthorizationFailApiFormRequestToJSON(
  authAuthorizationFailApiFormRequest: AuthAuthorizationFailApiFormRequest,
): string {
  return JSON.stringify(
    AuthAuthorizationFailApiFormRequest$outboundSchema.parse(
      authAuthorizationFailApiFormRequest,
    ),
  );
}

export function authAuthorizationFailApiFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<AuthAuthorizationFailApiFormRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AuthAuthorizationFailApiFormRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthAuthorizationFailApiFormRequest' from JSON`,
  );
}

/** @internal */
export const AuthAuthorizationFailApiFormAction$inboundSchema: z.ZodNativeEnum<
  typeof AuthAuthorizationFailApiFormAction
> = z.nativeEnum(AuthAuthorizationFailApiFormAction);

/** @internal */
export const AuthAuthorizationFailApiFormAction$outboundSchema: z.ZodNativeEnum<
  typeof AuthAuthorizationFailApiFormAction
> = AuthAuthorizationFailApiFormAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationFailApiFormAction$ {
  /** @deprecated use `AuthAuthorizationFailApiFormAction$inboundSchema` instead. */
  export const inboundSchema = AuthAuthorizationFailApiFormAction$inboundSchema;
  /** @deprecated use `AuthAuthorizationFailApiFormAction$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationFailApiFormAction$outboundSchema;
}

/** @internal */
export const AuthAuthorizationFailApiFormResponse$inboundSchema: z.ZodType<
  AuthAuthorizationFailApiFormResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthAuthorizationFailApiFormAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
});

/** @internal */
export type AuthAuthorizationFailApiFormResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
};

/** @internal */
export const AuthAuthorizationFailApiFormResponse$outboundSchema: z.ZodType<
  AuthAuthorizationFailApiFormResponse$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationFailApiFormResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthAuthorizationFailApiFormAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationFailApiFormResponse$ {
  /** @deprecated use `AuthAuthorizationFailApiFormResponse$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationFailApiFormResponse$inboundSchema;
  /** @deprecated use `AuthAuthorizationFailApiFormResponse$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationFailApiFormResponse$outboundSchema;
  /** @deprecated use `AuthAuthorizationFailApiFormResponse$Outbound` instead. */
  export type Outbound = AuthAuthorizationFailApiFormResponse$Outbound;
}

export function authAuthorizationFailApiFormResponseToJSON(
  authAuthorizationFailApiFormResponse: AuthAuthorizationFailApiFormResponse,
): string {
  return JSON.stringify(
    AuthAuthorizationFailApiFormResponse$outboundSchema.parse(
      authAuthorizationFailApiFormResponse,
    ),
  );
}

export function authAuthorizationFailApiFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<AuthAuthorizationFailApiFormResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AuthAuthorizationFailApiFormResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthAuthorizationFailApiFormResponse' from JSON`,
  );
}
