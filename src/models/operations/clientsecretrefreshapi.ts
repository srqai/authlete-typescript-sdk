/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ClientSecretRefreshApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  /**
   * The client ID or the client ID alias of a client.
   *
   * @remarks
   */
  clientIdentifier: string;
};

/**
 * Successful operation
 */
export type ClientSecretRefreshApiResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The new client secret.
   *
   * @remarks
   */
  newClientSecret?: string | undefined;
  /**
   * The old client secret.
   *
   * @remarks
   */
  oldClientSecret?: string | undefined;
};

/** @internal */
export const ClientSecretRefreshApiRequest$inboundSchema: z.ZodType<
  ClientSecretRefreshApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  clientIdentifier: z.string(),
});

/** @internal */
export type ClientSecretRefreshApiRequest$Outbound = {
  serviceId: string;
  clientIdentifier: string;
};

/** @internal */
export const ClientSecretRefreshApiRequest$outboundSchema: z.ZodType<
  ClientSecretRefreshApiRequest$Outbound,
  z.ZodTypeDef,
  ClientSecretRefreshApiRequest
> = z.object({
  serviceId: z.string(),
  clientIdentifier: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientSecretRefreshApiRequest$ {
  /** @deprecated use `ClientSecretRefreshApiRequest$inboundSchema` instead. */
  export const inboundSchema = ClientSecretRefreshApiRequest$inboundSchema;
  /** @deprecated use `ClientSecretRefreshApiRequest$outboundSchema` instead. */
  export const outboundSchema = ClientSecretRefreshApiRequest$outboundSchema;
  /** @deprecated use `ClientSecretRefreshApiRequest$Outbound` instead. */
  export type Outbound = ClientSecretRefreshApiRequest$Outbound;
}

export function clientSecretRefreshApiRequestToJSON(
  clientSecretRefreshApiRequest: ClientSecretRefreshApiRequest,
): string {
  return JSON.stringify(
    ClientSecretRefreshApiRequest$outboundSchema.parse(
      clientSecretRefreshApiRequest,
    ),
  );
}

export function clientSecretRefreshApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<ClientSecretRefreshApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientSecretRefreshApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientSecretRefreshApiRequest' from JSON`,
  );
}

/** @internal */
export const ClientSecretRefreshApiResponse$inboundSchema: z.ZodType<
  ClientSecretRefreshApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  newClientSecret: z.string().optional(),
  oldClientSecret: z.string().optional(),
});

/** @internal */
export type ClientSecretRefreshApiResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  newClientSecret?: string | undefined;
  oldClientSecret?: string | undefined;
};

/** @internal */
export const ClientSecretRefreshApiResponse$outboundSchema: z.ZodType<
  ClientSecretRefreshApiResponse$Outbound,
  z.ZodTypeDef,
  ClientSecretRefreshApiResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  newClientSecret: z.string().optional(),
  oldClientSecret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientSecretRefreshApiResponse$ {
  /** @deprecated use `ClientSecretRefreshApiResponse$inboundSchema` instead. */
  export const inboundSchema = ClientSecretRefreshApiResponse$inboundSchema;
  /** @deprecated use `ClientSecretRefreshApiResponse$outboundSchema` instead. */
  export const outboundSchema = ClientSecretRefreshApiResponse$outboundSchema;
  /** @deprecated use `ClientSecretRefreshApiResponse$Outbound` instead. */
  export type Outbound = ClientSecretRefreshApiResponse$Outbound;
}

export function clientSecretRefreshApiResponseToJSON(
  clientSecretRefreshApiResponse: ClientSecretRefreshApiResponse,
): string {
  return JSON.stringify(
    ClientSecretRefreshApiResponse$outboundSchema.parse(
      clientSecretRefreshApiResponse,
    ),
  );
}

export function clientSecretRefreshApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<ClientSecretRefreshApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientSecretRefreshApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientSecretRefreshApiResponse' from JSON`,
  );
}
