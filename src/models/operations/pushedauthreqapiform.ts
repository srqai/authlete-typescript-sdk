/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type PushedAuthReqApiFormRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  apiServiceIdPushedAuthReq: models.ApiServiceIdPushedAuthReq;
};

/**
 * The next action that the authorization server implementation should take. Any other value other than "CREATED" should be handled as unsuccessful result.
 */
export const PushedAuthReqApiFormAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Created: "CREATED",
  Unauthorized: "UNAUTHORIZED",
  Forbidden: "FORBIDDEN",
  Json: "JSON",
  Jwt: "JWT",
  Ok: "OK",
} as const;
/**
 * The next action that the authorization server implementation should take. Any other value other than "CREATED" should be handled as unsuccessful result.
 */
export type PushedAuthReqApiFormAction = ClosedEnum<
  typeof PushedAuthReqApiFormAction
>;

/**
 * The client authentication method that the client application declares that it uses at the token
 *
 * @remarks
 * endpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic
 * Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
 */
export const PushedAuthReqApiFormClientAuthMethod = {
  None: "NONE",
  ClientSecretBasic: "CLIENT_SECRET_BASIC",
  ClientSecretPost: "CLIENT_SECRET_POST",
  ClientSecretJwt: "CLIENT_SECRET_JWT",
  PrivateKeyJwt: "PRIVATE_KEY_JWT",
  TlsClientAuth: "TLS_CLIENT_AUTH",
  SelfSignedTlsClientAuth: "SELF_SIGNED_TLS_CLIENT_AUTH",
} as const;
/**
 * The client authentication method that the client application declares that it uses at the token
 *
 * @remarks
 * endpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic
 * Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
 */
export type PushedAuthReqApiFormClientAuthMethod = ClosedEnum<
  typeof PushedAuthReqApiFormClientAuthMethod
>;

/**
 * An object containing schema data
 */
export type PushedAuthReqApiFormResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take. Any other value other than "CREATED" should be handled as unsuccessful result.
   */
  action?: PushedAuthReqApiFormAction | undefined;
  /**
   * The request_uri created to the client to be used as request_uri on the authorize call.
   *
   * @remarks
   */
  requestUri?: string | undefined;
  /**
   * The content that the authorization server implementation is to return to the client
   *
   * @remarks
   * application.
   */
  responseContent?: string | undefined;
  /**
   * The client authentication method that the client application declares that it uses at the token
   *
   * @remarks
   * endpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic
   * Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  clientAuthMethod?: PushedAuthReqApiFormClientAuthMethod | undefined;
  /**
   * Get the expected nonce value for DPoP proof JWT, which should be used
   *
   * @remarks
   * as the value of the `DPoP-Nonce` HTTP header.
   */
  dpopNonce?: string | undefined;
};

/** @internal */
export const PushedAuthReqApiFormRequest$inboundSchema: z.ZodType<
  PushedAuthReqApiFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  api_serviceId_pushed_auth_req: models.ApiServiceIdPushedAuthReq$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "api_serviceId_pushed_auth_req": "apiServiceIdPushedAuthReq",
  });
});

/** @internal */
export type PushedAuthReqApiFormRequest$Outbound = {
  serviceId: string;
  api_serviceId_pushed_auth_req: models.ApiServiceIdPushedAuthReq$Outbound;
};

/** @internal */
export const PushedAuthReqApiFormRequest$outboundSchema: z.ZodType<
  PushedAuthReqApiFormRequest$Outbound,
  z.ZodTypeDef,
  PushedAuthReqApiFormRequest
> = z.object({
  serviceId: z.string(),
  apiServiceIdPushedAuthReq: models.ApiServiceIdPushedAuthReq$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    apiServiceIdPushedAuthReq: "api_serviceId_pushed_auth_req",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PushedAuthReqApiFormRequest$ {
  /** @deprecated use `PushedAuthReqApiFormRequest$inboundSchema` instead. */
  export const inboundSchema = PushedAuthReqApiFormRequest$inboundSchema;
  /** @deprecated use `PushedAuthReqApiFormRequest$outboundSchema` instead. */
  export const outboundSchema = PushedAuthReqApiFormRequest$outboundSchema;
  /** @deprecated use `PushedAuthReqApiFormRequest$Outbound` instead. */
  export type Outbound = PushedAuthReqApiFormRequest$Outbound;
}

export function pushedAuthReqApiFormRequestToJSON(
  pushedAuthReqApiFormRequest: PushedAuthReqApiFormRequest,
): string {
  return JSON.stringify(
    PushedAuthReqApiFormRequest$outboundSchema.parse(
      pushedAuthReqApiFormRequest,
    ),
  );
}

export function pushedAuthReqApiFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<PushedAuthReqApiFormRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PushedAuthReqApiFormRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PushedAuthReqApiFormRequest' from JSON`,
  );
}

/** @internal */
export const PushedAuthReqApiFormAction$inboundSchema: z.ZodNativeEnum<
  typeof PushedAuthReqApiFormAction
> = z.nativeEnum(PushedAuthReqApiFormAction);

/** @internal */
export const PushedAuthReqApiFormAction$outboundSchema: z.ZodNativeEnum<
  typeof PushedAuthReqApiFormAction
> = PushedAuthReqApiFormAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PushedAuthReqApiFormAction$ {
  /** @deprecated use `PushedAuthReqApiFormAction$inboundSchema` instead. */
  export const inboundSchema = PushedAuthReqApiFormAction$inboundSchema;
  /** @deprecated use `PushedAuthReqApiFormAction$outboundSchema` instead. */
  export const outboundSchema = PushedAuthReqApiFormAction$outboundSchema;
}

/** @internal */
export const PushedAuthReqApiFormClientAuthMethod$inboundSchema:
  z.ZodNativeEnum<typeof PushedAuthReqApiFormClientAuthMethod> = z.nativeEnum(
    PushedAuthReqApiFormClientAuthMethod,
  );

/** @internal */
export const PushedAuthReqApiFormClientAuthMethod$outboundSchema:
  z.ZodNativeEnum<typeof PushedAuthReqApiFormClientAuthMethod> =
    PushedAuthReqApiFormClientAuthMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PushedAuthReqApiFormClientAuthMethod$ {
  /** @deprecated use `PushedAuthReqApiFormClientAuthMethod$inboundSchema` instead. */
  export const inboundSchema =
    PushedAuthReqApiFormClientAuthMethod$inboundSchema;
  /** @deprecated use `PushedAuthReqApiFormClientAuthMethod$outboundSchema` instead. */
  export const outboundSchema =
    PushedAuthReqApiFormClientAuthMethod$outboundSchema;
}

/** @internal */
export const PushedAuthReqApiFormResponse$inboundSchema: z.ZodType<
  PushedAuthReqApiFormResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: PushedAuthReqApiFormAction$inboundSchema.optional(),
  requestUri: z.string().optional(),
  responseContent: z.string().optional(),
  clientAuthMethod: PushedAuthReqApiFormClientAuthMethod$inboundSchema
    .optional(),
  dpopNonce: z.string().optional(),
});

/** @internal */
export type PushedAuthReqApiFormResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  requestUri?: string | undefined;
  responseContent?: string | undefined;
  clientAuthMethod?: string | undefined;
  dpopNonce?: string | undefined;
};

/** @internal */
export const PushedAuthReqApiFormResponse$outboundSchema: z.ZodType<
  PushedAuthReqApiFormResponse$Outbound,
  z.ZodTypeDef,
  PushedAuthReqApiFormResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: PushedAuthReqApiFormAction$outboundSchema.optional(),
  requestUri: z.string().optional(),
  responseContent: z.string().optional(),
  clientAuthMethod: PushedAuthReqApiFormClientAuthMethod$outboundSchema
    .optional(),
  dpopNonce: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PushedAuthReqApiFormResponse$ {
  /** @deprecated use `PushedAuthReqApiFormResponse$inboundSchema` instead. */
  export const inboundSchema = PushedAuthReqApiFormResponse$inboundSchema;
  /** @deprecated use `PushedAuthReqApiFormResponse$outboundSchema` instead. */
  export const outboundSchema = PushedAuthReqApiFormResponse$outboundSchema;
  /** @deprecated use `PushedAuthReqApiFormResponse$Outbound` instead. */
  export type Outbound = PushedAuthReqApiFormResponse$Outbound;
}

export function pushedAuthReqApiFormResponseToJSON(
  pushedAuthReqApiFormResponse: PushedAuthReqApiFormResponse,
): string {
  return JSON.stringify(
    PushedAuthReqApiFormResponse$outboundSchema.parse(
      pushedAuthReqApiFormResponse,
    ),
  );
}

export function pushedAuthReqApiFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<PushedAuthReqApiFormResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PushedAuthReqApiFormResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PushedAuthReqApiFormResponse' from JSON`,
  );
}
