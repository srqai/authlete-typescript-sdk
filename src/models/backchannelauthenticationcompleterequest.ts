/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type BackchannelAuthenticationCompleteRequest = {};

/** @internal */
export const BackchannelAuthenticationCompleteRequest$inboundSchema: z.ZodType<
  BackchannelAuthenticationCompleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type BackchannelAuthenticationCompleteRequest$Outbound = {};

/** @internal */
export const BackchannelAuthenticationCompleteRequest$outboundSchema: z.ZodType<
  BackchannelAuthenticationCompleteRequest$Outbound,
  z.ZodTypeDef,
  BackchannelAuthenticationCompleteRequest
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationCompleteRequest$ {
  /** @deprecated use `BackchannelAuthenticationCompleteRequest$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationCompleteRequest$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationCompleteRequest$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationCompleteRequest$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationCompleteRequest$Outbound` instead. */
  export type Outbound = BackchannelAuthenticationCompleteRequest$Outbound;
}

export function backchannelAuthenticationCompleteRequestToJSON(
  backchannelAuthenticationCompleteRequest:
    BackchannelAuthenticationCompleteRequest,
): string {
  return JSON.stringify(
    BackchannelAuthenticationCompleteRequest$outboundSchema.parse(
      backchannelAuthenticationCompleteRequest,
    ),
  );
}

export function backchannelAuthenticationCompleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  BackchannelAuthenticationCompleteRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationCompleteRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BackchannelAuthenticationCompleteRequest' from JSON`,
  );
}
