/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Property,
  Property$inboundSchema,
  Property$Outbound,
  Property$outboundSchema,
} from "./property.js";

/**
 * The result of the end-user authentication and authorization. One of the following. Details are
 *
 * @remarks
 * described in the description.
 */
export const ApiServiceIdBackchannelAuthenticationCompleteResult = {
  TransactionFailed: "TRANSACTION_FAILED",
  AccessDenied: "ACCESS_DENIED",
  Authorized: "AUTHORIZED",
} as const;
/**
 * The result of the end-user authentication and authorization. One of the following. Details are
 *
 * @remarks
 * described in the description.
 */
export type ApiServiceIdBackchannelAuthenticationCompleteResult = ClosedEnum<
  typeof ApiServiceIdBackchannelAuthenticationCompleteResult
>;

/**
 * An object containing api_serviceid_backchannel_authentication_complete data
 */
export type ApiServiceIdBackchannelAuthenticationComplete = {
  /**
   * The ticket issued by Authlete's `/backchannel/authentication` API.
   *
   * @remarks
   */
  ticket: string;
  /**
   * The result of the end-user authentication and authorization. One of the following. Details are
   *
   * @remarks
   * described in the description.
   */
  result: ApiServiceIdBackchannelAuthenticationCompleteResult;
  /**
   * The subject (= unique identifier) of the end-user.
   *
   * @remarks
   */
  subject: string;
  /**
   * The value of the sub claim that should be used in the ID token.
   *
   * @remarks
   */
  sub?: string | undefined;
  /**
   * The time at which the end-user was authenticated. Its value is the number of seconds from `1970-01-01`.
   *
   * @remarks
   */
  authTime?: number | undefined;
  /**
   * The reference of the authentication context class which the end-user authentication satisfied.
   *
   * @remarks
   */
  acr?: string | undefined;
  /**
   * Additional claims which will be embedded in the ID token.
   *
   * @remarks
   */
  claims?: string | undefined;
  /**
   * The extra properties associated with the access token.
   *
   * @remarks
   */
  properties?: Array<Property> | undefined;
  /**
   * Scopes to replace the scopes specified in the original backchannel authentication request with.
   *
   * @remarks
   * When nothing is specified for this parameter, replacement is not performed.
   */
  scopes?: Array<string> | undefined;
  /**
   * JSON that represents additional JWS header parameters for ID tokens.
   *
   * @remarks
   */
  idtHeaderParams?: string | undefined;
  /**
   * The description of the error. If this optional request parameter is given, its value is used as
   *
   * @remarks
   * the value of the `error_description` property, but it is used only when the result is not `AUTHORIZED`.
   * To comply with the specification strictly, the description must not include characters outside
   * the set `%x20-21 / %x23-5B / %x5D-7E`.
   */
  errorDescription?: string | undefined;
  /**
   * The URI of a document which describes the error in detail. This corresponds to the `error_uri`
   *
   * @remarks
   * property in the response to the client.
   */
  errorUri?: string | undefined;
  /**
   * the claims that the user has consented for the client application
   *
   * @remarks
   * to know.
   */
  consentedClaims?: Array<string> | undefined;
  /**
   * Additional claims that are added to the payload part of the JWT access token.
   *
   * @remarks
   */
  jwtAtClaims?: string | undefined;
  /**
   * The representation of an access token that may be issued as a result of the Authlete API call.
   *
   * @remarks
   */
  accessToken?: string | undefined;
};

/** @internal */
export const ApiServiceIdBackchannelAuthenticationCompleteResult$inboundSchema:
  z.ZodNativeEnum<typeof ApiServiceIdBackchannelAuthenticationCompleteResult> =
    z.nativeEnum(ApiServiceIdBackchannelAuthenticationCompleteResult);

/** @internal */
export const ApiServiceIdBackchannelAuthenticationCompleteResult$outboundSchema:
  z.ZodNativeEnum<typeof ApiServiceIdBackchannelAuthenticationCompleteResult> =
    ApiServiceIdBackchannelAuthenticationCompleteResult$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiServiceIdBackchannelAuthenticationCompleteResult$ {
  /** @deprecated use `ApiServiceIdBackchannelAuthenticationCompleteResult$inboundSchema` instead. */
  export const inboundSchema =
    ApiServiceIdBackchannelAuthenticationCompleteResult$inboundSchema;
  /** @deprecated use `ApiServiceIdBackchannelAuthenticationCompleteResult$outboundSchema` instead. */
  export const outboundSchema =
    ApiServiceIdBackchannelAuthenticationCompleteResult$outboundSchema;
}

/** @internal */
export const ApiServiceIdBackchannelAuthenticationComplete$inboundSchema:
  z.ZodType<
    ApiServiceIdBackchannelAuthenticationComplete,
    z.ZodTypeDef,
    unknown
  > = z.object({
    ticket: z.string(),
    result: ApiServiceIdBackchannelAuthenticationCompleteResult$inboundSchema,
    subject: z.string(),
    sub: z.string().optional(),
    authTime: z.number().int().optional(),
    acr: z.string().optional(),
    claims: z.string().optional(),
    properties: z.array(Property$inboundSchema).optional(),
    scopes: z.array(z.string()).optional(),
    idtHeaderParams: z.string().optional(),
    errorDescription: z.string().optional(),
    errorUri: z.string().optional(),
    consentedClaims: z.array(z.string()).optional(),
    jwtAtClaims: z.string().optional(),
    accessToken: z.string().optional(),
  });

/** @internal */
export type ApiServiceIdBackchannelAuthenticationComplete$Outbound = {
  ticket: string;
  result: string;
  subject: string;
  sub?: string | undefined;
  authTime?: number | undefined;
  acr?: string | undefined;
  claims?: string | undefined;
  properties?: Array<Property$Outbound> | undefined;
  scopes?: Array<string> | undefined;
  idtHeaderParams?: string | undefined;
  errorDescription?: string | undefined;
  errorUri?: string | undefined;
  consentedClaims?: Array<string> | undefined;
  jwtAtClaims?: string | undefined;
  accessToken?: string | undefined;
};

/** @internal */
export const ApiServiceIdBackchannelAuthenticationComplete$outboundSchema:
  z.ZodType<
    ApiServiceIdBackchannelAuthenticationComplete$Outbound,
    z.ZodTypeDef,
    ApiServiceIdBackchannelAuthenticationComplete
  > = z.object({
    ticket: z.string(),
    result: ApiServiceIdBackchannelAuthenticationCompleteResult$outboundSchema,
    subject: z.string(),
    sub: z.string().optional(),
    authTime: z.number().int().optional(),
    acr: z.string().optional(),
    claims: z.string().optional(),
    properties: z.array(Property$outboundSchema).optional(),
    scopes: z.array(z.string()).optional(),
    idtHeaderParams: z.string().optional(),
    errorDescription: z.string().optional(),
    errorUri: z.string().optional(),
    consentedClaims: z.array(z.string()).optional(),
    jwtAtClaims: z.string().optional(),
    accessToken: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiServiceIdBackchannelAuthenticationComplete$ {
  /** @deprecated use `ApiServiceIdBackchannelAuthenticationComplete$inboundSchema` instead. */
  export const inboundSchema =
    ApiServiceIdBackchannelAuthenticationComplete$inboundSchema;
  /** @deprecated use `ApiServiceIdBackchannelAuthenticationComplete$outboundSchema` instead. */
  export const outboundSchema =
    ApiServiceIdBackchannelAuthenticationComplete$outboundSchema;
  /** @deprecated use `ApiServiceIdBackchannelAuthenticationComplete$Outbound` instead. */
  export type Outbound = ApiServiceIdBackchannelAuthenticationComplete$Outbound;
}

export function apiServiceIdBackchannelAuthenticationCompleteToJSON(
  apiServiceIdBackchannelAuthenticationComplete:
    ApiServiceIdBackchannelAuthenticationComplete,
): string {
  return JSON.stringify(
    ApiServiceIdBackchannelAuthenticationComplete$outboundSchema.parse(
      apiServiceIdBackchannelAuthenticationComplete,
    ),
  );
}

export function apiServiceIdBackchannelAuthenticationCompleteFromJSON(
  jsonString: string,
): SafeParseResult<
  ApiServiceIdBackchannelAuthenticationComplete,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ApiServiceIdBackchannelAuthenticationComplete$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ApiServiceIdBackchannelAuthenticationComplete' from JSON`,
  );
}
