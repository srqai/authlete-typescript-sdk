/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AuthorizationDetails,
  AuthorizationDetails$inboundSchema,
  AuthorizationDetails$Outbound,
  AuthorizationDetails$outboundSchema,
} from "./authorizationdetails.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Property,
  Property$inboundSchema,
  Property$Outbound,
  Property$outboundSchema,
} from "./property.js";

/**
 * An object containing api_serviceid_auth_token_update data
 */
export type ApiServiceIdAuthTokenUpdate = {
  /**
   * An access token.
   *
   * @remarks
   */
  accessToken: string;
  /**
   * A new date at which the access token will expire in milliseconds since the Unix epoch (1970-01-01).
   *
   * @remarks
   * If the `accessTokenExpiresAt` request parameter is not included in a request or its value is 0
   * (or negative), the expiration date of the access token is not changed.
   */
  accessTokenExpiresAt?: number | undefined;
  /**
   * A new set of scopes assigned to the access token. Scopes that are not supported by the service
   *
   * @remarks
   * and those that the client application associated with the access token is not allowed to request
   * are ignored on the server side. If the `scopes` request parameter is not included in a request or
   * its value is `null`, the scopes of the access token are not changed. Note that `properties` parameter
   * is accepted only when `Content-Type` of the request is `application/json`, so don't use `application/x-www-form-urlencoded`
   * if you want to specify `properties`.
   */
  scopes?: Array<string> | undefined;
  /**
   * A new set of properties assigned to the access token. If the `properties` request parameter is
   *
   * @remarks
   * not included in a request or its value is null, the properties of the access token are not changed.
   */
  properties?: Array<Property> | undefined;
  /**
   * A boolean request parameter which indicates whether the API attempts to update the expiration
   *
   * @remarks
   * date of the access token when the scopes linked to the access token are changed by this request.
   */
  accessTokenExpiresAtUpdatedOnScopeUpdate?: boolean | undefined;
  /**
   * The hash of the access token value. Used when the hash of the token is known (perhaps from lookup)
   *
   * @remarks
   * but the value of the token itself is not. The value of the `accessToken` parameter takes precedence.
   */
  accessTokenHash?: string | undefined;
  /**
   * A boolean request parameter which indicates whether to update the value of the access token in
   *
   * @remarks
   * the data store. If this parameter is set to `true` then a new access token value is generated
   * by the server and returned in the response.
   */
  accessTokenValueUpdated?: boolean | undefined;
  /**
   * The flag which indicates whether the access token expires or not. By default, all access tokens
   *
   * @remarks
   * expire after a period of time determined by their service. If this request parameter is `true`
   * then the access token will not automatically expire and must be revoked or deleted manually at
   * the service.
   *
   * If this request parameter is `true`, the `accessTokenExpiresAt` request parameter is ignored.
   * If this request parameter is `false`, the `accessTokenExpiresAt` request parameter is processed
   * normally.
   */
  accessTokenPersistent?: boolean | undefined;
  /**
   * The thumbprint of the MTLS certificate bound to this token. If this property is set, a certificate
   *
   * @remarks
   * with the corresponding value MUST be presented with the access token when it is used by a client.
   * The value of this property must be a SHA256 certificate thumbprint, base64url encoded.
   */
  certificateThumbprint?: string | undefined;
  /**
   * The thumbprint of the public key used for DPoP presentation of this token. If this property is
   *
   * @remarks
   * set, a DPoP proof signed with the corresponding private key MUST be presented with the access
   * token when it is used by a client. Additionally, the token's `token_type` will be set to 'DPoP'.
   */
  dpopKeyThumbprint?: string | undefined;
  /**
   * The authorization details. This represents the value of the `authorization_details`
   *
   * @remarks
   * request parameter in the preceding device authorization request which is defined in
   * "OAuth 2.0 Rich Authorization Requests".
   */
  authorizationDetails?: AuthorizationDetails | undefined;
  /**
   * the flag which indicates whether the access token is for an external
   *
   * @remarks
   * attachment.
   */
  forExternalAttachment?: boolean | undefined;
};

/** @internal */
export const ApiServiceIdAuthTokenUpdate$inboundSchema: z.ZodType<
  ApiServiceIdAuthTokenUpdate,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessToken: z.string(),
  accessTokenExpiresAt: z.number().int().optional(),
  scopes: z.array(z.string()).optional(),
  properties: z.array(Property$inboundSchema).optional(),
  accessTokenExpiresAtUpdatedOnScopeUpdate: z.boolean().optional(),
  accessTokenHash: z.string().optional(),
  accessTokenValueUpdated: z.boolean().optional(),
  accessTokenPersistent: z.boolean().optional(),
  certificateThumbprint: z.string().optional(),
  dpopKeyThumbprint: z.string().optional(),
  authorizationDetails: AuthorizationDetails$inboundSchema.optional(),
  forExternalAttachment: z.boolean().optional(),
});

/** @internal */
export type ApiServiceIdAuthTokenUpdate$Outbound = {
  accessToken: string;
  accessTokenExpiresAt?: number | undefined;
  scopes?: Array<string> | undefined;
  properties?: Array<Property$Outbound> | undefined;
  accessTokenExpiresAtUpdatedOnScopeUpdate?: boolean | undefined;
  accessTokenHash?: string | undefined;
  accessTokenValueUpdated?: boolean | undefined;
  accessTokenPersistent?: boolean | undefined;
  certificateThumbprint?: string | undefined;
  dpopKeyThumbprint?: string | undefined;
  authorizationDetails?: AuthorizationDetails$Outbound | undefined;
  forExternalAttachment?: boolean | undefined;
};

/** @internal */
export const ApiServiceIdAuthTokenUpdate$outboundSchema: z.ZodType<
  ApiServiceIdAuthTokenUpdate$Outbound,
  z.ZodTypeDef,
  ApiServiceIdAuthTokenUpdate
> = z.object({
  accessToken: z.string(),
  accessTokenExpiresAt: z.number().int().optional(),
  scopes: z.array(z.string()).optional(),
  properties: z.array(Property$outboundSchema).optional(),
  accessTokenExpiresAtUpdatedOnScopeUpdate: z.boolean().optional(),
  accessTokenHash: z.string().optional(),
  accessTokenValueUpdated: z.boolean().optional(),
  accessTokenPersistent: z.boolean().optional(),
  certificateThumbprint: z.string().optional(),
  dpopKeyThumbprint: z.string().optional(),
  authorizationDetails: AuthorizationDetails$outboundSchema.optional(),
  forExternalAttachment: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiServiceIdAuthTokenUpdate$ {
  /** @deprecated use `ApiServiceIdAuthTokenUpdate$inboundSchema` instead. */
  export const inboundSchema = ApiServiceIdAuthTokenUpdate$inboundSchema;
  /** @deprecated use `ApiServiceIdAuthTokenUpdate$outboundSchema` instead. */
  export const outboundSchema = ApiServiceIdAuthTokenUpdate$outboundSchema;
  /** @deprecated use `ApiServiceIdAuthTokenUpdate$Outbound` instead. */
  export type Outbound = ApiServiceIdAuthTokenUpdate$Outbound;
}

export function apiServiceIdAuthTokenUpdateToJSON(
  apiServiceIdAuthTokenUpdate: ApiServiceIdAuthTokenUpdate,
): string {
  return JSON.stringify(
    ApiServiceIdAuthTokenUpdate$outboundSchema.parse(
      apiServiceIdAuthTokenUpdate,
    ),
  );
}

export function apiServiceIdAuthTokenUpdateFromJSON(
  jsonString: string,
): SafeParseResult<ApiServiceIdAuthTokenUpdate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiServiceIdAuthTokenUpdate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiServiceIdAuthTokenUpdate' from JSON`,
  );
}
