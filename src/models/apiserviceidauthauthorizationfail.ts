/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The reason of the failure of the authorization request.
 *
 * @remarks
 * For more details, see [NO_INTERACTION] in the description of `/auth/authorization` API.
 */
export const ApiServiceIdAuthAuthorizationFailReason = {
  Unknown: "UNKNOWN",
  NotLoggedIn: "NOT_LOGGED_IN",
  MaxAgeNotSupported: "MAX_AGE_NOT_SUPPORTED",
  ExceedsMaxAge: "EXCEEDS_MAX_AGE",
  DifferentSubject: "DIFFERENT_SUBJECT",
  AcrNotSatisfied: "ACR_NOT_SATISFIED",
  Denied: "DENIED",
  ServerError: "SERVER_ERROR",
  NotAuthenticated: "NOT_AUTHENTICATED",
  AccountSelectionRequired: "ACCOUNT_SELECTION_REQUIRED",
  ConsentRequired: "CONSENT_REQUIRED",
  InteractionRequired: "INTERACTION_REQUIRED",
  InvalidTarget: "INVALID_TARGET",
} as const;
/**
 * The reason of the failure of the authorization request.
 *
 * @remarks
 * For more details, see [NO_INTERACTION] in the description of `/auth/authorization` API.
 */
export type ApiServiceIdAuthAuthorizationFailReason = ClosedEnum<
  typeof ApiServiceIdAuthAuthorizationFailReason
>;

/**
 * An object containing api_serviceid_auth_authorization_fail data
 */
export type ApiServiceIdAuthAuthorizationFail = {
  /**
   * The ticket issued from Authlete `/auth/authorization` API.
   *
   * @remarks
   */
  ticket: string;
  /**
   * The reason of the failure of the authorization request.
   *
   * @remarks
   * For more details, see [NO_INTERACTION] in the description of `/auth/authorization` API.
   */
  reason: ApiServiceIdAuthAuthorizationFailReason;
  /**
   * The custom description about the authorization failure.
   *
   * @remarks
   */
  description?: string | undefined;
};

/** @internal */
export const ApiServiceIdAuthAuthorizationFailReason$inboundSchema:
  z.ZodNativeEnum<typeof ApiServiceIdAuthAuthorizationFailReason> = z
    .nativeEnum(ApiServiceIdAuthAuthorizationFailReason);

/** @internal */
export const ApiServiceIdAuthAuthorizationFailReason$outboundSchema:
  z.ZodNativeEnum<typeof ApiServiceIdAuthAuthorizationFailReason> =
    ApiServiceIdAuthAuthorizationFailReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiServiceIdAuthAuthorizationFailReason$ {
  /** @deprecated use `ApiServiceIdAuthAuthorizationFailReason$inboundSchema` instead. */
  export const inboundSchema =
    ApiServiceIdAuthAuthorizationFailReason$inboundSchema;
  /** @deprecated use `ApiServiceIdAuthAuthorizationFailReason$outboundSchema` instead. */
  export const outboundSchema =
    ApiServiceIdAuthAuthorizationFailReason$outboundSchema;
}

/** @internal */
export const ApiServiceIdAuthAuthorizationFail$inboundSchema: z.ZodType<
  ApiServiceIdAuthAuthorizationFail,
  z.ZodTypeDef,
  unknown
> = z.object({
  ticket: z.string(),
  reason: ApiServiceIdAuthAuthorizationFailReason$inboundSchema,
  description: z.string().optional(),
});

/** @internal */
export type ApiServiceIdAuthAuthorizationFail$Outbound = {
  ticket: string;
  reason: string;
  description?: string | undefined;
};

/** @internal */
export const ApiServiceIdAuthAuthorizationFail$outboundSchema: z.ZodType<
  ApiServiceIdAuthAuthorizationFail$Outbound,
  z.ZodTypeDef,
  ApiServiceIdAuthAuthorizationFail
> = z.object({
  ticket: z.string(),
  reason: ApiServiceIdAuthAuthorizationFailReason$outboundSchema,
  description: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiServiceIdAuthAuthorizationFail$ {
  /** @deprecated use `ApiServiceIdAuthAuthorizationFail$inboundSchema` instead. */
  export const inboundSchema = ApiServiceIdAuthAuthorizationFail$inboundSchema;
  /** @deprecated use `ApiServiceIdAuthAuthorizationFail$outboundSchema` instead. */
  export const outboundSchema =
    ApiServiceIdAuthAuthorizationFail$outboundSchema;
  /** @deprecated use `ApiServiceIdAuthAuthorizationFail$Outbound` instead. */
  export type Outbound = ApiServiceIdAuthAuthorizationFail$Outbound;
}

export function apiServiceIdAuthAuthorizationFailToJSON(
  apiServiceIdAuthAuthorizationFail: ApiServiceIdAuthAuthorizationFail,
): string {
  return JSON.stringify(
    ApiServiceIdAuthAuthorizationFail$outboundSchema.parse(
      apiServiceIdAuthAuthorizationFail,
    ),
  );
}

export function apiServiceIdAuthAuthorizationFailFromJSON(
  jsonString: string,
): SafeParseResult<ApiServiceIdAuthAuthorizationFail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiServiceIdAuthAuthorizationFail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiServiceIdAuthAuthorizationFail' from JSON`,
  );
}
