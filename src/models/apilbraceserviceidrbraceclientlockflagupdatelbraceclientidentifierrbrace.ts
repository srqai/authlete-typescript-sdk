/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type APILBraceserviceIdRBraceClientLockFlagUpdateLBraceclientIdentifierRBrace =
  {};

/** @internal */
export const APILBraceserviceIdRBraceClientLockFlagUpdateLBraceclientIdentifierRBrace$inboundSchema:
  z.ZodType<
    APILBraceserviceIdRBraceClientLockFlagUpdateLBraceclientIdentifierRBrace,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type APILBraceserviceIdRBraceClientLockFlagUpdateLBraceclientIdentifierRBrace$Outbound =
  {};

/** @internal */
export const APILBraceserviceIdRBraceClientLockFlagUpdateLBraceclientIdentifierRBrace$outboundSchema:
  z.ZodType<
    APILBraceserviceIdRBraceClientLockFlagUpdateLBraceclientIdentifierRBrace$Outbound,
    z.ZodTypeDef,
    APILBraceserviceIdRBraceClientLockFlagUpdateLBraceclientIdentifierRBrace
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace APILBraceserviceIdRBraceClientLockFlagUpdateLBraceclientIdentifierRBrace$ {
  /** @deprecated use `APILBraceserviceIdRBraceClientLockFlagUpdateLBraceclientIdentifierRBrace$inboundSchema` instead. */
  export const inboundSchema =
    APILBraceserviceIdRBraceClientLockFlagUpdateLBraceclientIdentifierRBrace$inboundSchema;
  /** @deprecated use `APILBraceserviceIdRBraceClientLockFlagUpdateLBraceclientIdentifierRBrace$outboundSchema` instead. */
  export const outboundSchema =
    APILBraceserviceIdRBraceClientLockFlagUpdateLBraceclientIdentifierRBrace$outboundSchema;
  /** @deprecated use `APILBraceserviceIdRBraceClientLockFlagUpdateLBraceclientIdentifierRBrace$Outbound` instead. */
  export type Outbound =
    APILBraceserviceIdRBraceClientLockFlagUpdateLBraceclientIdentifierRBrace$Outbound;
}

export function apilBraceserviceIdRBraceClientLockFlagUpdateLBraceclientIdentifierRBraceToJSON(
  apilBraceserviceIdRBraceClientLockFlagUpdateLBraceclientIdentifierRBrace:
    APILBraceserviceIdRBraceClientLockFlagUpdateLBraceclientIdentifierRBrace,
): string {
  return JSON.stringify(
    APILBraceserviceIdRBraceClientLockFlagUpdateLBraceclientIdentifierRBrace$outboundSchema
      .parse(
        apilBraceserviceIdRBraceClientLockFlagUpdateLBraceclientIdentifierRBrace,
      ),
  );
}

export function apilBraceserviceIdRBraceClientLockFlagUpdateLBraceclientIdentifierRBraceFromJSON(
  jsonString: string,
): SafeParseResult<
  APILBraceserviceIdRBraceClientLockFlagUpdateLBraceclientIdentifierRBrace,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      APILBraceserviceIdRBraceClientLockFlagUpdateLBraceclientIdentifierRBrace$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'APILBraceserviceIdRBraceClientLockFlagUpdateLBraceclientIdentifierRBrace' from JSON`,
  );
}
