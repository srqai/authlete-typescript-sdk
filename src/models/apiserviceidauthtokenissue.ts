/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Property,
  Property$inboundSchema,
  Property$Outbound,
  Property$outboundSchema,
} from "./property.js";

/**
 * An object containing api_serviceid_auth_token_issue data
 */
export type ApiServiceIdAuthTokenIssue = {
  /**
   * The ticket issued from Authlete `/auth/token` API.
   *
   * @remarks
   */
  ticket: string;
  /**
   * The subject (= unique identifier) of the authenticated user.
   *
   * @remarks
   */
  subject: string;
  /**
   * Extra properties to associate with a newly created access token. Note that properties parameter is accepted only
   *
   * @remarks
   * when `Content-Type` of the request is `application/json`, so don't use `application/x-www-form-urlencoded`
   * if you want to specify properties.
   */
  properties?: Array<Property> | undefined;
  /**
   * Additional claims that are added to the payload part of the JWT access token.
   *
   * @remarks
   */
  jwtAtClaims?: string | undefined;
  /**
   * The representation of an access token that may be issued as a result of the Authlete API call.
   *
   * @remarks
   */
  accessToken?: string | undefined;
};

/** @internal */
export const ApiServiceIdAuthTokenIssue$inboundSchema: z.ZodType<
  ApiServiceIdAuthTokenIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  ticket: z.string(),
  subject: z.string(),
  properties: z.array(Property$inboundSchema).optional(),
  jwtAtClaims: z.string().optional(),
  accessToken: z.string().optional(),
});

/** @internal */
export type ApiServiceIdAuthTokenIssue$Outbound = {
  ticket: string;
  subject: string;
  properties?: Array<Property$Outbound> | undefined;
  jwtAtClaims?: string | undefined;
  accessToken?: string | undefined;
};

/** @internal */
export const ApiServiceIdAuthTokenIssue$outboundSchema: z.ZodType<
  ApiServiceIdAuthTokenIssue$Outbound,
  z.ZodTypeDef,
  ApiServiceIdAuthTokenIssue
> = z.object({
  ticket: z.string(),
  subject: z.string(),
  properties: z.array(Property$outboundSchema).optional(),
  jwtAtClaims: z.string().optional(),
  accessToken: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiServiceIdAuthTokenIssue$ {
  /** @deprecated use `ApiServiceIdAuthTokenIssue$inboundSchema` instead. */
  export const inboundSchema = ApiServiceIdAuthTokenIssue$inboundSchema;
  /** @deprecated use `ApiServiceIdAuthTokenIssue$outboundSchema` instead. */
  export const outboundSchema = ApiServiceIdAuthTokenIssue$outboundSchema;
  /** @deprecated use `ApiServiceIdAuthTokenIssue$Outbound` instead. */
  export type Outbound = ApiServiceIdAuthTokenIssue$Outbound;
}

export function apiServiceIdAuthTokenIssueToJSON(
  apiServiceIdAuthTokenIssue: ApiServiceIdAuthTokenIssue,
): string {
  return JSON.stringify(
    ApiServiceIdAuthTokenIssue$outboundSchema.parse(apiServiceIdAuthTokenIssue),
  );
}

export function apiServiceIdAuthTokenIssueFromJSON(
  jsonString: string,
): SafeParseResult<ApiServiceIdAuthTokenIssue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiServiceIdAuthTokenIssue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiServiceIdAuthTokenIssue' from JSON`,
  );
}
