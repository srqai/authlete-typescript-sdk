/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type AuthorizationFailRequest = {};

/** @internal */
export const AuthorizationFailRequest$inboundSchema: z.ZodType<
  AuthorizationFailRequest,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type AuthorizationFailRequest$Outbound = {};

/** @internal */
export const AuthorizationFailRequest$outboundSchema: z.ZodType<
  AuthorizationFailRequest$Outbound,
  z.ZodTypeDef,
  AuthorizationFailRequest
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthorizationFailRequest$ {
  /** @deprecated use `AuthorizationFailRequest$inboundSchema` instead. */
  export const inboundSchema = AuthorizationFailRequest$inboundSchema;
  /** @deprecated use `AuthorizationFailRequest$outboundSchema` instead. */
  export const outboundSchema = AuthorizationFailRequest$outboundSchema;
  /** @deprecated use `AuthorizationFailRequest$Outbound` instead. */
  export type Outbound = AuthorizationFailRequest$Outbound;
}

export function authorizationFailRequestToJSON(
  authorizationFailRequest: AuthorizationFailRequest,
): string {
  return JSON.stringify(
    AuthorizationFailRequest$outboundSchema.parse(authorizationFailRequest),
  );
}

export function authorizationFailRequestFromJSON(
  jsonString: string,
): SafeParseResult<AuthorizationFailRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthorizationFailRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthorizationFailRequest' from JSON`,
  );
}
