/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * An object containing api_serviceid_hsk_create data
 */
export type ApiServiceIdHskCreate = {
  /**
   * The key type (EC or RSA)
   *
   * @remarks
   */
  kty?: string | undefined;
  /**
   * The key on the HSM.
   *
   * @remarks
   * When the key use is "sig" (signature), the private key on the HSM is used to sign data and the corresponding public key is used to verify the signature.
   * When the key use is "enc" (encryption), the private key on the HSM is used to decrypt encrypted data which have been encrypted with the corresponding public key
   */
  use?: string | undefined;
  /**
   * Key ID for the key on the HSM.
   *
   * @remarks
   */
  kid?: string | undefined;
  /**
   * The name of the HSM.
   *
   * @remarks
   * The identifier for the HSM that sits behind the Authlete server. For example, "google".
   */
  hsmName?: string | undefined;
  /**
   * The handle for the key on the HSM.
   *
   * @remarks
   * A handle is a base64url-encoded 256-bit random value (43 letters) which is assigned by Authlete on the call of the /api/hsk/create API
   */
  handle?: string | undefined;
  /**
   * The public key that corresponds to the key on the HSM.
   *
   * @remarks
   */
  publicKey?: string | undefined;
};

/** @internal */
export const ApiServiceIdHskCreate$inboundSchema: z.ZodType<
  ApiServiceIdHskCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  kty: z.string().optional(),
  use: z.string().optional(),
  kid: z.string().optional(),
  hsmName: z.string().optional(),
  handle: z.string().optional(),
  publicKey: z.string().optional(),
});

/** @internal */
export type ApiServiceIdHskCreate$Outbound = {
  kty?: string | undefined;
  use?: string | undefined;
  kid?: string | undefined;
  hsmName?: string | undefined;
  handle?: string | undefined;
  publicKey?: string | undefined;
};

/** @internal */
export const ApiServiceIdHskCreate$outboundSchema: z.ZodType<
  ApiServiceIdHskCreate$Outbound,
  z.ZodTypeDef,
  ApiServiceIdHskCreate
> = z.object({
  kty: z.string().optional(),
  use: z.string().optional(),
  kid: z.string().optional(),
  hsmName: z.string().optional(),
  handle: z.string().optional(),
  publicKey: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiServiceIdHskCreate$ {
  /** @deprecated use `ApiServiceIdHskCreate$inboundSchema` instead. */
  export const inboundSchema = ApiServiceIdHskCreate$inboundSchema;
  /** @deprecated use `ApiServiceIdHskCreate$outboundSchema` instead. */
  export const outboundSchema = ApiServiceIdHskCreate$outboundSchema;
  /** @deprecated use `ApiServiceIdHskCreate$Outbound` instead. */
  export type Outbound = ApiServiceIdHskCreate$Outbound;
}

export function apiServiceIdHskCreateToJSON(
  apiServiceIdHskCreate: ApiServiceIdHskCreate,
): string {
  return JSON.stringify(
    ApiServiceIdHskCreate$outboundSchema.parse(apiServiceIdHskCreate),
  );
}

export function apiServiceIdHskCreateFromJSON(
  jsonString: string,
): SafeParseResult<ApiServiceIdHskCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiServiceIdHskCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiServiceIdHskCreate' from JSON`,
  );
}
