/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * An object containing api_serviceid_auth_introspection_standard data
 */
export type ApiServiceIdAuthIntrospectionStandard = {
  /**
   * Request parameters which comply with the introspection request defined
   *
   * @remarks
   * in "[2.1. Introspection Request](https://datatracker.ietf.org/doc/html/rfc7662#section-2.1)" in
   * RFC 7662.
   *
   * The implementation of the introspection endpoint of your authorization server will receive an
   * HTTP POST [[RFC 7231](https://datatracker.ietf.org/doc/html/rfc7231)] request with parameters
   * in the `application/x-www-form-urlencoded` format. It is the entity body of the request that
   * Authlete's  `/api/auth/introspection/standard` API expects as the value of `parameters`.
   */
  parameters: string;
  /**
   * Flag indicating whether to include hidden properties in the output.
   *
   * @remarks
   *
   * Authlete has a mechanism whereby to associate arbitrary key-value pairs with an access token.
   * Each key-value pair has a hidden attribute. By default, key-value pairs whose hidden attribute
   * is set to `true` are not embedded in the standard introspection output.
   *
   * If the `withHiddenProperties` request parameter is given and its value is `true`, `/api/auth/introspection/standard
   * API includes all the associated key-value pairs into the output regardless of the value of the
   * hidden attribute.
   */
  withHiddenProperties?: string | undefined;
};

/** @internal */
export const ApiServiceIdAuthIntrospectionStandard$inboundSchema: z.ZodType<
  ApiServiceIdAuthIntrospectionStandard,
  z.ZodTypeDef,
  unknown
> = z.object({
  parameters: z.string(),
  withHiddenProperties: z.string().optional(),
});

/** @internal */
export type ApiServiceIdAuthIntrospectionStandard$Outbound = {
  parameters: string;
  withHiddenProperties?: string | undefined;
};

/** @internal */
export const ApiServiceIdAuthIntrospectionStandard$outboundSchema: z.ZodType<
  ApiServiceIdAuthIntrospectionStandard$Outbound,
  z.ZodTypeDef,
  ApiServiceIdAuthIntrospectionStandard
> = z.object({
  parameters: z.string(),
  withHiddenProperties: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiServiceIdAuthIntrospectionStandard$ {
  /** @deprecated use `ApiServiceIdAuthIntrospectionStandard$inboundSchema` instead. */
  export const inboundSchema =
    ApiServiceIdAuthIntrospectionStandard$inboundSchema;
  /** @deprecated use `ApiServiceIdAuthIntrospectionStandard$outboundSchema` instead. */
  export const outboundSchema =
    ApiServiceIdAuthIntrospectionStandard$outboundSchema;
  /** @deprecated use `ApiServiceIdAuthIntrospectionStandard$Outbound` instead. */
  export type Outbound = ApiServiceIdAuthIntrospectionStandard$Outbound;
}

export function apiServiceIdAuthIntrospectionStandardToJSON(
  apiServiceIdAuthIntrospectionStandard: ApiServiceIdAuthIntrospectionStandard,
): string {
  return JSON.stringify(
    ApiServiceIdAuthIntrospectionStandard$outboundSchema.parse(
      apiServiceIdAuthIntrospectionStandard,
    ),
  );
}

export function apiServiceIdAuthIntrospectionStandardFromJSON(
  jsonString: string,
): SafeParseResult<ApiServiceIdAuthIntrospectionStandard, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApiServiceIdAuthIntrospectionStandard$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiServiceIdAuthIntrospectionStandard' from JSON`,
  );
}
