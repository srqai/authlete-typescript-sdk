/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ClientTypeProperties,
  ClientTypeProperties$inboundSchema,
  ClientTypeProperties$outboundSchema,
} from "./clienttypeproperties.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  TaggedValue,
  TaggedValue$inboundSchema,
  TaggedValue$Outbound,
  TaggedValue$outboundSchema,
} from "./taggedvalue.js";

/**
 * An object containing api_serviceid_auth_token_get_listpropertiesclient data
 */
export type ApiServiceIdAuthTokenGetListpropertiesclient = {
  /**
   * The sequential number of the client. The value of this property is assigned by Authlete.
   *
   * @remarks
   */
  number?: number | undefined;
  /**
   * The name of the client application. This property corresponds to `client_name` in
   *
   * @remarks
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  clientName?: string | undefined;
  /**
   * Client names with language tags. If the client application has different names for different
   *
   * @remarks
   * languages, this property can be used to register the names.
   */
  clientNames?: Array<TaggedValue> | undefined;
  /**
   * The description about the client application.
   */
  description?: string | undefined;
  /**
   * Descriptions about the client application with language tags. If the client application has different
   *
   * @remarks
   * descriptions for different languages, this property can be used to register the descriptions.
   */
  descriptions?: Array<TaggedValue> | undefined;
  /**
   * The client identifier used in Authlete API calls. The value of this property is assigned by Authlete.
   */
  clientId?: number | undefined;
  /**
   * The value of the client's `client_id` property used in OAuth and OpenID Connect calls. By
   *
   * @remarks
   * default, this is a string version of the `clientId` property.
   */
  clientIdAlias?: string | undefined;
  /**
   * Deprecated. Always set to `true`.
   */
  clientIdAliasEnabled?: boolean | undefined;
  /**
   * The client type, either `CONFIDENTIAL` or `PUBLIC`. See [RFC 6749, 2.1. Client Types](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1)
   *
   * @remarks
   * for details.
   */
  clientType?: ClientTypeProperties | undefined;
};

/** @internal */
export const ApiServiceIdAuthTokenGetListpropertiesclient$inboundSchema:
  z.ZodType<
    ApiServiceIdAuthTokenGetListpropertiesclient,
    z.ZodTypeDef,
    unknown
  > = z.object({
    number: z.number().int().optional(),
    clientName: z.string().optional(),
    clientNames: z.array(TaggedValue$inboundSchema).optional(),
    description: z.string().optional(),
    descriptions: z.array(TaggedValue$inboundSchema).optional(),
    clientId: z.number().int().optional(),
    clientIdAlias: z.string().optional(),
    clientIdAliasEnabled: z.boolean().optional(),
    clientType: ClientTypeProperties$inboundSchema.optional(),
  });

/** @internal */
export type ApiServiceIdAuthTokenGetListpropertiesclient$Outbound = {
  number?: number | undefined;
  clientName?: string | undefined;
  clientNames?: Array<TaggedValue$Outbound> | undefined;
  description?: string | undefined;
  descriptions?: Array<TaggedValue$Outbound> | undefined;
  clientId?: number | undefined;
  clientIdAlias?: string | undefined;
  clientIdAliasEnabled?: boolean | undefined;
  clientType?: string | undefined;
};

/** @internal */
export const ApiServiceIdAuthTokenGetListpropertiesclient$outboundSchema:
  z.ZodType<
    ApiServiceIdAuthTokenGetListpropertiesclient$Outbound,
    z.ZodTypeDef,
    ApiServiceIdAuthTokenGetListpropertiesclient
  > = z.object({
    number: z.number().int().optional(),
    clientName: z.string().optional(),
    clientNames: z.array(TaggedValue$outboundSchema).optional(),
    description: z.string().optional(),
    descriptions: z.array(TaggedValue$outboundSchema).optional(),
    clientId: z.number().int().optional(),
    clientIdAlias: z.string().optional(),
    clientIdAliasEnabled: z.boolean().optional(),
    clientType: ClientTypeProperties$outboundSchema.optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiServiceIdAuthTokenGetListpropertiesclient$ {
  /** @deprecated use `ApiServiceIdAuthTokenGetListpropertiesclient$inboundSchema` instead. */
  export const inboundSchema =
    ApiServiceIdAuthTokenGetListpropertiesclient$inboundSchema;
  /** @deprecated use `ApiServiceIdAuthTokenGetListpropertiesclient$outboundSchema` instead. */
  export const outboundSchema =
    ApiServiceIdAuthTokenGetListpropertiesclient$outboundSchema;
  /** @deprecated use `ApiServiceIdAuthTokenGetListpropertiesclient$Outbound` instead. */
  export type Outbound = ApiServiceIdAuthTokenGetListpropertiesclient$Outbound;
}

export function apiServiceIdAuthTokenGetListpropertiesclientToJSON(
  apiServiceIdAuthTokenGetListpropertiesclient:
    ApiServiceIdAuthTokenGetListpropertiesclient,
): string {
  return JSON.stringify(
    ApiServiceIdAuthTokenGetListpropertiesclient$outboundSchema.parse(
      apiServiceIdAuthTokenGetListpropertiesclient,
    ),
  );
}

export function apiServiceIdAuthTokenGetListpropertiesclientFromJSON(
  jsonString: string,
): SafeParseResult<
  ApiServiceIdAuthTokenGetListpropertiesclient,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ApiServiceIdAuthTokenGetListpropertiesclient$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ApiServiceIdAuthTokenGetListpropertiesclient' from JSON`,
  );
}
