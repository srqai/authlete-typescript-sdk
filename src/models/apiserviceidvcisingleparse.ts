/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * An object containing api_serviceid_vci_single_parse data
 */
export type ApiServiceIdVciSingleParse = {
  /**
   * The access token that came along with the credential request.
   */
  accessToken?: string | undefined;
  /**
   * The message body of the credential request.
   */
  requestContent?: string | undefined;
};

/** @internal */
export const ApiServiceIdVciSingleParse$inboundSchema: z.ZodType<
  ApiServiceIdVciSingleParse,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessToken: z.string().optional(),
  requestContent: z.string().optional(),
});

/** @internal */
export type ApiServiceIdVciSingleParse$Outbound = {
  accessToken?: string | undefined;
  requestContent?: string | undefined;
};

/** @internal */
export const ApiServiceIdVciSingleParse$outboundSchema: z.ZodType<
  ApiServiceIdVciSingleParse$Outbound,
  z.ZodTypeDef,
  ApiServiceIdVciSingleParse
> = z.object({
  accessToken: z.string().optional(),
  requestContent: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiServiceIdVciSingleParse$ {
  /** @deprecated use `ApiServiceIdVciSingleParse$inboundSchema` instead. */
  export const inboundSchema = ApiServiceIdVciSingleParse$inboundSchema;
  /** @deprecated use `ApiServiceIdVciSingleParse$outboundSchema` instead. */
  export const outboundSchema = ApiServiceIdVciSingleParse$outboundSchema;
  /** @deprecated use `ApiServiceIdVciSingleParse$Outbound` instead. */
  export type Outbound = ApiServiceIdVciSingleParse$Outbound;
}

export function apiServiceIdVciSingleParseToJSON(
  apiServiceIdVciSingleParse: ApiServiceIdVciSingleParse,
): string {
  return JSON.stringify(
    ApiServiceIdVciSingleParse$outboundSchema.parse(apiServiceIdVciSingleParse),
  );
}

export function apiServiceIdVciSingleParseFromJSON(
  jsonString: string,
): SafeParseResult<ApiServiceIdVciSingleParse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiServiceIdVciSingleParse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiServiceIdVciSingleParse' from JSON`,
  );
}
