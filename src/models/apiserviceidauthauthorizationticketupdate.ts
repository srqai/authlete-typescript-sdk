/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * An object containing api_serviceid_auth_authorization_ticket_update data
 */
export type ApiServiceIdAuthAuthorizationTicketUpdate = {
  /**
   * The ticket.
   */
  ticket: string;
  /**
   * The information about the ticket.
   */
  info: string;
};

/** @internal */
export const ApiServiceIdAuthAuthorizationTicketUpdate$inboundSchema: z.ZodType<
  ApiServiceIdAuthAuthorizationTicketUpdate,
  z.ZodTypeDef,
  unknown
> = z.object({
  ticket: z.string(),
  info: z.string(),
});

/** @internal */
export type ApiServiceIdAuthAuthorizationTicketUpdate$Outbound = {
  ticket: string;
  info: string;
};

/** @internal */
export const ApiServiceIdAuthAuthorizationTicketUpdate$outboundSchema:
  z.ZodType<
    ApiServiceIdAuthAuthorizationTicketUpdate$Outbound,
    z.ZodTypeDef,
    ApiServiceIdAuthAuthorizationTicketUpdate
  > = z.object({
    ticket: z.string(),
    info: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiServiceIdAuthAuthorizationTicketUpdate$ {
  /** @deprecated use `ApiServiceIdAuthAuthorizationTicketUpdate$inboundSchema` instead. */
  export const inboundSchema =
    ApiServiceIdAuthAuthorizationTicketUpdate$inboundSchema;
  /** @deprecated use `ApiServiceIdAuthAuthorizationTicketUpdate$outboundSchema` instead. */
  export const outboundSchema =
    ApiServiceIdAuthAuthorizationTicketUpdate$outboundSchema;
  /** @deprecated use `ApiServiceIdAuthAuthorizationTicketUpdate$Outbound` instead. */
  export type Outbound = ApiServiceIdAuthAuthorizationTicketUpdate$Outbound;
}

export function apiServiceIdAuthAuthorizationTicketUpdateToJSON(
  apiServiceIdAuthAuthorizationTicketUpdate:
    ApiServiceIdAuthAuthorizationTicketUpdate,
): string {
  return JSON.stringify(
    ApiServiceIdAuthAuthorizationTicketUpdate$outboundSchema.parse(
      apiServiceIdAuthAuthorizationTicketUpdate,
    ),
  );
}

export function apiServiceIdAuthAuthorizationTicketUpdateFromJSON(
  jsonString: string,
): SafeParseResult<
  ApiServiceIdAuthAuthorizationTicketUpdate,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ApiServiceIdAuthAuthorizationTicketUpdate$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ApiServiceIdAuthAuthorizationTicketUpdate' from JSON`,
  );
}
