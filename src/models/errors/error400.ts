/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { AuthleteError } from "./authleteerror.js";

/**
 * An object containing schema data
 */
export type Error400Data = {
  /**
   * A string value
   */
  error?: string | undefined;
  /**
   * A string value
   */
  errorDescription?: string | undefined;
};

/**
 * An object containing schema data
 */
export class Error400 extends AuthleteError {
  /**
   * A string value
   */
  error?: string | undefined;
  /**
   * A string value
   */
  errorDescription?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: Error400Data;

  constructor(
    err: Error400Data,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.error != null) this.error = err.error;
    if (err.errorDescription != null) {
      this.errorDescription = err.errorDescription;
    }

    this.name = "Error400";
  }
}

/** @internal */
export const Error400$inboundSchema: z.ZodType<
  Error400,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string().optional(),
  error_description: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "error_description": "errorDescription",
    });

    return new Error400(remapped, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type Error400$Outbound = {
  error?: string | undefined;
  error_description?: string | undefined;
};

/** @internal */
export const Error400$outboundSchema: z.ZodType<
  Error400$Outbound,
  z.ZodTypeDef,
  Error400
> = z.instanceof(Error400)
  .transform(v => v.data$)
  .pipe(
    z.object({
      error: z.string().optional(),
      errorDescription: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        errorDescription: "error_description",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Error400$ {
  /** @deprecated use `Error400$inboundSchema` instead. */
  export const inboundSchema = Error400$inboundSchema;
  /** @deprecated use `Error400$outboundSchema` instead. */
  export const outboundSchema = Error400$outboundSchema;
  /** @deprecated use `Error400$Outbound` instead. */
  export type Outbound = Error400$Outbound;
}
