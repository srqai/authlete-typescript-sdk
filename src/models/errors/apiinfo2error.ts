/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AuthleteError } from "./authleteerror.js";

/**
 * An object containing api_info2 data
 */
export type ApiInfo2ErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

/**
 * An object containing api_info2 data
 */
export class ApiInfo2Error extends AuthleteError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ApiInfo2ErrorData;

  constructor(
    err: ApiInfo2ErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "ApiInfo2Error";
  }
}

/** @internal */
export const ApiInfo2Error$inboundSchema: z.ZodType<
  ApiInfo2Error,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ApiInfo2Error(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ApiInfo2Error$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const ApiInfo2Error$outboundSchema: z.ZodType<
  ApiInfo2Error$Outbound,
  z.ZodTypeDef,
  ApiInfo2Error
> = z.instanceof(ApiInfo2Error)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiInfo2Error$ {
  /** @deprecated use `ApiInfo2Error$inboundSchema` instead. */
  export const inboundSchema = ApiInfo2Error$inboundSchema;
  /** @deprecated use `ApiInfo2Error$outboundSchema` instead. */
  export const outboundSchema = ApiInfo2Error$outboundSchema;
  /** @deprecated use `ApiInfo2Error$Outbound` instead. */
  export type Outbound = ApiInfo2Error$Outbound;
}
