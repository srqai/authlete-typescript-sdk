/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type CredentialIssuerMetadata = {
  /**
   * The identifier of a credential request.
   */
  credentialIssuer?: string | undefined;
  /**
   * The identifier of the authorization server that the credential issuer
   *
   * @remarks
   * relies on for authorization.
   */
  authorizationServer?: string | undefined;
  /**
   * The URL of the credential endpoint of the credential issuer.
   */
  credentialEndpoint?: boolean | undefined;
  /**
   * The URL of the batch credential endpoint of the credential issuer.
   */
  batchCredentialEndpoint?: number | undefined;
  /**
   * The URL of the deferred credential endpoint of the credential issuer.
   */
  deferredCredentialEndpoint?: string | undefined;
  /**
   * A JSON array describing supported credentials.
   */
  credentialsSupported?: boolean | undefined;
};

/** @internal */
export const CredentialIssuerMetadata$inboundSchema: z.ZodType<
  CredentialIssuerMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  credentialIssuer: z.string().optional(),
  authorizationServer: z.string().optional(),
  credentialEndpoint: z.boolean().optional(),
  batchCredentialEndpoint: z.number().int().optional(),
  deferredCredentialEndpoint: z.string().optional(),
  credentialsSupported: z.boolean().optional(),
});

/** @internal */
export type CredentialIssuerMetadata$Outbound = {
  credentialIssuer?: string | undefined;
  authorizationServer?: string | undefined;
  credentialEndpoint?: boolean | undefined;
  batchCredentialEndpoint?: number | undefined;
  deferredCredentialEndpoint?: string | undefined;
  credentialsSupported?: boolean | undefined;
};

/** @internal */
export const CredentialIssuerMetadata$outboundSchema: z.ZodType<
  CredentialIssuerMetadata$Outbound,
  z.ZodTypeDef,
  CredentialIssuerMetadata
> = z.object({
  credentialIssuer: z.string().optional(),
  authorizationServer: z.string().optional(),
  credentialEndpoint: z.boolean().optional(),
  batchCredentialEndpoint: z.number().int().optional(),
  deferredCredentialEndpoint: z.string().optional(),
  credentialsSupported: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CredentialIssuerMetadata$ {
  /** @deprecated use `CredentialIssuerMetadata$inboundSchema` instead. */
  export const inboundSchema = CredentialIssuerMetadata$inboundSchema;
  /** @deprecated use `CredentialIssuerMetadata$outboundSchema` instead. */
  export const outboundSchema = CredentialIssuerMetadata$outboundSchema;
  /** @deprecated use `CredentialIssuerMetadata$Outbound` instead. */
  export type Outbound = CredentialIssuerMetadata$Outbound;
}

export function credentialIssuerMetadataToJSON(
  credentialIssuerMetadata: CredentialIssuerMetadata,
): string {
  return JSON.stringify(
    CredentialIssuerMetadata$outboundSchema.parse(credentialIssuerMetadata),
  );
}

export function credentialIssuerMetadataFromJSON(
  jsonString: string,
): SafeParseResult<CredentialIssuerMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CredentialIssuerMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CredentialIssuerMetadata' from JSON`,
  );
}
