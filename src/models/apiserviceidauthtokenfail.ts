/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The reason of the failure of the token request.
 *
 * @remarks
 */
export const ApiServiceIdAuthTokenFailReason = {
  Unknown: "UNKNOWN",
  InvalidResourceOwnerCredentials: "INVALID_RESOURCE_OWNER_CREDENTIALS",
  InvalidTarget: "INVALID_TARGET",
} as const;
/**
 * The reason of the failure of the token request.
 *
 * @remarks
 */
export type ApiServiceIdAuthTokenFailReason = ClosedEnum<
  typeof ApiServiceIdAuthTokenFailReason
>;

/**
 * An object containing api_serviceid_auth_token_fail data
 */
export type ApiServiceIdAuthTokenFail = {
  /**
   * The ticket issued from Authlete `/auth/token` API.
   *
   * @remarks
   */
  ticket: string;
  /**
   * The reason of the failure of the token request.
   *
   * @remarks
   */
  reason: ApiServiceIdAuthTokenFailReason;
};

/** @internal */
export const ApiServiceIdAuthTokenFailReason$inboundSchema: z.ZodNativeEnum<
  typeof ApiServiceIdAuthTokenFailReason
> = z.nativeEnum(ApiServiceIdAuthTokenFailReason);

/** @internal */
export const ApiServiceIdAuthTokenFailReason$outboundSchema: z.ZodNativeEnum<
  typeof ApiServiceIdAuthTokenFailReason
> = ApiServiceIdAuthTokenFailReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiServiceIdAuthTokenFailReason$ {
  /** @deprecated use `ApiServiceIdAuthTokenFailReason$inboundSchema` instead. */
  export const inboundSchema = ApiServiceIdAuthTokenFailReason$inboundSchema;
  /** @deprecated use `ApiServiceIdAuthTokenFailReason$outboundSchema` instead. */
  export const outboundSchema = ApiServiceIdAuthTokenFailReason$outboundSchema;
}

/** @internal */
export const ApiServiceIdAuthTokenFail$inboundSchema: z.ZodType<
  ApiServiceIdAuthTokenFail,
  z.ZodTypeDef,
  unknown
> = z.object({
  ticket: z.string(),
  reason: ApiServiceIdAuthTokenFailReason$inboundSchema,
});

/** @internal */
export type ApiServiceIdAuthTokenFail$Outbound = {
  ticket: string;
  reason: string;
};

/** @internal */
export const ApiServiceIdAuthTokenFail$outboundSchema: z.ZodType<
  ApiServiceIdAuthTokenFail$Outbound,
  z.ZodTypeDef,
  ApiServiceIdAuthTokenFail
> = z.object({
  ticket: z.string(),
  reason: ApiServiceIdAuthTokenFailReason$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiServiceIdAuthTokenFail$ {
  /** @deprecated use `ApiServiceIdAuthTokenFail$inboundSchema` instead. */
  export const inboundSchema = ApiServiceIdAuthTokenFail$inboundSchema;
  /** @deprecated use `ApiServiceIdAuthTokenFail$outboundSchema` instead. */
  export const outboundSchema = ApiServiceIdAuthTokenFail$outboundSchema;
  /** @deprecated use `ApiServiceIdAuthTokenFail$Outbound` instead. */
  export type Outbound = ApiServiceIdAuthTokenFail$Outbound;
}

export function apiServiceIdAuthTokenFailToJSON(
  apiServiceIdAuthTokenFail: ApiServiceIdAuthTokenFail,
): string {
  return JSON.stringify(
    ApiServiceIdAuthTokenFail$outboundSchema.parse(apiServiceIdAuthTokenFail),
  );
}

export function apiServiceIdAuthTokenFailFromJSON(
  jsonString: string,
): SafeParseResult<ApiServiceIdAuthTokenFail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiServiceIdAuthTokenFail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiServiceIdAuthTokenFail' from JSON`,
  );
}
