/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type APILBraceserviceIdRBraceDeviceAuthorization = {};

/** @internal */
export const APILBraceserviceIdRBraceDeviceAuthorization$inboundSchema:
  z.ZodType<
    APILBraceserviceIdRBraceDeviceAuthorization,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type APILBraceserviceIdRBraceDeviceAuthorization$Outbound = {};

/** @internal */
export const APILBraceserviceIdRBraceDeviceAuthorization$outboundSchema:
  z.ZodType<
    APILBraceserviceIdRBraceDeviceAuthorization$Outbound,
    z.ZodTypeDef,
    APILBraceserviceIdRBraceDeviceAuthorization
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace APILBraceserviceIdRBraceDeviceAuthorization$ {
  /** @deprecated use `APILBraceserviceIdRBraceDeviceAuthorization$inboundSchema` instead. */
  export const inboundSchema =
    APILBraceserviceIdRBraceDeviceAuthorization$inboundSchema;
  /** @deprecated use `APILBraceserviceIdRBraceDeviceAuthorization$outboundSchema` instead. */
  export const outboundSchema =
    APILBraceserviceIdRBraceDeviceAuthorization$outboundSchema;
  /** @deprecated use `APILBraceserviceIdRBraceDeviceAuthorization$Outbound` instead. */
  export type Outbound = APILBraceserviceIdRBraceDeviceAuthorization$Outbound;
}

export function apilBraceserviceIdRBraceDeviceAuthorizationToJSON(
  apilBraceserviceIdRBraceDeviceAuthorization:
    APILBraceserviceIdRBraceDeviceAuthorization,
): string {
  return JSON.stringify(
    APILBraceserviceIdRBraceDeviceAuthorization$outboundSchema.parse(
      apilBraceserviceIdRBraceDeviceAuthorization,
    ),
  );
}

export function apilBraceserviceIdRBraceDeviceAuthorizationFromJSON(
  jsonString: string,
): SafeParseResult<
  APILBraceserviceIdRBraceDeviceAuthorization,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      APILBraceserviceIdRBraceDeviceAuthorization$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'APILBraceserviceIdRBraceDeviceAuthorization' from JSON`,
  );
}
