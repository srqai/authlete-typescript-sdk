/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type DeviceVerification = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const DeviceVerification$inboundSchema: z.ZodType<
  DeviceVerification,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
});

/** @internal */
export type DeviceVerification$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const DeviceVerification$outboundSchema: z.ZodType<
  DeviceVerification$Outbound,
  z.ZodTypeDef,
  DeviceVerification
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceVerification$ {
  /** @deprecated use `DeviceVerification$inboundSchema` instead. */
  export const inboundSchema = DeviceVerification$inboundSchema;
  /** @deprecated use `DeviceVerification$outboundSchema` instead. */
  export const outboundSchema = DeviceVerification$outboundSchema;
  /** @deprecated use `DeviceVerification$Outbound` instead. */
  export type Outbound = DeviceVerification$Outbound;
}

export function deviceVerificationToJSON(
  deviceVerification: DeviceVerification,
): string {
  return JSON.stringify(
    DeviceVerification$outboundSchema.parse(deviceVerification),
  );
}

export function deviceVerificationFromJSON(
  jsonString: string,
): SafeParseResult<DeviceVerification, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeviceVerification$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceVerification' from JSON`,
  );
}
