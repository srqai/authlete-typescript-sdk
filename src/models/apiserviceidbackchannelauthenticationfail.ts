/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The reason of the failure of the backchannel authentication request. This request parameter is
 *
 * @remarks
 * not mandatory but optional. However, giving this parameter is recommended. If omitted, `SERVER_ERROR`
 * is used as a reason.
 */
export const ApiServiceIdBackchannelAuthenticationFailReason = {
  AccessDenied: "ACCESS_DENIED",
  ExpiredLoginHintToken: "EXPIRED_LOGIN_HINT_TOKEN",
  InvalidBindingMessage: "INVALID_BINDING_MESSAGE",
  InvalidTarget: "INVALID_TARGET",
  InvalidUserCode: "INVALID_USER_CODE",
  MissingUserCode: "MISSING_USER_CODE",
  ServerError: "SERVER_ERROR",
  UnauthorizedClient: "UNAUTHORIZED_CLIENT",
  UnknownUserId: "UNKNOWN_USER_ID",
} as const;
/**
 * The reason of the failure of the backchannel authentication request. This request parameter is
 *
 * @remarks
 * not mandatory but optional. However, giving this parameter is recommended. If omitted, `SERVER_ERROR`
 * is used as a reason.
 */
export type ApiServiceIdBackchannelAuthenticationFailReason = ClosedEnum<
  typeof ApiServiceIdBackchannelAuthenticationFailReason
>;

/**
 * An object containing api_serviceid_backchannel_authentication_fail data
 */
export type ApiServiceIdBackchannelAuthenticationFail = {
  /**
   * The ticket which should be deleted on a call of Authlete's `/backchannel/authentication/fail` API.
   *
   * @remarks
   * This request parameter is not mandatory but optional. If this request parameter is given and the
   * ticket belongs to the service, the specified ticket is deleted from the database. Giving this
   * parameter is recommended to clean up the storage area for the service.
   */
  ticket: string;
  /**
   * The reason of the failure of the backchannel authentication request. This request parameter is
   *
   * @remarks
   * not mandatory but optional. However, giving this parameter is recommended. If omitted, `SERVER_ERROR`
   * is used as a reason.
   */
  reason: ApiServiceIdBackchannelAuthenticationFailReason;
  /**
   * The description of the error. This corresponds to the `error_description` property in the response
   *
   * @remarks
   * to the client.
   */
  errorDescription?: string | undefined;
  /**
   * The URI of a document which describes the error in detail. If this optional request parameter
   *
   * @remarks
   * is given, its value is used as the value of the `error_uri` property.
   */
  errorUri?: string | undefined;
};

/** @internal */
export const ApiServiceIdBackchannelAuthenticationFailReason$inboundSchema:
  z.ZodNativeEnum<typeof ApiServiceIdBackchannelAuthenticationFailReason> = z
    .nativeEnum(ApiServiceIdBackchannelAuthenticationFailReason);

/** @internal */
export const ApiServiceIdBackchannelAuthenticationFailReason$outboundSchema:
  z.ZodNativeEnum<typeof ApiServiceIdBackchannelAuthenticationFailReason> =
    ApiServiceIdBackchannelAuthenticationFailReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiServiceIdBackchannelAuthenticationFailReason$ {
  /** @deprecated use `ApiServiceIdBackchannelAuthenticationFailReason$inboundSchema` instead. */
  export const inboundSchema =
    ApiServiceIdBackchannelAuthenticationFailReason$inboundSchema;
  /** @deprecated use `ApiServiceIdBackchannelAuthenticationFailReason$outboundSchema` instead. */
  export const outboundSchema =
    ApiServiceIdBackchannelAuthenticationFailReason$outboundSchema;
}

/** @internal */
export const ApiServiceIdBackchannelAuthenticationFail$inboundSchema: z.ZodType<
  ApiServiceIdBackchannelAuthenticationFail,
  z.ZodTypeDef,
  unknown
> = z.object({
  ticket: z.string(),
  reason: ApiServiceIdBackchannelAuthenticationFailReason$inboundSchema,
  errorDescription: z.string().optional(),
  errorUri: z.string().optional(),
});

/** @internal */
export type ApiServiceIdBackchannelAuthenticationFail$Outbound = {
  ticket: string;
  reason: string;
  errorDescription?: string | undefined;
  errorUri?: string | undefined;
};

/** @internal */
export const ApiServiceIdBackchannelAuthenticationFail$outboundSchema:
  z.ZodType<
    ApiServiceIdBackchannelAuthenticationFail$Outbound,
    z.ZodTypeDef,
    ApiServiceIdBackchannelAuthenticationFail
  > = z.object({
    ticket: z.string(),
    reason: ApiServiceIdBackchannelAuthenticationFailReason$outboundSchema,
    errorDescription: z.string().optional(),
    errorUri: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiServiceIdBackchannelAuthenticationFail$ {
  /** @deprecated use `ApiServiceIdBackchannelAuthenticationFail$inboundSchema` instead. */
  export const inboundSchema =
    ApiServiceIdBackchannelAuthenticationFail$inboundSchema;
  /** @deprecated use `ApiServiceIdBackchannelAuthenticationFail$outboundSchema` instead. */
  export const outboundSchema =
    ApiServiceIdBackchannelAuthenticationFail$outboundSchema;
  /** @deprecated use `ApiServiceIdBackchannelAuthenticationFail$Outbound` instead. */
  export type Outbound = ApiServiceIdBackchannelAuthenticationFail$Outbound;
}

export function apiServiceIdBackchannelAuthenticationFailToJSON(
  apiServiceIdBackchannelAuthenticationFail:
    ApiServiceIdBackchannelAuthenticationFail,
): string {
  return JSON.stringify(
    ApiServiceIdBackchannelAuthenticationFail$outboundSchema.parse(
      apiServiceIdBackchannelAuthenticationFail,
    ),
  );
}

export function apiServiceIdBackchannelAuthenticationFailFromJSON(
  jsonString: string,
): SafeParseResult<
  ApiServiceIdBackchannelAuthenticationFail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ApiServiceIdBackchannelAuthenticationFail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ApiServiceIdBackchannelAuthenticationFail' from JSON`,
  );
}
