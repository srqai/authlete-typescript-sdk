/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * An object containing api_serviceid_vci_jwtissuer data
 */
export type ApiServiceIdVciJwtissuer = {
  /**
   * The flag indicating whether the metadata is written in the pretty
   *
   * @remarks
   * format or not.
   */
  pretty: boolean;
};

/** @internal */
export const ApiServiceIdVciJwtissuer$inboundSchema: z.ZodType<
  ApiServiceIdVciJwtissuer,
  z.ZodTypeDef,
  unknown
> = z.object({
  pretty: z.boolean(),
});

/** @internal */
export type ApiServiceIdVciJwtissuer$Outbound = {
  pretty: boolean;
};

/** @internal */
export const ApiServiceIdVciJwtissuer$outboundSchema: z.ZodType<
  ApiServiceIdVciJwtissuer$Outbound,
  z.ZodTypeDef,
  ApiServiceIdVciJwtissuer
> = z.object({
  pretty: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiServiceIdVciJwtissuer$ {
  /** @deprecated use `ApiServiceIdVciJwtissuer$inboundSchema` instead. */
  export const inboundSchema = ApiServiceIdVciJwtissuer$inboundSchema;
  /** @deprecated use `ApiServiceIdVciJwtissuer$outboundSchema` instead. */
  export const outboundSchema = ApiServiceIdVciJwtissuer$outboundSchema;
  /** @deprecated use `ApiServiceIdVciJwtissuer$Outbound` instead. */
  export type Outbound = ApiServiceIdVciJwtissuer$Outbound;
}

export function apiServiceIdVciJwtissuerToJSON(
  apiServiceIdVciJwtissuer: ApiServiceIdVciJwtissuer,
): string {
  return JSON.stringify(
    ApiServiceIdVciJwtissuer$outboundSchema.parse(apiServiceIdVciJwtissuer),
  );
}

export function apiServiceIdVciJwtissuerFromJSON(
  jsonString: string,
): SafeParseResult<ApiServiceIdVciJwtissuer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiServiceIdVciJwtissuer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiServiceIdVciJwtissuer' from JSON`,
  );
}
