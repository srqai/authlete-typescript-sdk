/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * An object containing api_serviceid_vci_batch_parse data
 */
export type ApiServiceIdVciBatchParse = {
  /**
   * The access token that came along with the credential request.
   */
  accessToken?: string | undefined;
  /**
   * The message body of the batch credential request.
   */
  requestContent?: string | undefined;
};

/** @internal */
export const ApiServiceIdVciBatchParse$inboundSchema: z.ZodType<
  ApiServiceIdVciBatchParse,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessToken: z.string().optional(),
  requestContent: z.string().optional(),
});

/** @internal */
export type ApiServiceIdVciBatchParse$Outbound = {
  accessToken?: string | undefined;
  requestContent?: string | undefined;
};

/** @internal */
export const ApiServiceIdVciBatchParse$outboundSchema: z.ZodType<
  ApiServiceIdVciBatchParse$Outbound,
  z.ZodTypeDef,
  ApiServiceIdVciBatchParse
> = z.object({
  accessToken: z.string().optional(),
  requestContent: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiServiceIdVciBatchParse$ {
  /** @deprecated use `ApiServiceIdVciBatchParse$inboundSchema` instead. */
  export const inboundSchema = ApiServiceIdVciBatchParse$inboundSchema;
  /** @deprecated use `ApiServiceIdVciBatchParse$outboundSchema` instead. */
  export const outboundSchema = ApiServiceIdVciBatchParse$outboundSchema;
  /** @deprecated use `ApiServiceIdVciBatchParse$Outbound` instead. */
  export type Outbound = ApiServiceIdVciBatchParse$Outbound;
}

export function apiServiceIdVciBatchParseToJSON(
  apiServiceIdVciBatchParse: ApiServiceIdVciBatchParse,
): string {
  return JSON.stringify(
    ApiServiceIdVciBatchParse$outboundSchema.parse(apiServiceIdVciBatchParse),
  );
}

export function apiServiceIdVciBatchParseFromJSON(
  jsonString: string,
): SafeParseResult<ApiServiceIdVciBatchParse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiServiceIdVciBatchParse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiServiceIdVciBatchParse' from JSON`,
  );
}
