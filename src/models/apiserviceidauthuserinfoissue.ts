/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Pair,
  Pair$inboundSchema,
  Pair$Outbound,
  Pair$outboundSchema,
} from "./pair.js";

/**
 * An object containing api_serviceid_auth_userinfo_issue data
 */
export type ApiServiceIdAuthUserinfoIssue = {
  /**
   * The access token that has been passed to the userinfo endpoint by the client application. In other words,
   *
   * @remarks
   * the access token which was contained in the userinfo request.
   */
  token: string;
  /**
   * Claims in JSON format. As for the format, see [OpenID Connect Core 1.0, 5.1. Standard Claims](https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims).
   *
   * @remarks
   */
  claims?: string | undefined;
  /**
   * The value of the `sub` claim. If the value of this request parameter is not empty, it is used as the value of
   *
   * @remarks
   * the `sub` claim. Otherwise, the value of the subject associated with the access token is used.
   */
  sub?: string | undefined;
  /**
   * Claim key-value pairs that are used to compute transformed claims.
   *
   * @remarks
   */
  claimsForTx?: string | undefined;
  /**
   * The Signature header value from the request.
   *
   * @remarks
   */
  requestSignature?: string | undefined;
  /**
   * HTTP headers to be included in processing the signature. If this is a signed request, this must include the
   *
   * @remarks
   * Signature and Signature-Input headers, as well as any additional headers covered by the signature.
   */
  headers?: Array<Pair> | undefined;
};

/** @internal */
export const ApiServiceIdAuthUserinfoIssue$inboundSchema: z.ZodType<
  ApiServiceIdAuthUserinfoIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
  claims: z.string().optional(),
  sub: z.string().optional(),
  claimsForTx: z.string().optional(),
  requestSignature: z.string().optional(),
  headers: z.array(Pair$inboundSchema).optional(),
});

/** @internal */
export type ApiServiceIdAuthUserinfoIssue$Outbound = {
  token: string;
  claims?: string | undefined;
  sub?: string | undefined;
  claimsForTx?: string | undefined;
  requestSignature?: string | undefined;
  headers?: Array<Pair$Outbound> | undefined;
};

/** @internal */
export const ApiServiceIdAuthUserinfoIssue$outboundSchema: z.ZodType<
  ApiServiceIdAuthUserinfoIssue$Outbound,
  z.ZodTypeDef,
  ApiServiceIdAuthUserinfoIssue
> = z.object({
  token: z.string(),
  claims: z.string().optional(),
  sub: z.string().optional(),
  claimsForTx: z.string().optional(),
  requestSignature: z.string().optional(),
  headers: z.array(Pair$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiServiceIdAuthUserinfoIssue$ {
  /** @deprecated use `ApiServiceIdAuthUserinfoIssue$inboundSchema` instead. */
  export const inboundSchema = ApiServiceIdAuthUserinfoIssue$inboundSchema;
  /** @deprecated use `ApiServiceIdAuthUserinfoIssue$outboundSchema` instead. */
  export const outboundSchema = ApiServiceIdAuthUserinfoIssue$outboundSchema;
  /** @deprecated use `ApiServiceIdAuthUserinfoIssue$Outbound` instead. */
  export type Outbound = ApiServiceIdAuthUserinfoIssue$Outbound;
}

export function apiServiceIdAuthUserinfoIssueToJSON(
  apiServiceIdAuthUserinfoIssue: ApiServiceIdAuthUserinfoIssue,
): string {
  return JSON.stringify(
    ApiServiceIdAuthUserinfoIssue$outboundSchema.parse(
      apiServiceIdAuthUserinfoIssue,
    ),
  );
}

export function apiServiceIdAuthUserinfoIssueFromJSON(
  jsonString: string,
): SafeParseResult<ApiServiceIdAuthUserinfoIssue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiServiceIdAuthUserinfoIssue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiServiceIdAuthUserinfoIssue' from JSON`,
  );
}
